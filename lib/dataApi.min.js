(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 312);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _GeoDataModel2 = __webpack_require__(59);

var _GeoDataModel3 = _interopRequireDefault(_GeoDataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 要素模型基类
 */
var Feature = function (_GeoDataModel) {
    _inherits(Feature, _GeoDataModel);

    function Feature() {
        _classCallCheck(this, Feature);

        return _possibleConstructorReturn(this, (Feature.__proto__ || Object.getPrototypeOf(Feature)).apply(this, arguments));
    }

    _createClass(Feature, [{
        key: 'initialize',

        /**
         * 设置对象属性方法，需要在子类中重写
         * @param  {object} data - 接口返回的json数据对象
         * @return {undefined}
         */
        value: function initialize(data) {
            _get(Feature.prototype.__proto__ || Object.getPrototypeOf(Feature.prototype), 'initialize', this).call(this, data);
            this.geoLiveType = data.geoLiveType || 'FEATURE';
        }

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */

    }, {
        key: 'setAttributes',
        value: function setAttributes(data) {
            FM.extend(this, data);
            this.pid = data.pid || 0;
        }
        /**
         * 批量编辑方法：获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'exclude',
        get: function get() {
            var main = _get(Feature.prototype.__proto__ || Object.getPrototypeOf(Feature.prototype), 'exclude', this);
            return _get(Feature.prototype.__proto__ || Object.getPrototypeOf(Feature.prototype), 'exclude', this).concat(['pid', 'rowId', 'geometry']);
        }
        /**
         * 根据数据的geoLiveType，转化为各个要素对应的数据模型
         * @param  {object} data 接口返回的数据
         * @param  {object} options 附加配置
         * @return {object} ret 各要素对应的数据模型
         */

    }], [{
        key: 'create',
        value: function create(data, options) {
            var ret = null;
            switch (data.geoLiveType) {
                case 'IXPOI':
                    ret = new FM.dataApi.IxPoi(data, options);
                    break;
                case 'RDNODE':
                    ret = new FM.dataApi.RdNode(data, options);
                    break;
                case 'RDLINK':
                    // 红绿灯 *
                    ret = new FM.dataApi.RdLink(data, options);
                    break;
                case 'RDRESTRICTION':
                    // 交限
                    ret = new FM.dataApi.RdRestriction(data, options);
                    break;
                case 'RDSPEEDLIMIT':
                    // 点限速
                    ret = new FM.dataApi.RdSpeedLimit(data, options);
                    break;
                case 'RDBRANCH':
                    // 分歧
                    ret = new FM.dataApi.RdBranch(data, options);
                    break;
                case 'RDHIGHSPEEDBRANCH':
                    // 高速分歧
                    ret = new FM.dataApi.RdBranch(data, options);
                    break;
                case 'RDASPECTBRANCH':
                    // 方面分歧
                    ret = new FM.dataApi.RdBranch(data, options);
                    break;
                case 'RDICBRANCH':
                    // IC分歧
                    ret = new FM.dataApi.RdBranch(data, options);
                    break;
                case 'RD3DBRANCH':
                    // 3d分歧
                    ret = new FM.dataApi.RdBranch(data, options);
                    break;
                case 'RDCOMPLEXSCHEMA':
                    // 复杂路口模式图
                    ret = new FM.dataApi.RdBranch(data, options);
                    break;
                case 'RDREALIMAGE':
                    // 实景图
                    ret = new FM.dataApi.RdBranch(data, options);
                    break;
                case 'RDSIGNASREAL':
                    // 实景看板
                    ret = new FM.dataApi.RdBranch(data, options);
                    break;
                case 'RDSERIESBRANCH':
                    // 连续分歧
                    ret = new FM.dataApi.RdBranch(data, options);
                    break;
                case 'RDSCHEMATICBRANCH':
                    // 交叉点大路口模式图
                    ret = new FM.dataApi.RdBranch(data, options);
                    break;
                case 'RDSIGNBOARD':
                    // 方向看板
                    ret = new FM.dataApi.RdBranch(data, options);
                    break;
                case 'RDCROSS':
                    // 路口
                    ret = new FM.dataApi.RdCross(data, options);
                    break;
                case 'RDLINKWARNING':
                    // 危险信息
                    ret = new FM.dataApi.RdLinkWarning(data, options);
                    break;
                case 'RDTRAFFICSIGNAL':
                    // 信号灯
                    ret = new FM.dataApi.RdTrafficSignal(data, options);
                    break;
                case 'RDELECTRONICEYE':
                    // 电子眼
                    ret = new FM.dataApi.RdElectronicEye(data, options);
                    break;
                case 'RDGATE':
                    // 大门
                    ret = new FM.dataApi.RdGate(data, options);
                    break;
                case 'RDSLOPE':
                    // 坡度
                    ret = new FM.dataApi.RdSlope(data, options);
                    break;
                case 'RDLANECONNEXITY':
                    // 车信
                    ret = new FM.dataApi.RdLaneConnexity(data, options);
                    break;
                case 'RDLINKINTRTIC':
                    // 互联网RTIC
                    ret = new FM.dataApi.RdLinkIntRtic(data, options);
                    break;
                case 'RDDIRECTROUTE':
                    // 顺行
                    ret = new FM.dataApi.RdDirectRoute(data, options);
                    break;
                case 'RDSPEEDBUMP':
                    // 减速带 *
                    ret = new FM.dataApi.RdSpeedBump(data, options);
                    break;
                case 'RDSE':
                    // 道路种别
                    ret = new FM.dataApi.RdSe(data, options);
                    break;
                case 'RDINTER':
                    // CRF交叉点 *
                    ret = new FM.dataApi.RdInter(data, options);
                    break;
                case 'RDROAD':
                    // CRF道路
                    ret = new FM.dataApi.RdRoad(data, options);
                    break;
                case 'RDOBJECT':
                    // CRF对象
                    ret = new FM.dataApi.RdObject(data, options);
                    break;
                case 'RDTOLLGATE':
                    // 收费站
                    ret = new FM.dataApi.RdTollgate(data, options);
                    break;
                case 'RDVARIABLESPEED':
                    // 可变限速
                    ret = new FM.dataApi.RdVariableSpeed(data, options);
                    break;
                case 'RDMILEAGEPILE':
                    // 里程桩 *
                    ret = new FM.dataApi.RdMileagePile(data, options);
                    break;
                case 'RDVOICEGUIDE':
                    // 语音引导 *
                    ret = new FM.dataApi.RdVoiceGuide(data, options);
                    break;
                case 'RDGSC':
                    // 立交
                    ret = new FM.dataApi.RdGsc(data, options);
                    break;
                case 'RWNODE':
                    // 铁路点
                    ret = new FM.dataApi.RwNode(data, options);
                    break;
                case 'RWLINK':
                    // 铁路线
                    ret = new FM.dataApi.RwLink(data, options);
                    break;
                case 'LCNODE':
                    // 土地覆盖点
                    ret = new FM.dataApi.LcNode(data, options);
                    break;
                case 'LCLINK':
                    // 土地覆盖线 *
                    ret = new FM.dataApi.LcLink(data, options);
                    break;
                case 'LCFACE':
                    // 土地覆盖面 *
                    ret = new FM.dataApi.LcFace(data, options);
                    break;
                case 'LUNODE':
                    // 土地利用点
                    ret = new FM.dataApi.LuNode(data, options);
                    break;
                case 'LULINK':
                    // 土地利用线
                    ret = new FM.dataApi.LuLink(data, options);
                    break;
                case 'LUFACE':
                    // 土地利用面
                    ret = new FM.dataApi.LuFace(data, options);
                    break;
                case 'CMGBUILDNODE':
                    // 市街图点
                    ret = new FM.dataApi.CmgBuildNode(data, options);
                    break;
                case 'CMGBUILDLINK':
                    // 市街图线
                    ret = new FM.dataApi.CmgBuildLink(data, options);
                    break;
                case 'CMGBUILDFACE':
                    // 市街图面
                    ret = new FM.dataApi.CmgBuildFace(data, options);
                    break;
                case 'CMGBUILDING':
                    // 市街图feature
                    ret = new FM.dataApi.CmgBuilding(data, options);
                    break;
                case 'ADADMIN':
                    // 行政区划代表点
                    ret = new FM.dataApi.AdAdmin(data, options);
                    break;
                case 'ADNODE':
                    // 行政区划组成点
                    ret = new FM.dataApi.AdNode(data, options);
                    break;
                case 'ADLINK':
                    // 行政区划组成线
                    ret = new FM.dataApi.AdLink(data, options);
                    break;
                case 'ADFACE':
                    // 行政区划面
                    ret = new FM.dataApi.AdFace(data, options);
                    break;
                case 'ZONENODE':
                    // Zone点 *
                    ret = new FM.dataApi.ZoneNode(data, options);
                    break;
                case 'ZONELINK':
                    // ZONE线
                    ret = new FM.dataApi.ZoneLink(data, options);
                    break;
                case 'ZONEFACE':
                    // ZONE面
                    ret = new FM.dataApi.ZoneFace(data, options);
                    break;
                case 'RDSAMENODE':
                    // 同一点
                    ret = new FM.dataApi.RdSameNode(data, options);
                    break;
                case 'RDSAMELINK':
                    // 同一线
                    ret = new FM.dataApi.RdSameLink(data, options);
                    break;
                case 'RDLINKSPEEDLIMIT':
                    // 线限速
                    ret = new FM.dataApi.RdLinkSpeedLimit(data, options);
                    break;
                case 'RDHGWGLIMIT':
                    // 限高限重
                    ret = new FM.dataApi.RdHgwgLimit(data, options);
                    break;
                case 'RDLANE':
                    // 详细车道 *
                    ret = new FM.dataApi.RdLanes(data, options);
                    break;
                case 'TMCPOINT':
                    // TMC点
                    ret = new FM.dataApi.TmcPoint(data, options);
                    break;
                case 'TMCLINE':
                    // TMCLine
                    ret = new FM.dataApi.TmcLine(data, options);
                    break;
                case 'RDTMCLOCATION':
                    // TMC匹配信息
                    ret = new FM.dataApi.RdTmcLocation(data, options);
                    break;
                case 'ROADNAME':
                    // 道路名
                    ret = new FM.dataApi.RoadName(data, options);
                    break;
                case 'SCROADNAMEHWINFO':
                    // 高速道路名
                    ret = new FM.dataApi.ScRoadNameHwInfo(data, options);
                    break;
                case 'SCMODELMATCHG':
                    // 模式图匹配表
                    ret = new FM.dataApi.ScModelMatchG(data, options);
                    break;
                case 'RDLANETOPODETAILARR':
                    // 车道连通
                    ret = new FM.dataApi.RdLaneTopoDetailArr(data, options);
                    break;
                case 'IXPOINTADDRESS':
                    // 点门牌
                    ret = new FM.dataApi.IxPointAddress(data, options);
                    break;
                default:
                    ret = new FM.dataApi.Feature(data, options);
                    break;
            }
            return ret;
        }
    }]);

    return Feature;
}(_GeoDataModel3.default);

exports.default = Feature;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GeoDataModel2 = __webpack_require__(59);

var _GeoDataModel3 = _interopRequireDefault(_GeoDataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Tips数据模型
 */
var Tip = function (_GeoDataModel) {
    _inherits(Tip, _GeoDataModel);

    function Tip() {
        _classCallCheck(this, Tip);

        return _possibleConstructorReturn(this, (Tip.__proto__ || Object.getPrototypeOf(Tip)).apply(this, arguments));
    }

    _createClass(Tip, [{
        key: 'initialize',

        /**
         * 设置对象属性方法，需要在子类中重写
         * @param  {object} data - 接口返回的json数据对象
         * @return {undefined}
         */
        value: function initialize(data) {
            if (data.rowkey) {
                this.pid = data.rowkey || null;
                this.rowkey = data.rowkey || null;
            } else {
                this.rowkey = null;
                this.pid = null;
            }
            if (data.source) {
                this.source = {
                    s_featureKind: data.source.s_featureKind || 2,
                    s_project: data.source.s_project || '',
                    s_sourceCode: data.source.s_sourceCode || 7,
                    s_sourceId: data.source.s_sourceId || '',
                    s_sourceType: data.source.s_sourceType || '',
                    s_sourceProvider: data.source.s_sourceProvider || 0,
                    s_reliability: data.source.s_reliability || 0,
                    s_qTaskId: data.source.s_qTaskId || 0,
                    s_mTaskId: data.source.s_mTaskId || 0,
                    s_qSubTaskId: data.source.s_qSubTaskId || 0,
                    s_mSubTaskId: data.source.s_mSubTaskId || 0
                };
            } else {
                this.source = {
                    s_featureKind: 2,
                    s_project: '',
                    s_sourceCode: 7,
                    s_sourceId: '',
                    s_sourceType: '',
                    s_sourceProvider: 0,
                    s_reliability: 0,
                    s_qTaskId: 0,
                    s_mTaskId: 0,
                    s_qSubTaskId: 0,
                    s_mSubTaskId: 0
                };
            }
            if (data.geometry) {
                this.geometry = {
                    g_location: data.geometry.g_location || {},
                    g_guide: data.geometry.g_guide || {}
                };
            } else {
                this.geometry = {
                    g_location: {},
                    g_guide: {}
                };
            }
            if (data.track) {
                this.track = {
                    t_lifecycle: data.track.t_lifecycle || (data.track.t_lifecycle === 0 ? 0 : 3),
                    t_command: data.track.t_command || 0,
                    t_date: data.track.t_date || '',
                    t_tipStatus: data.track.t_tipStatus || (data.track.t_tipStatus === 0 ? 0 : 1),
                    t_dEditStatus: data.track.t_dEditStatus || 0,
                    t_dEditMeth: data.track.t_dEditMeth || 0,
                    t_mEditStatus: data.track.t_mEditStatus || 0,
                    t_mEditMeth: data.track.t_mEditMeth || 0,
                    t_trackInfo: []
                };
                if (data.track.t_trackInfo && data.track.t_trackInfo.length > 0) {
                    this.track.t_trackInfo = this.deepCopy(data.track.t_trackInfo);
                }
            } else {
                this.track = {
                    t_lifecycle: 3,
                    t_command: 0,
                    t_date: '',
                    t_tipStatus: 1,
                    t_dEditStatus: 0,
                    t_dEditMeth: 0,
                    t_mEditStatus: 0,
                    t_mEditMeth: 0,
                    t_trackInfo: []
                };
            }
            if (data.feedback && data.feedback.f_array && data.feedback.f_array.length > 0) {
                this.feedback = data.feedback;
            } else {
                this.feedback = {
                    f_array: []
                };
            }
            if (data.content) {
                this.content = data.content || '';
            } else {
                this.content = '';
            }

            this.geoLiveType = 'TIP';
        }

        /**
         * 深拷贝
         * @param  {object} o 拷贝对象，可以为对象，数组
         * @return {object} 拷贝返回的对象
         */

    }, {
        key: 'deepCopy',
        value: function deepCopy(o) {
            if (o instanceof Array) {
                var n = [];
                for (var i = 0; i < o.length; ++i) {
                    n[i] = this.deepCopy(o[i]);
                }
                return n;
            } else if (o instanceof Object) {
                var b = {};
                for (var j in o) {
                    if ({}.hasOwnProperty.call(o, j)) {
                        b[j] = this.deepCopy(o[j]);
                    }
                }
                return b;
            }
            return o;
        }

        /**
         * 设置任务信息
         * @param  {Object}    taskInfo 任务信息
         * @return {undefined}
         */

    }, {
        key: 'setTaskInfo',
        value: function setTaskInfo(taskInfo) {
            // if (App.Temp.programType == '1') {
            //     this.source.s_mTaskId = App.Temp.taskId;
            //     this.source.s_mSubTaskId = App.Temp.subTaskId;
            //     this.source.s_qTaskId = 0;
            //     this.source.s_qSubTaskId = 0;
            // }
            // if (App.Temp.programType == '4') {
            //     this.source.s_qTaskId = App.Temp.taskId;
            //     this.source.s_qSubTaskId = App.Temp.subTaskId;
            //     this.source.s_mTaskId = 0;
            //     this.source.s_mSubTaskId = 0;
            // }
            this.source.s_mTaskId = taskInfo.mTaskId;
            this.source.s_mSubTaskId = taskInfo.mSubTaskId;
            this.source.s_qTaskId = taskInfo.qTaskId;
            this.source.s_qSubTaskId = taskInfo.qSubTaskId;
        }

        /**
         * 根据数据的geoLiveType，转化为各个Tip对应的数据模型
         * @param  {object} item 接口返回的数据
         * @param  {object} options 附加配置
         * @return {object} ret 各要素对应的数据模型
         */

    }], [{
        key: 'create',
        value: function create(item, options) {
            var ret = null;
            switch (item.source.s_sourceType) {
                case '1107':
                    // 收费站
                    ret = new FM.dataApi.TipTollGate(item);
                    break;
                case '1201':
                    // 道路种别
                    ret = new FM.dataApi.TipRoadType(item);
                    break;
                case '1202':
                    // 车道数
                    ret = new FM.dataApi.TipDrivewayMount(item);
                    break;
                case '1101':
                    // 点限速
                    ret = new FM.dataApi.TipRestriction(item);
                    break;
                case '1102':
                    // 红绿灯
                    ret = new FM.dataApi.TipTrafficSignal(item);
                    break;
                case '1205':
                    // SA(服务区)
                    ret = new FM.dataApi.TipRoadSA(item);
                    break;
                case '1206':
                    // PA（停车区）
                    ret = new FM.dataApi.TipRoadPA(item);
                    break;
                case '1207':
                    // 匝道
                    ret = new FM.dataApi.TipRamp(item);
                    break;
                case '1203':
                    // 道路方向
                    ret = new FM.dataApi.TipRoadDirection(item);
                    break;
                case '1702':
                    // 铁路道口
                    ret = new FM.dataApi.TipRailwayCrossing(item);
                    break;
                case '1501':
                    // 上下线分离
                    ret = new FM.dataApi.TipMultiDigitized(item);
                    break;
                case '1507':
                    // 步行街
                    ret = new FM.dataApi.TipPedestrianStreet(item);
                    break;
                case '1508':
                    // 公交专用车道
                    ret = new FM.dataApi.TipBusLane(item);
                    break;
                case '1510':
                    // 桥
                    ret = new FM.dataApi.TipBridge(item);
                    break;
                case '1511':
                    // 隧道
                    ret = new FM.dataApi.TipTunnel(item);
                    break;
                case '1514':
                    // 施工
                    ret = new FM.dataApi.TipMaintenance(item);
                    break;
                case '1901':
                    // 道路名
                    ret = new FM.dataApi.TipRoadName(item);
                    break;
                case '2001':
                    // 测线
                    ret = new FM.dataApi.TipLinks(item);
                    break;
                case '2101':
                    // 删除标记
                    ret = new FM.dataApi.TipDeleteTag(item);
                    break;
                case '1601':
                    // 环岛
                    ret = new FM.dataApi.TipRoundabout(item);
                    break;
                case '1803':
                    // 挂接
                    ret = new FM.dataApi.TipConnect(item);
                    break;
                case '1301':
                    // 车信
                    ret = new FM.dataApi.TipLaneConnexity(item);
                    break;
                case '8001':
                    // FC
                    ret = new FM.dataApi.PreTipFC(item);
                    break;
                case '8002':
                    // 接边
                    ret = new FM.dataApi.TipBorder(item);
                    break;
                case '1604':
                    // 区域内道路
                    ret = new FM.dataApi.TipRegionRoad(item);
                    break;
                case '1208':
                    // 停车场出入口Link
                    ret = new FM.dataApi.TipParkinglot(item);
                    break;
                case '1209':
                    // 航线
                    ret = new FM.dataApi.TipRoute(item);
                    break;
                case '1304':
                    // 禁止穿行 *
                    ret = new FM.dataApi.TipNoCrossing(item);
                    break;
                case '1305':
                    // 禁止驶入 *
                    ret = new FM.dataApi.TipNoEntry(item);
                    break;
                case '1701':
                    // 障碍物
                    ret = new FM.dataApi.TipObstacle(item);
                    break;
                case '1703':
                    // 分叉路口提示
                    ret = new FM.dataApi.TipRoadCrossProm(item);
                    break;
                case '1704':
                    // 交叉路口
                    ret = new FM.dataApi.TipRoadCross(item);
                    break;
                case '1705':
                    // 立交桥名称
                    ret = new FM.dataApi.TipOverpassName(item);
                    break;
                case '1706':
                    // GPS打点
                    ret = new FM.dataApi.TipGPSDot(item);
                    break;
                case '1502':
                    // 路面覆盖 *
                    ret = new FM.dataApi.TipPavementCover(item);
                    break;
                case '1503':
                    // 高架路
                    ret = new FM.dataApi.TipElevatedRoad(item);
                    break;
                case '1504':
                    // overpass
                    ret = new FM.dataApi.TipOverpass(item);
                    break;
                case '1505':
                    // underpass
                    ret = new FM.dataApi.TipUnderpass(item);
                    break;
                case '1506':
                    // 私道
                    ret = new FM.dataApi.TipBypath(item);
                    break;
                case '1509':
                    // 跨线立交桥
                    ret = new FM.dataApi.TipCrossLineOverpass(item);
                    break;
                case '1512':
                    // 辅路
                    ret = new FM.dataApi.TipSideRoad(item);
                    break;
                case '1513':
                    // 窄道
                    ret = new FM.dataApi.TipNarrowChannel(item);
                    break;
                case '1515':
                    // 维修
                    ret = new FM.dataApi.TipRepair(item);
                    break;
                case '1516':
                    // 季节性关闭道路
                    ret = new FM.dataApi.TipSeasonalRoad(item);
                    break;
                case '1517':
                    // usage fee
                    ret = new FM.dataApi.TipUsageFeeRequired(item);
                    break;
                case '1103':
                    // 红绿灯方位 *
                    ret = new FM.dataApi.TipTrafficSignalDir(item);
                    break;
                case '1104':
                    // 大门 *
                    ret = new FM.dataApi.TipGate(item);
                    break;
                case '1105':
                    // 危险信息
                    ret = new FM.dataApi.TipWarningInfo(item);
                    break;
                case '1106':
                    // 坡度 *
                    ret = new FM.dataApi.TipSlope(item);
                    break;
                case '1109':
                    // 电子眼
                    ret = new FM.dataApi.TipElectroniceye(item);
                    break;
                case '1111':
                    // 条件限速 *
                    ret = new FM.dataApi.TipSpeedlimit(item);
                    break;
                case '1403':
                    // 3d分歧
                    ret = new FM.dataApi.Tip3DBranch(item);
                    break;
                case '1404':
                    // 提左提右 *
                    ret = new FM.dataApi.TipLeftToRight(item);
                    break;
                case '1405':
                    // 一般道路方面
                    ret = new FM.dataApi.TipNormalRoadSide(item);
                    break;
                case '1407':
                    // 高速分歧
                    ret = new FM.dataApi.TipGSBranch(item);
                    break;
                case '1410':
                    // 高速入口模式图
                    ret = new FM.dataApi.TipHighSpeedEntrance(item);
                    break;
                case '1602':
                    // 特殊交通类型
                    ret = new FM.dataApi.TipSpecialTrafficType(item);
                    break;
                case '1605':
                    // POI连接路
                    ret = new FM.dataApi.TipPOIRoad(item);
                    break;
                case '1606':
                    // 收费开放道路
                    ret = new FM.dataApi.TipChargeOpenRoad(item);
                    break;
                case '1607':
                    // 风景路线
                    ret = new FM.dataApi.TipScenicRoute(item);
                    break;
                case '1804':
                    // 顺行
                    ret = new FM.dataApi.TipDirect(item);
                    break;
                case '1302':
                    // 普通交限
                    ret = new FM.dataApi.TipNomalRestriction(item);
                    break;
                case '1806':
                    // 草图
                    ret = new FM.dataApi.TipSketch(item);
                    break;
                //  315不上线
                case '1108':
                    // 减速带
                    ret = new FM.dataApi.TipSpeedBump(item);
                    break;
                case '1110':
                    // 卡车限制
                    ret = new FM.dataApi.TipTruckLimit(item);
                    break;
                case '1112':
                    // 可变限速
                    ret = new FM.dataApi.TipVariableSpeed(item);
                    break;
                case '1113':
                    // 车道限速
                    ret = new FM.dataApi.TipDrivewayLimit(item);
                    break;
                case '1114':
                    // 卡车限速
                    ret = new FM.dataApi.TipTruckSpeedLimit(item);
                    break;
                case '1115':
                    // 车道变化点
                    ret = new FM.dataApi.TipLaneChangePoint(item);
                    break;
                case '1204':
                    // 可逆车道
                    ret = new FM.dataApi.TipReversibleLane(item);
                    break;
                case '1303':
                    // 卡车交限
                    ret = new FM.dataApi.TipTruckRestriction(item);
                    break;
                case '1306':
                    // 路口语音引导
                    ret = new FM.dataApi.TipCrossVoiceGuide(item);
                    break;
                case '1307':
                    // 自然语音引导
                    ret = new FM.dataApi.TipNatureVoiceGuide(item);
                    break;
                case '1308':
                    // 禁止卡车驶入
                    ret = new FM.dataApi.TipBanTrucksIn(item);
                    break;
                case '1310':
                    // 公交车道
                    ret = new FM.dataApi.TipBusDriveway(item);
                    break;
                case '1311':
                    // 可变导向车道
                    ret = new FM.dataApi.TipVariableDirectionLane(item);
                    break;
                case '1401':
                    // 方向看板
                    ret = new FM.dataApi.TipOrientation(item);
                    break;
                case '1402':
                    // Real sign
                    ret = new FM.dataApi.TipRealSign(item);
                    break;
                case '1406':
                    // 实景图
                    ret = new FM.dataApi.TipJVCBranch(item);
                    break;
                case '1409':
                    // 普通路口模式图
                    ret = new FM.dataApi.TipNormalCross(item);
                    break;
                case '1707':
                    // 里程桩
                    ret = new FM.dataApi.TipMileagePeg(item);
                    break;
                //  新增
                case '2002':
                    // ADAS测线
                    ret = new FM.dataApi.TipADASLink(item);
                    break;
                case '1708':
                    // ADAS打点
                    ret = new FM.dataApi.TipADASNode(item);
                    break;
                case '1709':
                    // 点位移
                    ret = new FM.dataApi.TipNodeShift(item);
                    break;
                case '1518':
                    // 阶梯
                    ret = new FM.dataApi.TipStair(item);
                    break;
                case '2201':
                    // 地下通道/过街天桥
                    ret = new FM.dataApi.TipOverBridge(item);
                    break;
                case '2102':
                    // 万能标记
                    ret = new FM.dataApi.TipGeneral(item);
                    break;
                case '1116':
                    // 立交
                    ret = new FM.dataApi.TipGSC(item);
                    break;
                case '1211':
                    // 高速连接路
                    ret = new FM.dataApi.TipHighWayConnect(item);
                    break;
                case '1117':
                    // 车道限宽限高
                    ret = new FM.dataApi.TipLaneLimitWidthHeight(item);
                    break;
                case '1214':
                    // 删除在建属性
                    ret = new FM.dataApi.TipDeletePropertyInProgress(item);
                    break;
                case '1520':
                    // 在建时间变更
                    ret = new FM.dataApi.TipBuildTimeChange(item);
                    break;
                //  未制作
                case '8005':
                    // 机场功能面
                    ret = new FM.dataApi.TipAirPortFace(item);
                    break;
                case '8006':
                    // Highway道路名
                    ret = new FM.dataApi.TipHighway(item);
                    break;
                case '8007':
                    // AOI面
                    ret = new FM.dataApi.TipAOIFace(item);
                    break;
                case '8008':
                    // AOI代表点
                    ret = new FM.dataApi.TipAOINode(item);
                    break;
                case '8009':
                    // 地铁
                    ret = new FM.dataApi.TipRailWay(item);
                    break;
                case '8010':
                    // BUA
                    ret = new FM.dataApi.TipBUAFace(item);
                    break;
                default:
                    ret = new FM.dataApi.Tip(item);
                    break;
            }
            return ret;
        }
    }]);

    return Tip;
}(_GeoDataModel3.default);

exports.default = Tip;

/***/ }),
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// import { FM } from '../../fastmap/fastmap'; // 单文件打包时，要在基类里import FM；多文件打包时，应去掉此import

/**
 * 数据模型基类，继承后可重写相关的方法，一般要求重写dataModelType属性，setAttributes、getSnapShot方法
 */
var DataModel = function () {
    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function DataModel() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, DataModel);

        // 在webpack压缩模式下报错，先注释
        // if (new.target === DataModel) {
        //     throw new Error(DataModel.name + '是数据模型基类，不能实例化');
        // }
        /**
         * 唯一标识
         * @type {Object}
         */
        this._uuid = FM.Util.uuid();
        /**
         * 数据模型类型
         * @type {String}
         */
        this.dataModelType = 'DATA_MODEL';
        /**
         * 删除状态，用于对象的的逻辑删除
         * @type {Boolean}
         */
        this._deleted = false;
        /**
         * 错误信息，用于对象属性错误的验证
         * @type {Object}
         */
        this._errors = {
            edit: {}, // 编辑过程中的错误信息
            form: {} // 表单验证中的错误信息
        };
        /**
         * 原始的接口返回的数据
         * @type {Object}
         */
        this._originData = data;
        /**
         * 原始数据模型，调用this.origin后生成
         * @type {Object}
         */
        this._origin = null;

        FM.setOptions(this, options);

        this.initialize(data);

        this.setAttributes(data);
    }
    /**
     * 设置对象属性方法，需要在子类中重写
     * @param  {object} data - 接口返回的json数据对象
     * @return {undefined}
     */


    _createClass(DataModel, [{
        key: 'initialize',
        value: function initialize(data) {}
        /**
         * 设置对象属性方法，需要在子类中重写
         * @param  {object} data - 接口返回的json数据对象
         * @return {undefined}
         */

    }, {
        key: 'setAttributes',
        value: function setAttributes(data) {
            FM.extend(this, data);
            this.pid = data.pid || 0;
        }
        /**
         * 获取对象属性方法，需要重写
         * @return {undefined}
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            return null;
        }
        /**
         * 获取对象概要属性信息，需要重写
         * @return {undefined}
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            return null;
        }
        /**
         * 原始数据的get方法
         * @return {Object}   原始数据
         */

    }, {
        key: 'resetOrigin',

        /**
         * 重置原始数据模型为当前值
         * @return {undefined}
         */
        value: function resetOrigin() {
            this._originData = this.getIntegrate();
            this._origin = this.clone();
        }
        /**
         * 比较方法，用于筛选出变更字段
         * @param  {object} newJson - 数据修改后的数据对象
         * @param  {object} oldJson - 数据修改前的数据对象
         * @return {object} 数据修改后改变的参数
         */

    }, {
        key: '_compareJson',
        value: function _compareJson(newJson, oldJson) {
            var changed = {};
            var newVal = void 0,
                oldVal = void 0,
                tempObj = void 0,
                tempArray = void 0;
            var k = void 0,
                i = void 0,
                j = void 0,
                delFlag = void 0;
            if (newJson && !oldJson) {
                // 新增
                for (k in newJson) {
                    if (newJson.hasOwnProperty(k) && k !== 'geometry') {
                        newVal = newJson[k];
                        if ((typeof newVal === 'undefined' ? 'undefined' : _typeof(newVal)) === 'object') {
                            if (FM.Util.isObject(newVal)) {
                                tempObj = this._compareJson(newVal, null);
                                if (tempObj) {
                                    changed[k] = tempObj;
                                }
                            } else if (FM.Util.isArray(newVal)) {
                                tempArray = [];
                                for (i = 0; i < newVal.length; i++) {
                                    tempObj = this._compareJson(newVal[i], null);
                                    if (tempObj) {
                                        tempArray.push(tempObj);
                                    }
                                }
                                if (tempArray.length > 0) {
                                    changed[k] = tempArray;
                                }
                            }
                        } else {
                            changed[k] = newVal;
                        }
                    }
                }
                changed.objStatus = 'INSERT';
            } else if (!newJson && oldJson) {
                // 删除
                for (k in oldJson) {
                    if (oldJson.hasOwnProperty(k) && k !== 'geometry') {
                        oldVal = oldJson[k];
                        if ((typeof oldVal === 'undefined' ? 'undefined' : _typeof(oldVal)) === 'object') {
                            if (FM.Util.isObject(oldVal)) {
                                tempObj = this._compareJson(null, oldVal);
                                if (tempObj) {
                                    changed[k] = tempObj;
                                }
                            } else if (FM.Util.isArray(oldVal)) {
                                tempArray = [];
                                for (i = 0; i < oldVal.length; i++) {
                                    tempObj = this._compareJson(null, oldVal[i]);
                                    if (tempObj) {
                                        tempArray.push(tempObj);
                                    }
                                }
                                if (tempArray.length > 0) {
                                    changed[k] = tempArray;
                                }
                            }
                        } else if (k === 'rowId' || k === 'pid' || k === 'linkPid' || k === 'nodePid' || k === 'formOfWay') {
                            changed[k] = oldJson[k];
                        }
                    }
                }
                changed.objStatus = 'DELETE';
            } else {
                // 修改
                for (k in newJson) {
                    // 不比较几何坐标
                    if (newJson.hasOwnProperty(k) && k !== 'geometry') {
                        newVal = newJson[k];
                        oldVal = oldJson[k];
                        if ((typeof newVal === 'undefined' ? 'undefined' : _typeof(newVal)) === 'object') {
                            if (FM.Util.isObject(newVal) && FM.Util.isObject(oldVal)) {
                                tempObj = this._compareJson(newVal, oldVal);
                                if (tempObj) {
                                    changed[k] = tempObj;
                                }
                            } else if (FM.Util.isArray(newVal) && FM.Util.isArray(oldVal)) {
                                tempArray = [];
                                for (i = 0; i < newVal.length; i++) {
                                    tempObj = null;
                                    if (newVal[i].hasOwnProperty('rowId') && newVal[i].rowId) {
                                        // 修改
                                        for (j = 0; j < oldVal.length; j++) {
                                            if (newVal[i].rowId === oldVal[j].rowId) {
                                                tempObj = this._compareJson(newVal[i], oldVal[j]);
                                                // 增加返回optins属性，主要为了批量编辑
                                                if (newVal[i].options && newVal[i].options.correspondingArr && tempObj) {
                                                    tempObj.options = newVal[i].options;
                                                }
                                                break;
                                            }
                                        }
                                    } else {
                                        // 新增
                                        tempObj = this._compareJson(newVal[i], null);
                                    }
                                    if (tempObj) {
                                        tempArray.push(tempObj);
                                    }
                                }
                                for (i = 0; i < oldVal.length; i++) {
                                    // 删除
                                    delFlag = true;
                                    for (j = 0; j < newVal.length; j++) {
                                        if (newVal[j].rowId === oldVal[i].rowId) {
                                            delFlag = false;
                                            break;
                                        }
                                    }
                                    if (delFlag) {
                                        tempObj = this._compareJson(null, oldVal[i]);
                                        if (tempObj) {
                                            tempArray.push(tempObj);
                                        }
                                    }
                                }
                                if (tempArray.length > 0) {
                                    changed[k] = tempArray;
                                }
                            }
                        } else if (newVal !== oldVal) {
                            changed[k] = newVal;
                        }
                    }
                }
                if (!FM.Util.isEmptyObject(changed)) {
                    if (newJson.hasOwnProperty('rowId')) {
                        changed.rowId = newJson.rowId;
                    }
                    if (newJson.hasOwnProperty('pid') && !changed.hasOwnProperty('pid')) {
                        changed.pid = newJson.pid;
                    }
                    if (newJson.hasOwnProperty('linkPid') && !changed.hasOwnProperty('linkPid')) {
                        changed.linkPid = newJson.linkPid;
                    }
                    changed.objStatus = 'UPDATE';
                }
            }
            if (FM.Util.isEmptyObject(changed)) {
                // 如果没有任何变化，则返回null
                return null;
            }
            return changed;
        }
        /**
         * 比较方法，用于批量筛选出变更字段
         * @param  {object} options - 数据修改后的数据对象
         * @param  {object} options.compareObj - 比较数据
         * @param  {Object[]} options.rules - 对比原则
         * @return {object} 对象对比结果
         */

    }, {
        key: 'compareCommon',
        value: function compareCommon(options) {
            var compareObj = options.compareObj || {};
            var rules = this.exclude.concat(options.rules || []);
            for (var key in this) {
                if (this.hasOwnProperty(key) && compareObj.hasOwnProperty(key) && rules.indexOf(key) == -1) {
                    if (this[key] != compareObj[key]) {
                        this[key] = -1;
                    }
                }
            }
            return this;
        }
        /**
         * 比较对象不同属性，并返回不同属性值
         * @param  {object} options - 数据修改后的数据对象
         * @param  {object} options.compareObj - 要比较对象
         * @param  {object} options.key - 当前循环对象中的key
         * @param  {Object[]} options.rules - 对比原则
         * @return {object} 对象对比结果
         */

    }, {
        key: 'compareDiff',
        value: function compareDiff(options) {
            var compareObj = options.compareObj || {};
            var rules = this.exclude.concat(options.rules || []);
            var item = options.key || null; // 当前循环的link对象中的key
            var boolDirect = options.sameDirect;
            var result = {};
            for (var key in this) {
                if (this.hasOwnProperty(key) && compareObj.hasOwnProperty(key) && rules.indexOf(key) == -1) {
                    if (boolDirect) {
                        if (this[key] != compareObj[key]) {
                            result[key] = '-';
                        }
                    } else {
                        switch (item) {
                            case 'speedlimits':
                                if (key == 'fromSpeedLimit') {
                                    if (this[key] != compareObj.toSpeedLimit) {
                                        result[key] = '-';
                                    }
                                } else if (key == 'toSpeedLimit') {
                                    if (this[key] != compareObj.fromSpeedLimit) {
                                        result[key] = '-';
                                    }
                                } else if (key == 'fromLimitSrc') {
                                    if (this[key] != compareObj.toLimitSrc) {
                                        result[key] = '-';
                                    }
                                } else if (key == 'toLimitSrc') {
                                    if (this[key] != compareObj.fromLimitSrc) {
                                        result[key] = '-';
                                    }
                                } else if (this[key] != compareObj[key]) {
                                    result[key] = '-';
                                }
                                break;
                            case 'limit':
                            case 'limitTrucks':
                                if (key == 'limitDir') {
                                    if (this[key] == 2 && compareObj[key] != 3) {
                                        this[key] = '-';
                                    } else if (this[key] == 3 && compareObj[key] != 2) {
                                        this[key] = '-';
                                    }
                                } else if (this[key] != compareObj[key]) {
                                    result[key] = '-';
                                }
                                break;
                            case 'intRtics':
                            case 'rtics':
                                if (key == 'rticDir') {
                                    if (this[key] == 1 && compareObj[key] != 2) {
                                        this[key] = '-';
                                    } else if (this[key] == 2 && compareObj[key] != 1) {
                                        this[key] = '-';
                                    }
                                } else if (this[key] != compareObj[key]) {
                                    result[key] = '-';
                                }
                                break;
                            case 'sidewalks':
                            case 'walkstairs':
                                if (key == 'workDir') {
                                    if (this[key] == 1 && compareObj[key] != 2) {
                                        this[key] = '-';
                                    } else if (this[key] == 2 && compareObj[key] != 1) {
                                        this[key] = '-';
                                    }
                                } else if (this[key] != compareObj[key]) {
                                    result[key] = '-';
                                }
                                break;
                            default:
                                if (this[key] != compareObj[key]) {
                                    result[key] = '-';
                                }
                        }
                    }
                }
            }
            return result;
        }
        /**
         * 比较点对象不同属性，并返回不同属性值
         * @param  {object} options - 数据修改后的数据对象
         * @param  {object} options.compareObj - 要比较对象
         * @param  {object} options.key - 当前循环对象中的key
         * @param  {Object[]} options.rules - 对比原则
         * @return {object} 对象对比结果
         */

    }, {
        key: 'compareNodeDiff',
        value: function compareNodeDiff(options) {
            var compareObj = options.compareObj || {};
            var rules = options.rules || [];
            var item = options.key || null; // 当前循环的node对象中的key
            var result = {};
            for (var key in this) {
                if (!FM.Util.isContains(rules, key)) {
                    if (this.hasOwnProperty(key) && compareObj.hasOwnProperty(key)) {
                        if (this[key] != compareObj[key]) {
                            result[key] = '-';
                        }
                    }
                }
            }
            return result;
        }
        /**
         * 获取对象的属性变化
         * @return {object} 变化的属性对象
         */

    }, {
        key: 'getChanges',
        value: function getChanges() {
            return this._compareJson(this.getIntegrate(), this.origin.getIntegrate());
        }
        /**
         * 对象复制方法
         * @return {object} 克隆后一个全新的对象
         */

    }, {
        key: 'clone',
        value: function clone() {
            return new this.constructor(this.getIntegrate(), this.options);
        }
        /**
         * 逻辑删除对象
         * @return {undefined}
         */

    }, {
        key: 'delete',
        value: function _delete() {
            this._deleted = true;
        }
        /**
         * 逻辑非删除对象
         * @return {undefined}
         */

    }, {
        key: 'undelete',
        value: function undelete() {
            this._deleted = false;
        }
        /**
         * 删除状态
         * @return {Boolean} 删除状态
         */

    }, {
        key: 'deleted',
        value: function deleted() {
            return this._deleted;
        }
        /**
         * 增加错误信息 （只能用于子类）addError 和 removeError 是一对，用于编辑过程中的
         * @param  {string} key - 属性名
         * @param  {string} errorMessage - 错误信息
         * @param  {string} errorLevel - 错误等级
         * @return {undefined}
         */

    }, {
        key: 'addError',
        value: function addError(key, errorMessage, errorLevel) {
            this._errors.edit[key] = {
                code: errorLevel || 1, // 1：严重错误；2：提示信息；3：确认信息
                message: errorMessage
            };
        }
        /**
         * 移除错误信息 （只能用于子类）
         * @param  {string} key - 属性名
         * @return {undefined}
         */

    }, {
        key: 'removeError',
        value: function removeError(key) {
            delete this._errors.edit[key];
        }
        /**
         * 内部方法：属性验证方法入口
         * 注意：此方法需要在子模型里重写
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {}
        // this._pushError('错误键值', '错误描述');

        /**
         * 增加错误信息 （只能用于子类）
         * a_pushError 和 _clearErrors是一对
         * 内部方法，只用于doValidate方法中
         * @param  {string} key - 属性名
         * @param  {string} errorMessage - 错误信息
         * @param  {string} errorLevel - 错误等级
         * @return {undefined}
         */

    }, {
        key: '_pushError',
        value: function _pushError(key, errorMessage, errorLevel) {
            this._errors.form[key] = {
                code: errorLevel || 1, // 1：严重错误；2：提示信息；3：确认信息
                message: errorMessage
            };
        }
        /**
         * 清除错误信息
         * @return {undefined}
         */

    }, {
        key: '_clearErrors',
        value: function _clearErrors() {
            this._errors.form = {};
        }
        /**
         * 获取错误消息
         * @return {object} 错误信息
         */

    }, {
        key: 'getErrors',
        value: function getErrors() {
            return this._errors;
        }
        /**
         * 验证
         * @return {boolean} 是否通过验证
         */

    }, {
        key: 'validate',
        value: function validate() {
            this._clearErrors();
            this._doValidate();
            return FM.Util.isEmptyObject(this._errors.edit) && FM.Util.isEmptyObject(this._errors.form);
        }
        /**
         *********************************************************************
         * 以下是用于批量编辑的相关方法
         *********************************************************************
         */
        /**
         * 静态方法
         * 判断一个数组的元素是否都是数据模型对象
         * @param  {array}         arr 对象数组
         * @return {Boolean}           都是模型对象为true，否则false
         */

    }, {
        key: 'match',


        /**
         * 批量编辑方法：判断两个数据模型对象是否匹配，匹配的才可以合并
         * @param   {object}   desDataModel     比较的源对象
         * @param   {object}   options          比较的选项，一般传入比较时应排除的属性列表(rules)
         * @return  {boolean}                   比较结果，有差异返回true，否则返回false
         */
        value: function match() {
            var desDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var rules = this.exclude.concat(options.rules || []);
            var f = true;
            for (var key in this) {
                if (this.hasOwnProperty(key) && desDataModel.hasOwnProperty(key) && rules.indexOf(key) === -1) {
                    if (this[key] != desDataModel[key]) {
                        f = false;
                        break;
                    }
                }
            }
            return f;
        }
        /**
         * 批量编辑方法：合并两个数据模型对象，用于批量编辑时将多个数据模型合并成一个虚拟数据模型对象
         * 该方法会改变调用对象
         * @param  {object} desDataModel - 要合并数据模型对象
         * @param  {object} options      - 合并操作的其他选项
         * @return {undefined}
         */

    }, {
        key: 'merge',
        value: function merge() {
            var desDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var rules = this.exclude.concat(options.rules || []);
            var src = this;
            for (var key in src) {
                if (src.hasOwnProperty(key) && desDataModel.hasOwnProperty(key) && rules.indexOf(key) === -1) {
                    var sp = src[key];
                    var dp = desDataModel[key];
                    if (FM.Util.isObject(sp)) {
                        // 对象
                        if (sp instanceof DataModel && dp instanceof DataModel) {
                            // 模型对象，调用模型对象的merge方法
                            sp.merge(dp, options);
                        } else if (!FM.Util.isEqual(sp, dp)) {
                            // 普通对象，比较属性值是否相同
                            src[key] = -1;
                        }
                    } else if (FM.Util.isArray(sp)) {
                        // 数组
                        if (DataModel.isDataModelArray(sp) || DataModel.isDataModelArray(dp)) {
                            // 模型对象，继续向下合并
                            for (var i = 0; i < sp.length; i++) {
                                // 数据模型对象数组的合并，是盲目的多对多匹配
                                // 这里As与Bs进行遍历匹配，一般认为一定的条件下Ai与Bj能匹配上，与其他都匹配不上
                                // 匹配逻辑在数据模型的match方法中实现
                                var f = false;
                                for (var j = 0; j < dp.length; j++) {
                                    if (sp[i].match(dp[j], options)) {
                                        // 匹配成功
                                        sp[i].merge(dp[j], options);
                                        // 记录匹配关系
                                        // 注意是反向记录，在被匹配对象中记录匹配上的源对象的uuid
                                        // 在批量编辑结束时，更新批量数据时使用
                                        dp[j].options.matchId = sp[i]._uuid;
                                        f = true;
                                        break;
                                    }
                                }
                                if (!f) {
                                    // 无匹配
                                    sp.splice(i--, 1);
                                }
                            }
                        } else {
                            // 普通对象，提前公共数据
                            src[key] = FM.Util.intersection(sp, dp);
                        }
                    } else {
                        if (sp != dp) {
                            src[key] = -1;
                        }
                    }
                }
            }
        }
        /**
         * 批量编辑方法：从原始数据模型中清理掉与虚拟数据模型对象没有匹配上的匹配关系
         * 该方法在执行完全部数据的merge之后调用
         * @param  {Object}   vDataModel   合并后的虚拟数据模型对象
         * @param  {Object}   options      其他选项
         * @return {undefined}
         */

    }, {
        key: 'clean',
        value: function clean() {
            var vDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var rules = this.exclude.concat(options.rules || []);
            for (var key in this) {
                if (this.hasOwnProperty(key) && vDataModel.hasOwnProperty(key) && rules.indexOf(key) === -1) {
                    var sp = this[key];
                    var dp = vDataModel[key];
                    if (FM.Util.isArray(sp)) {
                        // 数组
                        if (DataModel.isDataModelArray(sp) || DataModel.isDataModelArray(dp)) {
                            // // 模型对象
                            for (var i = 0; i < sp.length; i++) {
                                if (sp[i].options.matchId) {
                                    var ddp = void 0;
                                    for (var j = 0; j < dp.length; j++) {
                                        if (sp[i].options.matchId == dp[j]._uuid) {
                                            ddp = dp[j];
                                            break;
                                        }
                                    }
                                    if (ddp) {
                                        // 有匹配，则继续向下clean
                                        sp[i].clean(ddp, options);
                                    } else {
                                        // 无匹配
                                        delete sp[i].options.matchId;
                                    }
                                }
                            }
                        } else {
                            FM.Util.difference(sp, dp);
                        }
                    }
                }
            }
        }
        /**
         * 批量编辑方法：使用编辑后的虚拟数据模型对象更新原始数据模型对象
         * 该方法在批量编辑完成时调用
         * @param  {Object}   vDataModel   合并后的虚拟数据模型对象
         * @param  {Object}   options      其他选项
         * @return {undefined}
         */

    }, {
        key: 'update',
        value: function update() {
            var vDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var rules = this.exclude.concat(options.rules || []);
            var src = this;
            for (var key in src) {
                if (src.hasOwnProperty(key) && vDataModel.hasOwnProperty(key) && rules.indexOf(key) === -1) {
                    var sp = src[key];
                    var dp = vDataModel[key];
                    if (FM.Util.isObject(sp)) {
                        // 对象
                        if (sp instanceof DataModel && dp instanceof DataModel) {
                            // 模型对象，调用模型对象的merge方法
                            sp.update(dp, options);
                        } else {
                            // 普通对象，更新属性值
                            FM.Util.merge(sp, dp);
                        }
                    } else if (FM.Util.isArray(sp)) {
                        // 数组
                        if (DataModel.isDataModelArray(sp) || DataModel.isDataModelArray(dp)) {
                            // 模型对象，递归更新
                            for (var i = 0; i < sp.length; i++) {
                                var ddp = void 0;
                                for (var j = 0; j < dp.length; j++) {
                                    if (!dp[j].deleted() && (sp[i].options.matchId && sp[i].options.matchId == dp[j]._uuid || sp[i].match(dp[j], options))) {
                                        ddp = dp[j];
                                        break;
                                    }
                                }
                                if (ddp) {
                                    // 有匹配， 递归更新
                                    sp[i].update(ddp, options);
                                } else {
                                    // 无匹配，表示被删除
                                    sp.splice(i--, 1);
                                }
                            }

                            // 处理新增
                            for (var _i = 0; _i < dp.length; _i++) {
                                if (!dp[_i].deleted()) {
                                    var _ddp = dp[_i];
                                    for (var _j = 0; _j < sp.length; _j++) {
                                        if (sp[_j].options.matchId) {
                                            if (sp[_j].options.matchId == _ddp._uuid) {
                                                // id匹配
                                                _ddp = null;
                                                break;
                                            }
                                        } else if (sp[_j].match(_ddp, options)) {
                                            // 内容匹配
                                            sp[_j].update(_ddp, options);
                                            _ddp = null;
                                            break;
                                        }
                                    }
                                    if (_ddp) {
                                        // 新增子对象
                                        var child = src.createChild(_ddp.geoLiveType || _ddp.dataModelType, _ddp.getIntegrate());
                                        if (child) {
                                            sp.push(child);
                                        }
                                    }
                                }
                            }
                        } else {
                            src[key] = sp.concat(dp);
                        }
                    } else if (!FM.Util.isUndef(dp) && dp !== -1 && dp !== '-') {
                        src[key] = dp;
                    }
                }
            }
        }
        /**
         * 批量编辑方法：父模型对象创建子模型对象
         * 传入的数据一般是从其他对象拷贝的，子表的外键是不正确的，在这个方法中要重置为当前父对象的主键
         * @param  {object}    data 子对象数据，一般是拷贝其他对象的
         * @return {object}         子模型对象
         */

    }, {
        key: 'createChild',
        value: function createChild(data) {
            throw new Error(this.constructor.name + '数据模型的createChild方法未实现！');
        }
        /**
         * 判断模型对象的属性值是否发生了变化
         * 注意：这个方法目前只能处理属性值为字符串和数值的，对象、数组的判断不出来
         * @param  {String} prop 属性名称
         * @return {Boolean}     属性值是否有变化
         */

    }, {
        key: 'propertyChanged',
        value: function propertyChanged(prop) {
            if (!this.hasOwnProperty(prop) && !this.origin.hasOwnProperty(prop)) {
                throw new Error(prop + '属性不存在!');
            }
            return this[prop] != this.origin[prop];
        }
    }, {
        key: 'originData',
        get: function get() {
            return this._originData;
        }
        /**
         * 原始数据的set方法，此方法不做任何操作，表示禁止对原始数据直接修改
         * @param  {object}   data 要设置的值
         * @return {undefined}
         */
        ,
        set: function set(data) {
            return;
        }
        /**
         * 原始Json数据的get方法
         * @return {Object}   原始数据
         */

    }, {
        key: 'origin',
        get: function get() {
            if (!this._origin) {
                this._origin = new this.constructor(this._originData, this.options);
            }
            return this._origin;
        }
        /**
         * 原始数据模型的set方法，此方法不做任何操作，表示禁止对原始数据模型直接修改
         * @param  {object}   data 要设置的值
         * @return {undefined}
         */
        ,
        set: function set(data) {
            return;
        }
    }, {
        key: 'exclude',

        /**
         * 批量编辑方法：获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */
        get: function get() {
            return ['options', '_uuid', '_originData', '_origin', '_deleted', '_errors'];
        }
    }], [{
        key: 'isDataModelArray',
        value: function isDataModelArray(arr) {
            // 空数组或者非数组
            if (!arr || !arr.length) {
                return false;
            }

            var f = true;
            for (var i = 0; i < arr.length; i++) {
                if (!(arr[i] instanceof DataModel)) {
                    f = false;
                    break;
                }
            }
            return f;
        }
    }]);

    return DataModel;
}();

exports.default = DataModel;

/***/ }),
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * GIS数据模型基类，继承于DataModel类，
 * 继承后可重写相关的方法，一般要求重写geoLiveType属性，setAttributes、getSnapShot方法
 */
var GeoDataModel = function (_DataModel) {
  _inherits(GeoDataModel, _DataModel);

  function GeoDataModel() {
    _classCallCheck(this, GeoDataModel);

    return _possibleConstructorReturn(this, (GeoDataModel.__proto__ || Object.getPrototypeOf(GeoDataModel)).apply(this, arguments));
  }

  _createClass(GeoDataModel, [{
    key: 'initialize',

    /**
     * 设置对象属性方法，需要在子类中重写
     * @param  {object} data - 接口返回的json数据对象
     * @return {undefined}
     */
    value: function initialize(data) {
      this.geoLiveType = data.geoLiveType || 'GLM';
      this.geometry = data.geometry ? FM.Util.clone(data.geometry) : null;
    }
  }]);

  return GeoDataModel;
}(_DataModel3.default);

exports.default = GeoDataModel;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GeoDataModel2 = __webpack_require__(59);

var _GeoDataModel3 = _interopRequireDefault(_GeoDataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 情报数据模型
 */
var Info = function (_GeoDataModel) {
    _inherits(Info, _GeoDataModel);

    function Info() {
        _classCallCheck(this, Info);

        return _possibleConstructorReturn(this, (Info.__proto__ || Object.getPrototypeOf(Info)).apply(this, arguments));
    }

    _createClass(Info, [{
        key: 'initialize',

        /**
         * 设置对象属性方法，需要在子类中重写
         * @param  {object} data - 接口返回的json数据对象
         * @return {undefined}
         */
        value: function initialize(data) {
            this.globalId = data.globalId || null;
            this.b_featureKind = data.b_featureKind || 2;
            this.b_sourceCode = data.b_sourceCode || 1;
            this.b_sourceId = data.b_sourceId || '';
            this.b_reliability = data.b_reliability || 1;
            this.g_location = data.g_location || null;
            this.g_guide = data.g_guide || null;
            this.t_storageDate = data.t_storageDate || '';
            this.t_expectDate = data.t_expectDate || '';
            this.t_newsDate = data.t_newsDate || '';
            this.t_expDateReliab = data.t_expDateReliab || '';
            this.t_publishDate = data.t_publishDate || '';
            this.t_submitDate = data.t_submitDate || '';
            this.t_closeDate = data.t_closeDate || '';
            this.t_operateDate = data.t_operateDate || '';
            this.t_isPublished = data.t_isPublished || 0;
            this.t_isClosed = data.t_isClosed || 0;
            this.t_lifecycle = data.t_lifecycle || 0;
            this.t_payPoints = data.t_payPoints || 0;
            this.h_outdoor = data.h_outdoor || 0;
            this.h_indoor = data.h_indoor || 0;
            this.h_audit = data.h_audit || 0;
            if (data.i_poi) {
                this.i_poi = {
                    kindCode: data.i_poi.kindCode || '',
                    name: data.i_poi.name || '',
                    address: data.i_poi.address || '',
                    telephone: data.i_poi.telephone || '',
                    foodtype: data.i_poi.foodtype || '',
                    father: data.i_poi.father || '',
                    rating: data.i_poi.rating || 0,
                    url: data.i_poi.url || '',
                    i_road: data.i_poi.i_road || '',
                    roadKind: data.i_poi.roadKind || 0,
                    length: data.i_poi.length || '',
                    startPoint: data.i_poi.startPoint || '',
                    passPoint: data.i_poi.passPoint || '',
                    endPoint: data.i_poi.endPoint || '',

                    i_memo: data.i_poi.i_memo || '',
                    i_proposal: data.i_poi.passPoint || 3,
                    i_level: data.i_poi.i_level || 1,
                    i_topicName: data.i_poi.i_topicName || '',
                    i_infoContent: data.i_poi.i_infoContent || '',
                    i_area: data.i_poi.i_area || '',
                    i_gainType: data.i_poi.i_gainType || '',
                    i_confirmMode: data.i_poi.i_confirmMode || '',
                    i_confirmResult: data.i_poi.i_confirmResult || '',
                    i_precision: data.i_poi.i_precision || '',
                    i_serviceStatus: data.i_poi.i_serviceStatus || ''
                };
            } else {
                this.i_poi = {
                    kindCode: '',
                    name: '',
                    address: '',
                    telephone: '',
                    foodtype: '',
                    father: '',
                    rating: 0,
                    url: '',
                    i_road: '',
                    roadKind: 0,
                    length: '',
                    startPoint: '',
                    passPoint: '',
                    endPoint: '',
                    i_memo: '',
                    i_proposal: 3,
                    i_level: 1,
                    i_topicName: '',
                    i_infoContent: '',
                    i_area: '',
                    i_gainType: '',
                    i_confirmMode: '',
                    i_confirmResult: '',
                    i_precision: '',
                    i_serviceStatus: ''
                };
            }
            this.r_features = data.r_features || [];
            this.f_array = data.f_array || [];
            this.c_array = data.c_array || [];

            this.geoLiveType = 'INFO';
        }

        /**
         * 根据数据的geoLiveType，转化为各个要素对应的数据模型
         * @param  {object} data 接口返回的数据
         * @param  {object} options 附加配置
         * @return {object} ret 各要素对应的数据模型
         */

    }], [{
        key: 'create',
        value: function create(data, options) {
            var ret = null;
            switch (data.geoLiveType) {
                case 'PointInfo':
                    // 数据型点情报
                    ret = new FM.dataApi.PointInfo(data, options);
                    break;
                case 'QPointInfo':
                    // 情报型点情报
                    ret = new FM.dataApi.QPointInfo(data, options);
                    break;
                case 'LineInfo':
                    // 数据型线情报
                    ret = new FM.dataApi.LineInfo(data, options);
                    break;
                case 'QLineInfo':
                    // 情报型线情报
                    ret = new FM.dataApi.QLineInfo(data, options);
                    break;
                case 'PolygonInfo':
                    // 数据型面情报*
                    ret = new FM.dataApi.PolygonInfo(data, options);
                    break;
                case 'QPolygonInfo':
                    // 情报型面情报*
                    ret = new FM.dataApi.QPolygonInfo(data, options);
                    break;
                default:
                    ret = new FM.dataApi.Info(data, options);
                    break;
            }
            return ret;
        }
    }]);

    return Info;
}(_GeoDataModel3.default);

exports.default = Info;

/***/ }),
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _index = __webpack_require__(313);

var Common = _interopRequireWildcard(_index);

var _index2 = __webpack_require__(314);

var Road = _interopRequireWildcard(_index2);

var _index3 = __webpack_require__(435);

var Index = _interopRequireWildcard(_index3);

var _index4 = __webpack_require__(461);

var Meta = _interopRequireWildcard(_index4);

var _index5 = __webpack_require__(470);

var Column = _interopRequireWildcard(_index5);

var _index6 = __webpack_require__(477);

var Agent = _interopRequireWildcard(_index6);

var _index7 = __webpack_require__(482);

var Check = _interopRequireWildcard(_index7);

var _index8 = __webpack_require__(485);

var Tip = _interopRequireWildcard(_index8);

var _index9 = __webpack_require__(585);

var Info = _interopRequireWildcard(_index9);

var _IxPoiConstant = __webpack_require__(592);

var _IxPoiConstant2 = _interopRequireDefault(_IxPoiConstant);

var _ColConstant = __webpack_require__(593);

var _ColConstant2 = _interopRequireDefault(_ColConstant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// 常量
var dataApi = {
    Constant: {
        PoiRow: _IxPoiConstant2.default,
        Column: _ColConstant2.default
    }
}; // import { FM } from '../fastmap/fastmap'; // 由于要打包成多个文件，FM是独立的文件，这里以及具体的类文件里都不需要引入FM模块

FM.extend(dataApi, Common);
FM.extend(dataApi, Road);
FM.extend(dataApi, Index);
FM.extend(dataApi, Meta);
FM.extend(dataApi, Column);
FM.extend(dataApi, Agent);
FM.extend(dataApi, Check);
FM.extend(dataApi, Tip);
FM.extend(dataApi, Info);

FM.dataApi = FM.dataApi || {};
FM.Util.merge(FM.dataApi, dataApi);

exports.default = null;

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Info = exports.Tip = exports.Feature = exports.GeoDataModel = exports.DataModel = undefined;

var _DataModel = __webpack_require__(11);

var _DataModel2 = _interopRequireDefault(_DataModel);

var _GeoDataModel = __webpack_require__(59);

var _GeoDataModel2 = _interopRequireDefault(_GeoDataModel);

var _Feature = __webpack_require__(1);

var _Feature2 = _interopRequireDefault(_Feature);

var _Tip = __webpack_require__(2);

var _Tip2 = _interopRequireDefault(_Tip);

var _Info = __webpack_require__(60);

var _Info2 = _interopRequireDefault(_Info);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.DataModel = _DataModel2.default;
exports.GeoDataModel = _GeoDataModel2.default;
exports.Feature = _Feature2.default;
exports.Tip = _Tip2.default;
exports.Info = _Info2.default;

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _AdAdmin = __webpack_require__(315);

Object.defineProperty(exports, 'AdAdmin', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_AdAdmin).default;
  }
});

var _AdAdminName = __webpack_require__(316);

Object.defineProperty(exports, 'AdAdminName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_AdAdminName).default;
  }
});

var _AdFace = __webpack_require__(317);

Object.defineProperty(exports, 'AdFace', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_AdFace).default;
  }
});

var _AdLink = __webpack_require__(318);

Object.defineProperty(exports, 'AdLink', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_AdLink).default;
  }
});

var _AdNode = __webpack_require__(319);

Object.defineProperty(exports, 'AdNode', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_AdNode).default;
  }
});

var _CmgBuildFace = __webpack_require__(320);

Object.defineProperty(exports, 'CmgBuildFace', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_CmgBuildFace).default;
  }
});

var _CmgBuildFaceTenant = __webpack_require__(321);

Object.defineProperty(exports, 'CmgBuildFaceTenant', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_CmgBuildFaceTenant).default;
  }
});

var _CmgBuildFaceTopo = __webpack_require__(322);

Object.defineProperty(exports, 'CmgBuildFaceTopo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_CmgBuildFaceTopo).default;
  }
});

var _CmgBuilding = __webpack_require__(323);

Object.defineProperty(exports, 'CmgBuilding', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_CmgBuilding).default;
  }
});

var _CmgBuilding3DIcon = __webpack_require__(324);

Object.defineProperty(exports, 'CmgBuilding3DIcon', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_CmgBuilding3DIcon).default;
  }
});

var _CmgBuilding3DModel = __webpack_require__(325);

Object.defineProperty(exports, 'CmgBuilding3DModel', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_CmgBuilding3DModel).default;
  }
});

var _CmgBuildingName = __webpack_require__(326);

Object.defineProperty(exports, 'CmgBuildingName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_CmgBuildingName).default;
  }
});

var _CmgBuildingPoi = __webpack_require__(327);

Object.defineProperty(exports, 'CmgBuildingPoi', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_CmgBuildingPoi).default;
  }
});

var _CmgBuildLink = __webpack_require__(328);

Object.defineProperty(exports, 'CmgBuildLink', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_CmgBuildLink).default;
  }
});

var _CmgBuildNode = __webpack_require__(329);

Object.defineProperty(exports, 'CmgBuildNode', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_CmgBuildNode).default;
  }
});

var _LcFace = __webpack_require__(330);

Object.defineProperty(exports, 'LcFace', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LcFace).default;
  }
});

var _LcFaceName = __webpack_require__(331);

Object.defineProperty(exports, 'LcFaceName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LcFaceName).default;
  }
});

var _LcLink = __webpack_require__(332);

Object.defineProperty(exports, 'LcLink', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LcLink).default;
  }
});

var _LcLinkKind = __webpack_require__(333);

Object.defineProperty(exports, 'LcLinkKind', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LcLinkKind).default;
  }
});

var _LcNode = __webpack_require__(334);

Object.defineProperty(exports, 'LcNode', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LcNode).default;
  }
});

var _LuFace = __webpack_require__(335);

Object.defineProperty(exports, 'LuFace', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LuFace).default;
  }
});

var _LuFaceName = __webpack_require__(336);

Object.defineProperty(exports, 'LuFaceName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LuFaceName).default;
  }
});

var _LuLink = __webpack_require__(337);

Object.defineProperty(exports, 'LuLink', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LuLink).default;
  }
});

var _LuLinkKind = __webpack_require__(338);

Object.defineProperty(exports, 'LuLinkKind', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LuLinkKind).default;
  }
});

var _LuNode = __webpack_require__(339);

Object.defineProperty(exports, 'LuNode', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LuNode).default;
  }
});

var _RdBranch = __webpack_require__(340);

Object.defineProperty(exports, 'RdBranch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdBranch).default;
  }
});

var _RdBranchDetail = __webpack_require__(341);

Object.defineProperty(exports, 'RdBranchDetail', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdBranchDetail).default;
  }
});

var _RdBranchName = __webpack_require__(342);

Object.defineProperty(exports, 'RdBranchName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdBranchName).default;
  }
});

var _RdBranchRealImage = __webpack_require__(343);

Object.defineProperty(exports, 'RdBranchRealImage', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdBranchRealImage).default;
  }
});

var _RdBranchSchematic = __webpack_require__(344);

Object.defineProperty(exports, 'RdBranchSchematic', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdBranchSchematic).default;
  }
});

var _RdBranchSeriesBranch = __webpack_require__(345);

Object.defineProperty(exports, 'RdBranchSeriesBranch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdBranchSeriesBranch).default;
  }
});

var _RdBranchSignAsreal = __webpack_require__(346);

Object.defineProperty(exports, 'RdBranchSignAsreal', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdBranchSignAsreal).default;
  }
});

var _RdBranchSignBoard = __webpack_require__(347);

Object.defineProperty(exports, 'RdBranchSignBoard', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdBranchSignBoard).default;
  }
});

var _RdBranchSignBoardName = __webpack_require__(348);

Object.defineProperty(exports, 'RdBranchSignBoardName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdBranchSignBoardName).default;
  }
});

var _RdBranchVia = __webpack_require__(349);

Object.defineProperty(exports, 'RdBranchVia', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdBranchVia).default;
  }
});

var _RdCross = __webpack_require__(350);

Object.defineProperty(exports, 'RdCross', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdCross).default;
  }
});

var _RdCrossLink = __webpack_require__(351);

Object.defineProperty(exports, 'RdCrossLink', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdCrossLink).default;
  }
});

var _RdCrossName = __webpack_require__(352);

Object.defineProperty(exports, 'RdCrossName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdCrossName).default;
  }
});

var _RdCrossNode = __webpack_require__(353);

Object.defineProperty(exports, 'RdCrossNode', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdCrossNode).default;
  }
});

var _RdDirectRoute = __webpack_require__(354);

Object.defineProperty(exports, 'RdDirectRoute', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdDirectRoute).default;
  }
});

var _RdDirectRouteVia = __webpack_require__(355);

Object.defineProperty(exports, 'RdDirectRouteVia', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdDirectRouteVia).default;
  }
});

var _RdElectronicEye = __webpack_require__(356);

Object.defineProperty(exports, 'RdElectronicEye', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdElectronicEye).default;
  }
});

var _RdGate = __webpack_require__(357);

Object.defineProperty(exports, 'RdGate', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdGate).default;
  }
});

var _RdGateCondition = __webpack_require__(358);

Object.defineProperty(exports, 'RdGateCondition', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdGateCondition).default;
  }
});

var _RdGsc = __webpack_require__(359);

Object.defineProperty(exports, 'RdGsc', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdGsc).default;
  }
});

var _RdGscLink = __webpack_require__(360);

Object.defineProperty(exports, 'RdGscLink', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdGscLink).default;
  }
});

var _RdHgwgLimit = __webpack_require__(361);

Object.defineProperty(exports, 'RdHgwgLimit', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdHgwgLimit).default;
  }
});

var _RdInter = __webpack_require__(362);

Object.defineProperty(exports, 'RdInter', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdInter).default;
  }
});

var _RdInterLinks = __webpack_require__(363);

Object.defineProperty(exports, 'RdInterLinks', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdInterLinks).default;
  }
});

var _RdInterNodes = __webpack_require__(364);

Object.defineProperty(exports, 'RdInterNodes', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdInterNodes).default;
  }
});

var _RdLane = __webpack_require__(365);

Object.defineProperty(exports, 'RdLane', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLane).default;
  }
});

var _RdLaneCondition = __webpack_require__(366);

Object.defineProperty(exports, 'RdLaneCondition', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLaneCondition).default;
  }
});

var _RdLaneConnexity = __webpack_require__(367);

Object.defineProperty(exports, 'RdLaneConnexity', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLaneConnexity).default;
  }
});

var _RdLanes = __webpack_require__(368);

Object.defineProperty(exports, 'RdLanes', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLanes).default;
  }
});

var _RdLaneTopoDetail = __webpack_require__(369);

Object.defineProperty(exports, 'RdLaneTopoDetail', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLaneTopoDetail).default;
  }
});

var _RdLaneTopoDetailArr = __webpack_require__(370);

Object.defineProperty(exports, 'RdLaneTopoDetailArr', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLaneTopoDetailArr).default;
  }
});

var _RdLaneTopology = __webpack_require__(371);

Object.defineProperty(exports, 'RdLaneTopology', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLaneTopology).default;
  }
});

var _RdLaneTopoVia = __webpack_require__(372);

Object.defineProperty(exports, 'RdLaneTopoVia', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLaneTopoVia).default;
  }
});

var _RdLaneVia = __webpack_require__(373);

Object.defineProperty(exports, 'RdLaneVia', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLaneVia).default;
  }
});

var _RdLink = __webpack_require__(374);

Object.defineProperty(exports, 'RdLink', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLink).default;
  }
});

var _RdLinkForm = __webpack_require__(375);

Object.defineProperty(exports, 'RdLinkForm', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLinkForm).default;
  }
});

var _RdLinkIntRtic = __webpack_require__(376);

Object.defineProperty(exports, 'RdLinkIntRtic', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLinkIntRtic).default;
  }
});

var _RdLinkLimit = __webpack_require__(377);

Object.defineProperty(exports, 'RdLinkLimit', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLinkLimit).default;
  }
});

var _RdLinkName = __webpack_require__(378);

Object.defineProperty(exports, 'RdLinkName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLinkName).default;
  }
});

var _RdLinkRtic = __webpack_require__(379);

Object.defineProperty(exports, 'RdLinkRtic', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLinkRtic).default;
  }
});

var _RdLinkSideWalk = __webpack_require__(380);

Object.defineProperty(exports, 'RdLinkSideWalk', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLinkSideWalk).default;
  }
});

var _RdLinkSpeedLimit = __webpack_require__(381);

Object.defineProperty(exports, 'RdLinkSpeedLimit', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLinkSpeedLimit).default;
  }
});

var _RdLinkTruckLimit = __webpack_require__(382);

Object.defineProperty(exports, 'RdLinkTruckLimit', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLinkTruckLimit).default;
  }
});

var _RdLinkWalkStair = __webpack_require__(383);

Object.defineProperty(exports, 'RdLinkWalkStair', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLinkWalkStair).default;
  }
});

var _RdLinkWarning = __webpack_require__(384);

Object.defineProperty(exports, 'RdLinkWarning', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLinkWarning).default;
  }
});

var _RdLinkZone = __webpack_require__(385);

Object.defineProperty(exports, 'RdLinkZone', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdLinkZone).default;
  }
});

var _RdMileagePile = __webpack_require__(386);

Object.defineProperty(exports, 'RdMileagePile', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdMileagePile).default;
  }
});

var _RdNode = __webpack_require__(387);

Object.defineProperty(exports, 'RdNode', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdNode).default;
  }
});

var _RdNodeForm = __webpack_require__(388);

Object.defineProperty(exports, 'RdNodeForm', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdNodeForm).default;
  }
});

var _RdNodeMesh = __webpack_require__(389);

Object.defineProperty(exports, 'RdNodeMesh', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdNodeMesh).default;
  }
});

var _RdObject = __webpack_require__(390);

Object.defineProperty(exports, 'RdObject', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdObject).default;
  }
});

var _RdObjectInters = __webpack_require__(391);

Object.defineProperty(exports, 'RdObjectInters', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdObjectInters).default;
  }
});

var _RdObjectLinks = __webpack_require__(392);

Object.defineProperty(exports, 'RdObjectLinks', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdObjectLinks).default;
  }
});

var _RdObjectNames = __webpack_require__(393);

Object.defineProperty(exports, 'RdObjectNames', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdObjectNames).default;
  }
});

var _RdObjectNodes = __webpack_require__(394);

Object.defineProperty(exports, 'RdObjectNodes', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdObjectNodes).default;
  }
});

var _RdObjectRoads = __webpack_require__(395);

Object.defineProperty(exports, 'RdObjectRoads', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdObjectRoads).default;
  }
});

var _RdRestriction = __webpack_require__(396);

Object.defineProperty(exports, 'RdRestriction', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdRestriction).default;
  }
});

var _RdRestrictionCondition = __webpack_require__(397);

Object.defineProperty(exports, 'RdRestrictionCondition', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdRestrictionCondition).default;
  }
});

var _RdRestrictionDetail = __webpack_require__(398);

Object.defineProperty(exports, 'RdRestrictionDetail', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdRestrictionDetail).default;
  }
});

var _RdRestrictionVias = __webpack_require__(399);

Object.defineProperty(exports, 'RdRestrictionVias', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdRestrictionVias).default;
  }
});

var _RdRoad = __webpack_require__(400);

Object.defineProperty(exports, 'RdRoad', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdRoad).default;
  }
});

var _RdRoadLinks = __webpack_require__(401);

Object.defineProperty(exports, 'RdRoadLinks', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdRoadLinks).default;
  }
});

var _RdSameLink = __webpack_require__(402);

Object.defineProperty(exports, 'RdSameLink', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdSameLink).default;
  }
});

var _RdSameLinkPart = __webpack_require__(403);

Object.defineProperty(exports, 'RdSameLinkPart', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdSameLinkPart).default;
  }
});

var _RdSameNode = __webpack_require__(404);

Object.defineProperty(exports, 'RdSameNode', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdSameNode).default;
  }
});

var _RdSameNodePart = __webpack_require__(405);

Object.defineProperty(exports, 'RdSameNodePart', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdSameNodePart).default;
  }
});

var _RdSe = __webpack_require__(406);

Object.defineProperty(exports, 'RdSe', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdSe).default;
  }
});

var _RdSlope = __webpack_require__(407);

Object.defineProperty(exports, 'RdSlope', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdSlope).default;
  }
});

var _RdSlopeLinks = __webpack_require__(408);

Object.defineProperty(exports, 'RdSlopeLinks', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdSlopeLinks).default;
  }
});

var _RdSpeedBump = __webpack_require__(409);

Object.defineProperty(exports, 'RdSpeedBump', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdSpeedBump).default;
  }
});

var _RdSpeedLimit = __webpack_require__(410);

Object.defineProperty(exports, 'RdSpeedLimit', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdSpeedLimit).default;
  }
});

var _RdTmcLocation = __webpack_require__(411);

Object.defineProperty(exports, 'RdTmcLocation', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdTmcLocation).default;
  }
});

var _RdTmcLocationLink = __webpack_require__(412);

Object.defineProperty(exports, 'RdTmcLocationLink', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdTmcLocationLink).default;
  }
});

var _RdTollgate = __webpack_require__(413);

Object.defineProperty(exports, 'RdTollgate', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdTollgate).default;
  }
});

var _RdTollgateName = __webpack_require__(414);

Object.defineProperty(exports, 'RdTollgateName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdTollgateName).default;
  }
});

var _RdTollgatePassage = __webpack_require__(415);

Object.defineProperty(exports, 'RdTollgatePassage', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdTollgatePassage).default;
  }
});

var _RdTrafficSignal = __webpack_require__(416);

Object.defineProperty(exports, 'RdTrafficSignal', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdTrafficSignal).default;
  }
});

var _RdVariableSpeed = __webpack_require__(417);

Object.defineProperty(exports, 'RdVariableSpeed', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdVariableSpeed).default;
  }
});

var _RdVariableSpeedLink = __webpack_require__(418);

Object.defineProperty(exports, 'RdVariableSpeedLink', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdVariableSpeedLink).default;
  }
});

var _RdVoiceGuide = __webpack_require__(419);

Object.defineProperty(exports, 'RdVoiceGuide', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdVoiceGuide).default;
  }
});

var _RdVoiceGuideDetail = __webpack_require__(420);

Object.defineProperty(exports, 'RdVoiceGuideDetail', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdVoiceGuideDetail).default;
  }
});

var _RdVoiceGuideVia = __webpack_require__(421);

Object.defineProperty(exports, 'RdVoiceGuideVia', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdVoiceGuideVia).default;
  }
});

var _RdWarningInfo = __webpack_require__(422);

Object.defineProperty(exports, 'RdWarningInfo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RdWarningInfo).default;
  }
});

var _RoadName = __webpack_require__(423);

Object.defineProperty(exports, 'RoadName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RoadName).default;
  }
});

var _RwLink = __webpack_require__(424);

Object.defineProperty(exports, 'RwLink', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RwLink).default;
  }
});

var _RwLinkName = __webpack_require__(425);

Object.defineProperty(exports, 'RwLinkName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RwLinkName).default;
  }
});

var _RwNode = __webpack_require__(426);

Object.defineProperty(exports, 'RwNode', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RwNode).default;
  }
});

var _TmcLine = __webpack_require__(427);

Object.defineProperty(exports, 'TmcLine', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TmcLine).default;
  }
});

var _TmcLineName = __webpack_require__(428);

Object.defineProperty(exports, 'TmcLineName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TmcLineName).default;
  }
});

var _TmcPoint = __webpack_require__(429);

Object.defineProperty(exports, 'TmcPoint', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TmcPoint).default;
  }
});

var _TmcPointName = __webpack_require__(430);

Object.defineProperty(exports, 'TmcPointName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TmcPointName).default;
  }
});

var _ZoneFace = __webpack_require__(431);

Object.defineProperty(exports, 'ZoneFace', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ZoneFace).default;
  }
});

var _ZoneLink = __webpack_require__(432);

Object.defineProperty(exports, 'ZoneLink', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ZoneLink).default;
  }
});

var _ZoneLinkKind = __webpack_require__(433);

Object.defineProperty(exports, 'ZoneLinkKind', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ZoneLinkKind).default;
  }
});

var _ZoneNode = __webpack_require__(434);

Object.defineProperty(exports, 'ZoneNode', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ZoneNode).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 行政区划代表点
 */
var AdAdmin = function (_Feature) {
    _inherits(AdAdmin, _Feature);

    function AdAdmin() {
        _classCallCheck(this, AdAdmin);

        return _possibleConstructorReturn(this, (AdAdmin.__proto__ || Object.getPrototypeOf(AdAdmin)).apply(this, arguments));
    }

    _createClass(AdAdmin, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'ADADMIN';
            this.pid = data.pid;
            this.adminId = data.adminId || 0;
            this.extendId = data.extendId || 0;
            this.adminType = data.adminType || 0;
            this.capital = data.capital || 0;
            this.population = data.population || null;
            this.geometry = data.geometry;
            this.linkPid = data.linkPid || 0;
            this.side = data.side || 0;
            this.jisCode = data.jisCode || 0;
            this.meshId = data.meshId || 0;
            if (typeof data.editFlag !== 'undefined') {
                this.editFlag = data.editFlag;
            } else {
                this.editFlag = 1;
            }
            this.memo = data.memo || null;

            this.names = [];
            if (data.names && data.names.length > 0) {
                for (var i = 0, len = data.names.length; i < len; i++) {
                    var name = new FM.dataApi.AdAdminName(data.names[i]);
                    this.names.push(name);
                }
            }
            // 引导点和引导线
            this.guidePoint = {
                type: 'Point',
                coordinates: []
            };
            this.guideLink = {
                type: 'LineString',
                coordinates: [[data.geometry.coordinates[0], data.geometry.coordinates[1]]]
            };

            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.adminId = this.adminId;
            data.extendId = this.extendId;
            data.adminType = this.adminType;
            data.capital = this.capital;
            data.population = this.population;
            data.geometry = this.geometry;
            data.linkPid = this.linkPid;
            data.side = this.side;
            data.jisCode = this.jisCode;
            data.meshId = this.meshId;
            data.editFlag = this.editFlag;
            data.memo = this.memo;
            var names = [];
            for (var i = 0, len = this.names.length; i < len; i++) {
                names.push(this.names[i].getIntegrate());
            }
            data.names = names;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据可能是片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.adminId = this.adminId;
            data.extendId = this.extendId;
            data.adminType = this.adminType;
            data.capital = this.capital;
            data.population = this.population;
            data.geometry = this.geometry;
            data.linkPid = this.linkPid;
            data.side = this.side;
            data.jisCode = this.jisCode;
            data.meshId = this.meshId;
            data.editFlag = this.editFlag;
            data.memo = this.memo;
            data.geoLiveType = this.geoLiveType;
            var names = [];
            for (var i = 0, len = this.names.length; i < len; i++) {
                names.push(this.names[i].getIntegrate());
            }
            data.names = names;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 前端校验
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            var _self = this;
            // 该检查删掉了;
            // if ((!this.names.length)) {
            //     this._pushError('GLM50099', '行政区划代表点要素至少有一个名称存在');
            // }
            if (this.adminType != 0 && this.adminId.toString().length != 6) {
                this._pushError('GLM50097', '行政区划代表点的ADMIN_TYPE不为0且ADMIN_ID(行政代码)长度不是6位');
            }
            // GLM50099检查;
            var tempAdminId = this.adminId.toString();
            if (this.adminType != 0) {
                var allNameLangCode = [];
                this.names.forEach(function (item) {
                    if (allNameLangCode.indexOf(item.langCode == -1)) {
                        allNameLangCode.push(item.langCode);
                    }
                });
                var temp = [];
                if (tempAdminId.substr(0, 2) == '82') {
                    temp = FM.Util.intersection(['POR', 'ENG', 'CHT'], allNameLangCode);
                    if (temp.length != 3) {
                        this._pushError('GLM50099', 'ADMIN_ID前两位为82时，名称表应同时存在LANG_CODE=POR、ENG和CHT的的记录');
                    }
                } else if (tempAdminId.substr(0, 2) == '81') {
                    temp = FM.Util.intersection(['ENG', 'CHT'], allNameLangCode);
                    if (temp.length != 2) {
                        this._pushError('GLM50099', 'ADMIN_ID前两位为81时，名称表应同时存在LANG_CODE=ENG和CHT的的记录');
                    }
                } else {
                    temp = FM.Util.intersection(['ENG', 'CHI'], allNameLangCode);
                    if (temp.length != 2) {
                        this._pushError('GLM50099', 'ADMIN_ID前两位不为81或82时，名称表应同时存在LANG_CODE=ENG和CHI的记录');
                    }
                }
            }
            // GLM50102
            this.names.forEach(function (item) {
                if (!item.name) {
                    _self._pushError('GLM50102', '名称表中NAME字段不能为空');
                    return;
                }
            });
            // GLM50100 GLM50102
            this.names.forEach(function (item) {
                if (['CHI', 'CHT', 'ENG', 'POR'].indexOf(item.langCode) != -1 && FM.Util.getBLength(item.name) > 35) {
                    _self._pushError('GLM50100_GLM50102', '中文/英文/葡文名称超过35个字符');
                    return;
                }
            });
            // GLM50103
            this.names.forEach(function (item) {
                if (['CHI', 'CHT'].indexOf(item.langCode) != -1 && !item.phonetic) {
                    _self._pushError('GLM50103', '名称表中LANG_CODE=CHI|CHT时，名称发音（PHONETIC）不能为空');
                    return;
                }
            });
            // GLM50104
            this.names.forEach(function (item) {
                if (FM.Util.getBLength(item.phonetic) > 120) {
                    _self._pushError('GLM50104', '名称发音（PHONETIC）长度超过120个字符');
                    return;
                }
            });
            // GLM50106
            if (this.adminType == 3 || this.adminType == 3.5) {
                this.names.forEach(function (item) {
                    if (item.name.substr(item.name.length - 2) != '市区' && item.langCode === 'CHI') {
                        _self._pushError('GLM50106', 'ADMIN_TYPE为“3：地级市市区（GCZone）”和“3.5：地级市市区（未作区界）”时，行政区划中文名称必须以“市区”结尾');
                        return;
                    }
                });
            }

            var nameGroup = [];
            var nameGroupinitArr = [];
            this.names.forEach(function (item) {
                if (!nameGroup[item.nameGroupid - 1]) {
                    nameGroup[item.nameGroupid - 1] = [];
                }
                nameGroup[item.nameGroupid - 1].push(item);
            });
            // GLM50125
            if (this.adminType != 8 && this.adminType != 9) {
                if (tempAdminId.substr(0, 2) != '82' && tempAdminId.substr(0, 2) != '81') {
                    nameGroup.forEach(function (outerItem, outerIndex) {
                        nameGroupinitArr[outerIndex] = ['CHI_1', 'ENG_1', 'CHI_3', 'ENG_3'];
                        outerItem.forEach(function (innerItem, innerIndex) {
                            if (innerItem.langCode === 'CHI' && innerItem.nameClass === 1) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'CHI_1');
                            }
                            if (innerItem.langCode === 'ENG' && innerItem.nameClass === 1) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'ENG_1');
                            }
                            if (innerItem.langCode === 'CHI' && innerItem.nameClass === 3) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'CHI_3');
                            }
                            if (innerItem.langCode === 'ENG' && innerItem.nameClass === 3) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'ENG_3');
                            }
                        });
                    });
                } else if (tempAdminId.substr(0, 2) == '82') {
                    nameGroup.forEach(function (outerItem, outerIndex) {
                        nameGroupinitArr[outerIndex] = ['CHT_1', 'ENG_1', 'CHT_3', 'ENG_3', 'POR_1'];
                        outerItem.forEach(function (innerItem, innerIndex) {
                            if (innerItem.langCode === 'CHT' && innerItem.nameClass === 1) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'CHT_1');
                            }
                            if (innerItem.langCode === 'ENG' && innerItem.nameClass === 1) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'ENG_1');
                            }
                            if (innerItem.langCode === 'CHT' && innerItem.nameClass === 3) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'CHT_3');
                            }
                            if (innerItem.langCode === 'ENG' && innerItem.nameClass === 3) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'ENG_3');
                            }
                            if (innerItem.langCode === 'POR' && innerItem.nameClass === 1) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'POR_1');
                            }
                        });
                    });
                } else if (tempAdminId.substr(0, 2) == '81') {
                    nameGroup.forEach(function (outerItem, outerIndex) {
                        nameGroupinitArr[outerIndex] = ['CHT_1', 'CHT_3', 'ENG_1', 'ENG_3'];
                        outerItem.forEach(function (innerItem, innerIndex) {
                            if (innerItem.langCode === 'CHT' && innerItem.nameClass === 1) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'CHT_1');
                            }
                            if (innerItem.langCode === 'POR' && innerItem.nameClass === 1) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'POR_1');
                            }
                            if (innerItem.langCode === 'CHT' && innerItem.nameClass === 3) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'CHT_3');
                            }
                            if (innerItem.langCode === 'ENG' && innerItem.nameClass === 1) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'ENG_1');
                            }
                            if (innerItem.langCode === 'ENG' && innerItem.nameClass === 3) {
                                nameGroupinitArr[outerIndex] = FM.Util.without(nameGroupinitArr[outerIndex], 'ENG_3');
                            }
                        });
                    });
                }
                var message = '';
                nameGroupinitArr.forEach(function (outerLoop, outerIndex) {
                    if (outerLoop.length) {
                        message += '第' + (outerIndex + 1) + '组缺少';
                    }
                    // message += '第' + (outerIndex + 1) + '组缺少';
                    outerLoop.forEach(function (innerLoop) {
                        if (innerLoop === 'CHI_1') {
                            message += '简体中文标准化,';
                        }
                        if (innerLoop === 'CHI_3') {
                            message += '简体中文简称,';
                        }
                        if (innerLoop === 'CHT_1') {
                            message += '繁体中文标准化,';
                        }
                        if (innerLoop === 'CHT_3') {
                            message += '繁体中文简称,';
                        }
                        if (innerLoop === 'ENG_1') {
                            message += '英文标准化,';
                        }
                        if (innerLoop === 'ENG_3') {
                            message += '英文简称,';
                        }
                        if (innerLoop === 'POR_1') {
                            message += '葡文标准化,';
                        }
                    });
                });
                if (message) {
                    this._pushError('GLM50125', message);
                }
            }
            // 判断多音字是否进行了选择
            nameGroup.forEach(function (item, outerIndex) {
                nameGroupinitArr[outerIndex] = [];
                for (var i = 0; i < item.length; i++) {
                    if (item[i].langCode === 'CHI' || item.langCode === 'CHT') {
                        if (item[i].phoneticArr.length) {
                            for (var j = 0; j < item[i].phoneticArr.length; j++) {
                                if (item[i].phoneticArr[j].length > 1) {
                                    _self._pushError('多音字检查', '请选择多音字');
                                    break;
                                }
                            }
                        }
                    }
                }
            });
        }
    }]);

    return AdAdmin;
}(_Feature3.default);

exports.default = AdAdmin;

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 行政区划代表点名称
 */
var AdAdminName = function (_Feature) {
    _inherits(AdAdminName, _Feature);

    function AdAdminName() {
        _classCallCheck(this, AdAdminName);

        return _possibleConstructorReturn(this, (AdAdminName.__proto__ || Object.getPrototypeOf(AdAdminName)).apply(this, arguments));
    }

    _createClass(AdAdminName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'ADADMINNAME';
            this.pid = data.pid || 0;
            this.rowId = data.rowId || '';
            this.regionId = data.regionId || 0;
            this.nameId = data.nameId || 0;
            this.nameGroupid = data.nameGroupid || 1;
            this.langCode = data.langCode || 'CHI';
            this.nameClass = data.nameClass || 1;
            this.name = data.name || '';
            this.phonetic = data.phonetic || '';
            this.phoneticArr = [];
            if (data.phonetic) {
                this.phoneticArr.push(data.phonetic.split(';'));
            }
            this.srcFlag = data.srcFlag || 0;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.regionId = this.regionId;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.nameClass = this.nameClass;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.srcFlag = this.srcFlag;
            return data;
        }
        /**
         * 模型转换函数，获取的数据可能是片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.regionId = this.regionId;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.nameClass = this.nameClass;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.srcFlag = this.srcFlag;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return AdAdminName;
}(_Feature3.default);

exports.default = AdAdminName;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 行政区划面
 */
var AdFace = function (_Feature) {
    _inherits(AdFace, _Feature);

    function AdFace() {
        _classCallCheck(this, AdFace);

        return _possibleConstructorReturn(this, (AdFace.__proto__ || Object.getPrototypeOf(AdFace)).apply(this, arguments));
    }

    _createClass(AdFace, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'ADFACE';
            this.pid = data.pid;
            this.regionId = data.regionId;
            this.geometry = data.geometry;
            this.area = data.area || 0;
            this.perimeter = data.perimeter || 0;
            this.meshId = data.meshId || 0;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.regionId = this.regionId;
            data.geometry = this.geometry;
            data.area = this.area;
            data.perimeter = this.perimeter;
            data.meshId = this.meshId;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据可能是片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.facePid = this.facePid;
            data.regionId = this.regionId;
            data.geometry = this.geometry;
            data.area = this.area;
            data.perimeter = this.perimeter;
            data.meshId = this.meshId;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return AdFace;
}(_Feature3.default);

exports.default = AdFace;

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 行政区划link
 */
var AdLink = function (_Feature) {
    _inherits(AdLink, _Feature);

    function AdLink() {
        _classCallCheck(this, AdLink);

        return _possibleConstructorReturn(this, (AdLink.__proto__ || Object.getPrototypeOf(AdLink)).apply(this, arguments));
    }

    _createClass(AdLink, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'ADLINK';
            this.pid = data.pid;
            this.sNodePid = data.sNodePid;
            this.eNodePid = data.eNodePid;
            // this.kind = data.kind || 1;
            if (typeof data.kind !== 'undefined') {
                this.kind = data.kind;
            } else {
                this.kind = 1;
            }
            // this.form = data.form || 1;
            if (typeof data.form !== 'undefined') {
                this.form = data.form;
            } else {
                this.form = 1;
            }
            this.geometry = data.geometry;
            this.length = data.length || 0;
            this.scale = data.scale || 0;
            // this.editFlag = data.editFlag || 1;
            if (typeof data.editFlag !== 'undefined') {
                this.editFlag = data.editFlag;
            } else {
                this.editFlag = 1;
            }
            var str = [];
            for (var i = 0; i < data.meshes.length; i++) {
                str.push(data.meshes[i].meshId);
            }
            this.meshId = str.join(',');
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            data.kind = this.kind;
            data.form = this.form;
            data.geometry = this.geometry;
            data.length = this.length;
            data.scale = this.scale;
            data.editFlag = this.editFlag;
            data.meshId = this.meshId;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据可能是片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            data.kind = this.kind;
            data.form = this.form;
            data.geometry = this.geometry;
            data.length = this.length;
            data.scale = this.scale;
            data.editFlag = this.editFlag;
            data.meshId = this.meshId;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return AdLink;
}(_Feature3.default);

exports.default = AdLink;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 行政区划点
 */
var AdNode = function (_Feature) {
    _inherits(AdNode, _Feature);

    function AdNode() {
        _classCallCheck(this, AdNode);

        return _possibleConstructorReturn(this, (AdNode.__proto__ || Object.getPrototypeOf(AdNode)).apply(this, arguments));
    }

    _createClass(AdNode, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'ADNODE';
            this.pid = data.pid;
            this.kind = data.kind || 1;
            this.form = data.form || 0;
            this.geometry = data.geometry;
            // this.editFlag = data.editFlag || 1;
            if (typeof data.editFlag !== 'undefined') {
                this.editFlag = data.editFlag;
            } else {
                this.editFlag = 1;
            }
            this.meshes = data.meshes;
            var str = [];
            for (var i = 0; i < data.meshes.length; i++) {
                str.push(data.meshes[i].meshId);
            }
            this.meshId = str.join(',');
            this.links = data.links || [];
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.kind = this.kind;
            data.form = this.form;
            data.geometry = this.geometry;
            data.editFlag = this.editFlag;
            data.meshId = this.meshId;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据可能是片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.kind = this.kind;
            data.form = this.form;
            data.geometry = this.geometry;
            data.editFlag = this.editFlag;
            data.meshId = this.meshId;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return AdNode;
}(_Feature3.default);

exports.default = AdNode;

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 建筑物face
 */
var CmgBuildFace = function (_Feature) {
    _inherits(CmgBuildFace, _Feature);

    function CmgBuildFace() {
        _classCallCheck(this, CmgBuildFace);

        return _possibleConstructorReturn(this, (CmgBuildFace.__proto__ || Object.getPrototypeOf(CmgBuildFace)).apply(this, arguments));
    }

    _createClass(CmgBuildFace, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.pid = data.pid;
            this.buildingPid = data.buildingPid;
            this.massing = data.massing;
            this.height = data.height;
            this.heightAcuracy = data.heightAcuracy;
            this.heightSource = data.heightSource;
            this.dataSource = data.dataSource;
            this.wallMaterial = data.wallMaterial;
            this.geometry = data.geometry;
            this.area = data.area || 0;
            this.perimeter = data.perimeter || 0;
            this.meshId = data.meshId || 0;
            this.rowId = data.rowId || null;
            this.geoLiveType = data.geoLiveType;
            this.createTime = data.createTime || null;

            if (typeof data.editFlag !== 'undefined') {
                this.editFlag = data.editFlag;
            } else {
                this.editFlag = 1;
            }

            this.tenants = [];
            if (data.tenants) {
                for (var i = 0, len = data.tenants.length; i < len; i++) {
                    this.tenants.push(new FM.dataApi.CmgBuildFaceTenant(data.tenants[i]));
                }
            }

            this.topos = [];
            if (data.topos) {
                for (var j = 0, lenTops = data.topos.length; j < lenTops; j++) {
                    this.topos.push(new FM.dataApi.CmgBuildFaceTopo(data.topos[j]));
                }
            }
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};

            data.pid = this.pid;
            data.buildingPid = this.buildingPid;
            data.massing = this.massing;
            data.height = this.height;
            data.heightAcuracy = this.heightAcuracy;
            data.heightSource = this.heightSource;
            data.dataSource = this.dataSource;
            data.wallMaterial = this.wallMaterial;
            data.geometry = this.geometry;
            data.area = this.area;
            data.perimeter = this.perimeter;
            data.meshId = this.meshId;
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            data.createTime = this.createTime;

            data.tenants = [];
            if (this.tenants) {
                for (var i = 0, len = this.tenants.length; i < len; i++) {
                    data.tenants.push(this.tenants[i].getIntegrate());
                }
            }

            return data;
        }
        /**
         * 模型转换函数，获取的数据可能是片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            return this.getIntegrate();
        }
    }]);

    return CmgBuildFace;
}(_Feature3.default);

exports.default = CmgBuildFace;

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 建筑物租户信息
 */
var CmgBuildFaceTenant = function (_Feature) {
  _inherits(CmgBuildFaceTenant, _Feature);

  function CmgBuildFaceTenant() {
    _classCallCheck(this, CmgBuildFaceTenant);

    return _possibleConstructorReturn(this, (CmgBuildFaceTenant.__proto__ || Object.getPrototypeOf(CmgBuildFaceTenant)).apply(this, arguments));
  }

  _createClass(CmgBuildFaceTenant, [{
    key: 'setAttributes',

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data - 接口返回的数据
     * @return {undefined}
     */
    value: function setAttributes(data) {
      this.facePid = data.facePid;
      this.poiPid = data.poiPid;
      this.flag = data.flag;
      this.tel = data.tel;
      this.x = data.x;
      this.y = data.y;
      this.name = data.name || '';
      this.floor = data.floor;
      this.srcFlag = data.srcFlag || 0;
    }
    /**
     * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
     * @return {object} 前端传递给服务的参数数据
     */

  }, {
    key: 'getIntegrate',
    value: function getIntegrate() {
      var data = {};

      data.facePid = this.facePid;
      data.poiPid = this.poiPid;
      data.flag = this.flag;
      data.tel = this.tel;
      data.x = this.x;
      data.y = this.y;
      data.name = this.name;
      data.floor = this.floor;
      data.srcFlag = this.srcFlag;
      data.rowId = this.rowId;

      return data;
    }
    /**
     * 模型转换函数，获取的数据可能是片段
     * @return {object} 格式化后的片段数据
     */

  }, {
    key: 'getSnapShot',
    value: function getSnapShot() {
      return this.getIntegrate();
    }
  }]);

  return CmgBuildFaceTenant;
}(_Feature3.default);

exports.default = CmgBuildFaceTenant;

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 建筑物面的拓扑关系
 */
var CmgBuildFaceTopo = function (_Feature) {
  _inherits(CmgBuildFaceTopo, _Feature);

  function CmgBuildFaceTopo() {
    _classCallCheck(this, CmgBuildFaceTopo);

    return _possibleConstructorReturn(this, (CmgBuildFaceTopo.__proto__ || Object.getPrototypeOf(CmgBuildFaceTopo)).apply(this, arguments));
  }

  _createClass(CmgBuildFaceTopo, [{
    key: 'setAttributes',

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data - 接口返回的数据
     * @return {undefined}
     */
    value: function setAttributes(data) {
      this.facePid = data.facePid;
      this.linkPid = data.linkPid;
      this.seqNum = data.seqNum;
      this.rowId = data.rowId || null;
    }
    /**
     * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
     * @return {object} 前端传递给服务的参数数据
     */

  }, {
    key: 'getIntegrate',
    value: function getIntegrate() {
      var data = {};

      data.facePid = this.facePid;
      data.linkPid = this.linkPid;
      data.seqNum = this.seqNum;
      data.rowId = this.rowId;

      return data;
    }
    /**
     * 模型转换函数，获取的数据可能是片段
     * @return {object} 格式化后的片段数据
     */

  }, {
    key: 'getSnapShot',
    value: function getSnapShot() {
      return this.getIntegrate();
    }
  }]);

  return CmgBuildFaceTopo;
}(_Feature3.default);

exports.default = CmgBuildFaceTopo;

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 建筑物要素
 */
var CmgBuilding = function (_Feature) {
    _inherits(CmgBuilding, _Feature);

    function CmgBuilding() {
        _classCallCheck(this, CmgBuilding);

        return _possibleConstructorReturn(this, (CmgBuilding.__proto__ || Object.getPrototypeOf(CmgBuilding)).apply(this, arguments));
    }

    _createClass(CmgBuilding, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'CMGBUILDING';
            this.pid = data.pid;
            this.kind = data.kind || '';
            this.names = [];
            if (data.names && data.names.length > 0) {
                for (var i = 0, len = data.names.length; i < len; i++) {
                    var name = new FM.dataApi.CmgBuildingName(data.names[i]);
                    this.names.push(name);
                }
            }

            this.pois = [];

            this.build3dicons = [];
            if (data.build3dicons && data.build3dicons.length > 0) {
                for (var j = 0, leng = data.build3dicons.length; j < leng; j++) {
                    var build3dicon = new FM.dataApi.CmgBuilding3DIcon(data.build3dicons[j]);
                    this.build3dicons.push(build3dicon);
                }
            }
            this.build3dmodels = [];
            if (data.build3dmodels && data.build3dmodels.length > 0) {
                for (var z = 0, length = data.build3dmodels.length; z < length; z++) {
                    var build3dModel = new FM.dataApi.CmgBuilding3DModel(data.build3dmodels[z]);
                    this.build3dmodels.push(build3dModel);
                }
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.kind = this.kind;

            var names = [];
            for (var i = 0, len = this.names.length; i < len; i++) {
                names.push(this.names[i].getIntegrate());
            }
            data.names = names;

            data.pois = [];

            var build3dicons = [];
            for (var j = 0, leng = this.build3dicons.length; j < leng; j++) {
                build3dicons.push(this.build3dicons[j].getIntegrate());
            }
            data.build3dicons = build3dicons;

            var build3dmodels = [];
            for (var z = 0, length = this.build3dmodels.length; z < length; z++) {
                build3dmodels.push(this.build3dmodels[z].getIntegrate());
            }
            data.build3dmodels = build3dmodels;

            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据可能是片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.kind = this.kind;

            var names = [];
            for (var i = 0, len = this.names.length; i < len; i++) {
                names.push(this.names[i].getIntegrate());
            }
            data.names = names;

            data.pois = [];

            var build3dicons = [];
            for (var j = 0, leng = this.build3dicons.length; j < leng; j++) {
                build3dicons.push(this.build3dicons[j].getIntegrate());
            }
            data.build3dicons = build3dicons;

            var build3dmodels = [];
            for (var z = 0, length = this.build3dmodels.length; z < length; z++) {
                build3dmodels.push(this.build3dmodels[z].getIntegrate());
            }
            data.build3dmodels = build3dmodels;

            data.rowId = this.rowId;
            return data;
        }
        /**
         * 前端校验
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            var _self = this;
            var nameGroup = [];
            this.names.forEach(function (item) {
                if (!nameGroup[item.nameGroupid - 1]) {
                    nameGroup[item.nameGroupid - 1] = [];
                }
                nameGroup[item.nameGroupid - 1].push(item);
            });

            // 判断多音字是否进行了选择
            nameGroup.forEach(function (item, outerIndex) {
                for (var i = 0; i < item.length; i++) {
                    if (item[i].langCode === 'CHI' || item.langCode === 'CHT') {
                        if (item[i].fullNamePhoneticArr.length) {
                            for (var j = 0; j < item[i].fullNamePhoneticArr.length; j++) {
                                if (item[i].fullNamePhoneticArr[j].length > 1) {
                                    _self._pushError('多音字检查', '全称发音多音字未选择');
                                    break;
                                }
                            }
                        }
                        if (item[i].baseNamePhoneticArr.length) {
                            for (var q = 0; q < item[i].baseNamePhoneticArr.length; q++) {
                                if (item[i].baseNamePhoneticArr[q].length > 1) {
                                    _self._pushError('多音字检查', '基本名发音多音字未选择');
                                    break;
                                }
                            }
                        }
                        if (item[i].buildNumPhoneticArr.length) {
                            for (var z = 0; z < item[i].buildNumPhoneticArr.length; z++) {
                                if (item[i].buildNumPhoneticArr[z].length > 1) {
                                    _self._pushError('多音字检查', '楼号发音多音字未选择');
                                    break;
                                }
                            }
                        }
                    }
                }
            });
        }
    }]);

    return CmgBuilding;
}(_Feature3.default);

exports.default = CmgBuilding;

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 建筑物的 3DLandMark 图标
 */
var CmgBuilding3DIcon = function (_Feature) {
    _inherits(CmgBuilding3DIcon, _Feature);

    function CmgBuilding3DIcon() {
        _classCallCheck(this, CmgBuilding3DIcon);

        return _possibleConstructorReturn(this, (CmgBuilding3DIcon.__proto__ || Object.getPrototypeOf(CmgBuilding3DIcon)).apply(this, arguments));
    }

    _createClass(CmgBuilding3DIcon, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'CMGBUILDING3DICON';
            this.buildingPid = data.buildingPid;
            this.width = data.width || 64;
            this.height = data.height || 64;
            this.iconName = data.iconName;
            this.alphaName = data.alphaName;
            this.rowId = data.rowId || '';
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.buildingPid = this.buildingPid;
            data.width = this.width;
            data.height = this.height;
            data.iconName = this.iconName;
            data.alphaName = this.alphaName;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据可能是片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.buildingPid = this.buildingPid;
            data.width = this.width;
            data.height = this.height;
            data.iconName = this.iconName;
            data.alphaName = this.alphaName;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return CmgBuilding3DIcon;
}(_Feature3.default);

exports.default = CmgBuilding3DIcon;

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 建筑物的 3DLandMark 模型
 */
var CmgBuilding3DModel = function (_Feature) {
    _inherits(CmgBuilding3DModel, _Feature);

    function CmgBuilding3DModel() {
        _classCallCheck(this, CmgBuilding3DModel);

        return _possibleConstructorReturn(this, (CmgBuilding3DModel.__proto__ || Object.getPrototypeOf(CmgBuilding3DModel)).apply(this, arguments));
    }

    _createClass(CmgBuilding3DModel, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'CMGBUILDING3DMODEL';
            this.buildingPid = data.buildingPid;
            // this.modelId = data.modelId;
            this.pid = data.pid;
            this.resolution = data.resolution || 0;
            this.modelName = data.modelName || '';
            this.materialName = data.materialName || '';
            this.textureName = data.textureName || '';
            this.rowId = data.rowId || '';
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.buildingPid = this.buildingPid;
            // data.modelId = this.modelId;
            data.pid = this.pid;
            data.resolution = this.resolution;
            data.modelName = this.modelName;
            data.materialName = this.materialName;
            data.textureName = this.textureName;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据可能是片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.buildingPid = this.buildingPid;
            // data.modelId = this.modelId;
            data.pid = this.pid;
            data.resolution = this.resolution;
            data.modelName = this.modelName;
            data.materialName = this.materialName;
            data.textureName = this.textureName;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return CmgBuilding3DModel;
}(_Feature3.default);

exports.default = CmgBuilding3DModel;

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 建筑物名称
 */
var CmgBuildingName = function (_Feature) {
    _inherits(CmgBuildingName, _Feature);

    function CmgBuildingName() {
        _classCallCheck(this, CmgBuildingName);

        return _possibleConstructorReturn(this, (CmgBuildingName.__proto__ || Object.getPrototypeOf(CmgBuildingName)).apply(this, arguments));
    }

    _createClass(CmgBuildingName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'CMGBUILDINGNAME';
            this.buildingPid = data.buildingPid;
            this.pid = data.pid;
            this.nameGroupid = data.nameGroupid || 1;
            this.langCode = data.langCode || 'CHI';
            this.fullName = data.fullName || '';
            this.baseName = data.baseName || '';
            this.buildNumber = data.buildNumber;
            this.fullNamePhonetic = data.fullNamePhonetic;
            this.fullNamePhoneticArr = [];
            if (data.fullNamePhonetic) {
                this.fullNamePhoneticArr.push(data.fullNamePhonetic.split(';'));
            }
            this.baseNamePhonetic = data.baseNamePhonetic;
            this.baseNamePhoneticArr = [];
            if (data.baseNamePhonetic) {
                this.baseNamePhoneticArr.push(data.baseNamePhonetic.split(';'));
            }
            this.buildNumPhonetic = data.buildNumPhonetic;
            this.buildNumPhoneticArr = [];
            if (data.buildNumPhonetic) {
                this.buildNumPhoneticArr.push(data.buildNumPhonetic.split(';'));
            }
            this.srcFlag = data.srcFlag || 0;
            this.rowId = data.rowId || '';
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.buildingPid = this.buildingPid;
            data.pid = this.pid;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.fullName = this.fullName;
            data.baseName = this.baseName;
            data.buildNumber = this.buildNumber;
            // data.fullNamePhonetic = this.fullNamePhonetic;
            data.fullNamePhonetic = '';
            if (this.fullNamePhoneticArr.length) {
                for (var i = 0; i < this.fullNamePhoneticArr.length; i++) {
                    data.fullNamePhonetic += this.fullNamePhoneticArr[i].join(' ') + ' ';
                }
                data.fullNamePhonetic = data.fullNamePhonetic.trim();
            }
            // data.baseNamePhonetic = this.baseNamePhonetic;
            data.baseNamePhonetic = '';
            if (this.baseNamePhoneticArr.length) {
                for (var j = 0; j < this.baseNamePhoneticArr.length; j++) {
                    data.baseNamePhonetic += this.baseNamePhoneticArr[j].join(' ') + ' ';
                }
                data.baseNamePhonetic = data.baseNamePhonetic.trim();
            }
            // data.buildNumPhonetic = this.buildNumPhonetic;
            data.buildNumPhonetic = '';
            if (this.buildNumPhoneticArr.length) {
                for (var z = 0; z < this.buildNumPhoneticArr.length; z++) {
                    data.buildNumPhonetic += this.buildNumPhoneticArr[z].join(' ') + ' ';
                }
                data.buildNumPhonetic = data.buildNumPhonetic.trim();
            }
            data.srcFlag = this.srcFlag;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据可能是片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.buildingPid = this.buildingPid;
            data.pid = this.pid;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.fullName = this.fullName;
            data.baseName = this.baseName;
            data.buildNumber = this.buildNumber;
            data.fullNamePhonetic = this.fullNamePhonetic;
            data.baseNamePhonetic = this.baseNamePhonetic;
            data.buildNumPhonetic = this.buildNumPhonetic;
            data.srcFlag = this.srcFlag;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return CmgBuildingName;
}(_Feature3.default);

exports.default = CmgBuildingName;

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 建筑物与 POI 关系
 */
var CmgBuildingPoi = function (_Feature) {
    _inherits(CmgBuildingPoi, _Feature);

    function CmgBuildingPoi() {
        _classCallCheck(this, CmgBuildingPoi);

        return _possibleConstructorReturn(this, (CmgBuildingPoi.__proto__ || Object.getPrototypeOf(CmgBuildingPoi)).apply(this, arguments));
    }

    _createClass(CmgBuildingPoi, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'CMGBUILDINGPOI';
            this.buildingPid = data.buildingPid;
            this.poiPid = data.poiPid;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.buildingPid = this.buildingPid;
            data.poiPid = this.poiPid;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.buildingPid = this.buildingPid;
            data.poiPid = this.poiPid;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return CmgBuildingPoi;
}(_Feature3.default);

exports.default = CmgBuildingPoi;

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 建筑物 LINK
 */
var CmgBuildLink = function (_Feature) {
    _inherits(CmgBuildLink, _Feature);

    function CmgBuildLink() {
        _classCallCheck(this, CmgBuildLink);

        return _possibleConstructorReturn(this, (CmgBuildLink.__proto__ || Object.getPrototypeOf(CmgBuildLink)).apply(this, arguments));
    }

    _createClass(CmgBuildLink, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = data.geoLiveType;
            this.pid = data.pid;
            this.sNodePid = data.sNodePid;
            this.eNodePid = data.eNodePid;
            this.kind = data.kind;
            this.geometry = data.geometry;
            this.length = data.length || 0;
            this.rowId = data.rowId || null;

            if (typeof data.editFlag !== 'undefined') {
                this.editFlag = data.editFlag;
            } else {
                this.editFlag = 1;
            }

            var str = [];
            for (var j = 0; j < data.meshes.length; j++) {
                str.push(data.meshes[j].meshId);
            }
            this.meshId = str.join(',');
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};

            data.geoLiveType = this.geoLiveType;
            data.pid = this.pid;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            data.kind = this.kind;
            data.geometry = this.geometry;
            data.length = this.length;
            data.rowId = this.rowId;
            data.editFlag = this.editFlag;
            data.meshId = this.meshId;

            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            return this.getIntegrate();
        }
    }]);

    return CmgBuildLink;
}(_Feature3.default);

exports.default = CmgBuildLink;

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 建筑物 NODE
 */
var CmgBuildNode = function (_Feature) {
    _inherits(CmgBuildNode, _Feature);

    function CmgBuildNode() {
        _classCallCheck(this, CmgBuildNode);

        return _possibleConstructorReturn(this, (CmgBuildNode.__proto__ || Object.getPrototypeOf(CmgBuildNode)).apply(this, arguments));
    }

    _createClass(CmgBuildNode, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.pid = data.pid;
            this.form = data.form;
            this.geometry = data.geometry;
            this.geoLiveType = data.geoLiveType;
            this.links = data.links || [];
            this.rowId = data.rowId || null;

            if (typeof data.editFlag !== 'undefined') {
                this.editFlag = data.editFlag;
            } else {
                this.editFlag = 1;
            }

            var str = [];
            for (var j = 0; j < data.meshes.length; j++) {
                str.push(data.meshes[j].meshId);
            }
            this.meshId = str.join(',');
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};

            data.pid = this.pid;
            data.form = this.form;
            data.geometry = this.geometry;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            data.editFlag = this.editFlag;
            data.meshId = this.meshId;

            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            return this.getIntegrate();
        }
    }]);

    return CmgBuildNode;
}(_Feature3.default);

exports.default = CmgBuildNode;

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 土地覆盖面
 */
var LcFace = function (_Feature) {
    _inherits(LcFace, _Feature);

    function LcFace() {
        _classCallCheck(this, LcFace);

        return _possibleConstructorReturn(this, (LcFace.__proto__ || Object.getPrototypeOf(LcFace)).apply(this, arguments));
    }

    _createClass(LcFace, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'LCFACE';
            this.pid = data.pid;
            this.featurePid = data.featurePid || 0;
            this.geometry = data.geometry;
            this.meshId = data.meshId || 0;
            this.kind = data.kind || 0;
            this.form = data.form || 0;
            this.displayClass = data.displayClass || 0;
            this.area = data.area || 0;
            this.perimeter = data.perimeter || 0;
            this.scale = data.scale || 0;
            this.detailFlag = data.detailFlag || 0;
            this.names = [];
            if (data.names) {
                for (var i = 0, len = data.names.length; i < len; i++) {
                    this.names.push(new FM.dataApi.LcFaceName(data.names[i]));
                }
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.featureId = this.featurePid;
            data.geometry = this.geometry;
            data.meshId = this.meshId;
            data.kind = this.kind;
            data.form = this.form;
            data.displayClass = this.displayClass;
            data.area = this.area;
            data.perimeter = this.perimeter;
            data.scale = this.scale;
            data.detailFlag = this.detailFlag;
            data.names = [];
            if (this.names) {
                for (var i = 0, len = this.names.length; i < len; i++) {
                    data.names.push(this.names[i].getIntegrate());
                }
            }
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.featureId = this.featureId;
            data.geometry = this.geometry;
            data.area = this.area;
            data.perimeter = this.perimeter;
            data.meshId = this.meshId;
            data.geoLiveType = this.geoLiveType;
            data.names = [];
            if (this.names) {
                for (var i = 0, len = this.names.length; i < len; i++) {
                    data.names.push(this.names[i].getIntegrate());
                }
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 前端校验
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            var _self = this;
            if (this.kind === 5 && !this.names.length) {
                this._pushError('GLM51047', '港湾种别的Face，名称不能为空');
            }
            if (this.kind === 12 && !this.names.length) {
                this._pushError('GLM51051', '高尔夫种别的Face，名称不能为空');
            }
            if (this.kind === 11 && !this.names.length) {
                this._pushError('GLM51050', '公园种别的Face，名称不能为空');
            }
            if (this.kind === 1 && !this.names.length) {
                this._pushError('GLM51043', '海域种别的Face，名称不能为空');
            }
            if (this.kind === 13 && !this.names.length) {
                this._pushError('GLM51052', '滑雪场种别的Face，名称不能为空');
            }
            if (this.kind === 4 && !this.names.length) {
                this._pushError('GLM51046', '水库种别的Face，名称不能为空');
            }
            if (this.kind === 8 && !this.names.length) {
                this._pushError('GLM51007', '水系假象线种别的Face，名称不能为空');
            }
            if ([1, 2, 3, 4, 5].indexOf(this.kind) != -1 && this.displayClass == 0) {
                this._pushError('PROPERTY_CHECK_WATERFACE_SHOWLEVEL', '土地覆盖中水系类面的显示等级值只能为1,2,3,4,5,6,7,8');
            }
            // CHECK_FACE_NAME1
            this.names.forEach(function (item) {
                if (!item.phonetic && item.name && (item.langCode === 'CHI' || item.langCode === 'CHT')) {
                    _self._pushError('CHECK_FACE_NAME1', '名称内容有值，名称发音无值');
                }
            });
            // GLM51091
            this.names.forEach(function (item) {
                if (item.phonetic && !item.name && (item.langCode === 'CHI' || item.langCode === 'CHT')) {
                    _self._pushError('GLM51091', '名称发音有值，名称内容无值');
                }
            });
            // PROPERTY_CHECK_WATERFACE_SHOWLEVEL;
            if ([1, 2, 3, 4, 5, 6].indexOf(this.kind) != -1 && this.displayClass === 0) {
                _self._pushError('GLM51091', '土地覆盖中水系类面的显示等级值只能为1,2,3,4,5,6,7,8');
            }

            // CHECK_FACE_NAME3
            var nameGroup = [];
            var nameGroupinitArr = [];
            this.names.forEach(function (item) {
                if (!nameGroup[item.nameGroupid - 1]) {
                    nameGroup[item.nameGroupid - 1] = [];
                }
                nameGroup[item.nameGroupid - 1].push(item);
            });

            nameGroup.forEach(function (item, outerIndex) {
                nameGroupinitArr[outerIndex] = [];
                for (var i = 0; i < item.length; i++) {
                    if (item[i].langCode === 'ENG') {
                        nameGroupinitArr[outerIndex].push(item[i].langCode);
                    }
                    if (item[i].langCode === 'CHI' || item.langCode === 'CHT') {
                        nameGroupinitArr[outerIndex].push(item[i].langCode);
                    }
                }
            });

            nameGroup.forEach(function (item, index) {
                if (nameGroupinitArr[index].length === 2) {
                    var chi = false;
                    var eng = false;
                    item.forEach(function (innerItem) {
                        if (innerItem.langCode === 'ENG' && innerItem.name) {
                            eng = true;
                        } else if (innerItem.langCode === 'ENG' && !innerItem.name) {
                            eng = false;
                        }
                        if (innerItem.langCode === 'CHI' && innerItem.name) {
                            chi = true;
                        } else if (innerItem.langCode === 'CHI' && !innerItem.name) {
                            chi = false;
                        }
                    });
                    if (eng && !chi) {
                        _self._pushError('CHECK_FACE_NAME3', '组' + (index + 1) + '英文名称有值，中文名称无值');
                    }
                    if (!eng && !chi) {
                        _self._pushError('CHECK_FACE_NAME4', '组' + (index + 1) + '中文和英文名称不能同时为空');
                    }
                }
            });

            // 判断多音字是否进行了选择
            nameGroup.forEach(function (item, outerIndex) {
                nameGroupinitArr[outerIndex] = [];
                for (var i = 0; i < item.length; i++) {
                    if (item[i].langCode === 'CHI' || item.langCode === 'CHT') {
                        if (item[i].phoneticArr.length) {
                            for (var j = 0; j < item[i].phoneticArr.length; j++) {
                                if (item[i].phoneticArr[j].length > 1) {
                                    _self._pushError('多音字检查', '请选择多音字');
                                    break;
                                }
                            }
                        }
                    }
                }
            });
        }
    }]);

    return LcFace;
}(_Feature3.default);

exports.default = LcFace;

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 土地覆盖面名称
 */
var LcFaceName = function (_Feature) {
    _inherits(LcFaceName, _Feature);

    function LcFaceName() {
        _classCallCheck(this, LcFaceName);

        return _possibleConstructorReturn(this, (LcFaceName.__proto__ || Object.getPrototypeOf(LcFaceName)).apply(this, arguments));
    }

    _createClass(LcFaceName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'LCFACENAME';
            this.pid = data.pid || 0;
            this.nameGroupid = data.nameGroupid || 1;
            this.langCode = data.langCode || 'CHI';
            this.name = data.name || '';
            this.phonetic = data.phonetic || '';
            this.phoneticArr = [];
            if (data.phonetic) {
                this.phoneticArr.push(data.phonetic.split(';'));
            }
            this.srcFlag = data.srcFlag || 0;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.srcFlag = this.srcFlag;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.nameGroupId = this.nameGroupId;
            data.langCode = this.langCode;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.srcFlag = this.srcFlag;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return LcFaceName;
}(_Feature3.default);

exports.default = LcFaceName;

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 土地覆盖link
 */
var LcLink = function (_Feature) {
    _inherits(LcLink, _Feature);

    function LcLink() {
        _classCallCheck(this, LcLink);

        return _possibleConstructorReturn(this, (LcLink.__proto__ || Object.getPrototypeOf(LcLink)).apply(this, arguments));
    }

    _createClass(LcLink, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'LCLINK';
            this.pid = data.pid;
            this.sNodePid = data.sNodePid;
            this.eNodePid = data.eNodePid;
            this.geometry = data.geometry;
            this.length = data.length || 0;
            this.kinds = [];
            if (data.kinds.length) {
                for (var i = 0, len = data.kinds.length; i < len; i++) {
                    this.kinds.push(new FM.dataApi.LcLinkKind(data.kinds[i]));
                }
            }
            // this.editFlag = data.editFlag || 1;
            if (typeof data.editFlag !== 'undefined') {
                this.editFlag = data.editFlag;
            } else {
                this.editFlag = 1;
            }
            var str = [];
            for (var j = 0; j < data.meshes.length; j++) {
                str.push(data.meshes[j].meshId);
            }
            this.meshId = str.join(',');
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            data.geometry = this.geometry;
            data.length = this.length;
            // data.geoLiveType = this.geoLiveType;
            data.kinds = [];
            if (this.kinds) {
                for (var i = 0, len = this.kinds.length; i < len; i++) {
                    data.kinds.push(this.kinds[i].getIntegrate());
                }
            }
            data.editFlag = this.editFlag;
            data.meshId = this.meshId;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            data.geometry = this.geometry;
            data.length = this.length;
            data.geoLiveType = this.geoLiveType;
            data.kinds = [];
            if (this.kinds) {
                for (var i = 0, len = this.kinds.length; i < len; i++) {
                    data.kinds.push(this.kinds[i].getIntegrate());
                }
            }
            data.editFlag = this.editFlag;
            data.meshId = this.meshId;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return LcLink;
}(_Feature3.default);

exports.default = LcLink;

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 土地覆盖link种别
 */
var LcLinkKind = function (_Feature) {
    _inherits(LcLinkKind, _Feature);

    function LcLinkKind() {
        _classCallCheck(this, LcLinkKind);

        return _possibleConstructorReturn(this, (LcLinkKind.__proto__ || Object.getPrototypeOf(LcLinkKind)).apply(this, arguments));
    }

    _createClass(LcLinkKind, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'LCLINKKIND';
            this.linkPid = data.linkPid;
            this.kind = data.kind || 0;
            this.form = data.form || 0;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.kind = this.kind;
            data.form = this.form;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return LcLinkKind;
}(_Feature3.default);

exports.default = LcLinkKind;

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 土地覆盖node
 */
var LcNode = function (_Feature) {
    _inherits(LcNode, _Feature);

    function LcNode() {
        _classCallCheck(this, LcNode);

        return _possibleConstructorReturn(this, (LcNode.__proto__ || Object.getPrototypeOf(LcNode)).apply(this, arguments));
    }

    _createClass(LcNode, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'LCNODE';
            this.pid = data.pid;
            this.form = data.form;
            this.geometry = data.geometry;
            this.meshes = data.meshes;
            var str = [];
            for (var i = 0; i < data.meshes.length; i++) {
                str.push(data.meshes[i].meshId);
            }
            this.meshId = str.join(',');
            this.links = data.links || [];
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.form = this.form;
            data.meshId = this.meshId;
            data.geometry = this.geometry;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.form = this.form;
            data.meshId = this.meshId;
            data.geometry = this.geometry;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return LcNode;
}(_Feature3.default);

exports.default = LcNode;

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 土地利用面
 */
var LuFace = function (_Feature) {
    _inherits(LuFace, _Feature);

    function LuFace() {
        _classCallCheck(this, LuFace);

        return _possibleConstructorReturn(this, (LuFace.__proto__ || Object.getPrototypeOf(LuFace)).apply(this, arguments));
    }

    _createClass(LuFace, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'LUFACE';
            this.pid = data.pid;
            this.featureId = data.featureId || 0;
            this.geometry = data.geometry;
            this.kind = data.kind || 0;
            this.area = data.area || 0;
            this.perimeter = data.perimeter || 0;
            this.meshId = data.meshId || 0;
            this.faceNames = [];
            if (data.faceNames) {
                for (var i = 0, len = data.faceNames.length; i < len; i++) {
                    this.faceNames.push(new FM.dataApi.LuFaceName(data.faceNames[i]));
                }
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.featureId = this.featureId;
            data.geometry = this.geometry;
            data.kind = this.kind;
            data.area = this.area;
            data.perimeter = this.perimeter;
            data.meshId = this.meshId;
            // data.geoLiveType = this.geoLiveType;
            data.faceNames = [];
            if (this.faceNames) {
                for (var i = 0, len = this.faceNames.length; i < len; i++) {
                    data.faceNames.push(this.faceNames[i].getIntegrate());
                }
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.featureId = this.featureId;
            data.geometry = this.geometry;
            data.area = this.area;
            data.perimeter = this.perimeter;
            data.meshId = this.meshId;
            data.geoLiveType = this.geoLiveType;
            data.faceNames = [];
            if (this.names) {
                for (var i = 0, len = this.faceNames.length; i < len; i++) {
                    data.faceNames.push(this.faceNames[i].getIntegrate());
                }
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 前端校验
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            var _self = this;
            if (this.kind === 11 && !this.faceNames.length) {
                this._pushError('GLM52028', '机场种别的LuFace，名称不能为空');
            }
            if (this.kind === 12 && this.faceNames.length) {
                this._pushError('GLM52029', '机场跑到种别的LuFace，名称必须为空');
            }

            // CHECK_FACE_NAME1
            this.faceNames.forEach(function (item) {
                if (!item.phonetic && item.name && (item.langCode === 'CHI' || item.langCode === 'CHT')) {
                    _self._pushError('CHECK_FACE_NAME1', '名称内容有值，名称发音无值');
                }
            });
            // GLM51091
            this.faceNames.forEach(function (item) {
                if (item.phonetic && !item.name && (item.langCode === 'CHI' || item.langCode === 'CHT')) {
                    _self._pushError('GLM51091', '名称发音有值，名称内容无值');
                }
            });

            // CHECK_FACE_NAME3
            var nameGroup = [];
            var nameGroupinitArr = [];
            this.faceNames.forEach(function (item) {
                if (!nameGroup[item.nameGroupid - 1]) {
                    nameGroup[item.nameGroupid - 1] = [];
                }
                nameGroup[item.nameGroupid - 1].push(item);
            });

            nameGroup.forEach(function (item, outerIndex) {
                nameGroupinitArr[outerIndex] = [];
                for (var i = 0; i < item.length; i++) {
                    if (item[i].langCode === 'ENG') {
                        nameGroupinitArr[outerIndex].push(item[i].langCode);
                    }
                    if (item[i].langCode === 'CHI' || item.langCode === 'CHT') {
                        nameGroupinitArr[outerIndex].push(item[i].langCode);
                    }
                }
            });

            nameGroup.forEach(function (item, index) {
                if (nameGroupinitArr[index].length === 2) {
                    var chi = false;
                    var eng = false;
                    item.forEach(function (innerItem) {
                        if (innerItem.langCode === 'ENG' && innerItem.name) {
                            eng = true;
                        } else if (innerItem.langCode === 'ENG' && !innerItem.name) {
                            eng = false;
                        }
                        if (innerItem.langCode === 'CHI' && innerItem.name) {
                            chi = true;
                        } else if (innerItem.langCode === 'CHI' && !innerItem.name) {
                            chi = false;
                        }
                    });
                    if (eng && !chi) {
                        _self._pushError('CHECK_FACE_NAME3', '组' + (index + 1) + '英文名称有值，中文名称无值');
                    }
                    if (!eng && !chi) {
                        _self._pushError('CHECK_FACE_NAME4', '组' + (index + 1) + '中文和英文名称不能同时为空');
                    }
                }
            });
            // 判断多音字是否进行了选择
            nameGroup.forEach(function (item, outerIndex) {
                for (var i = 0; i < item.length; i++) {
                    if (item[i].langCode === 'CHI' || item.langCode === 'CHT') {
                        if (item[i].phoneticArr.length) {
                            for (var j = 0; j < item[i].phoneticArr.length; j++) {
                                if (item[i].phoneticArr[j].length > 1) {
                                    _self._pushError('多音字检查', '请选择多音字');
                                    break;
                                }
                            }
                        }
                    }
                }
            });
        }
    }]);

    return LuFace;
}(_Feature3.default);

exports.default = LuFace;

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 土地利用面名称
 */
var LuFaceName = function (_Feature) {
    _inherits(LuFaceName, _Feature);

    function LuFaceName() {
        _classCallCheck(this, LuFaceName);

        return _possibleConstructorReturn(this, (LuFaceName.__proto__ || Object.getPrototypeOf(LuFaceName)).apply(this, arguments));
    }

    _createClass(LuFaceName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'LUFACENAME';
            this.rowId = data.rowId || null;
            this.pid = data.pid;
            this.facePid = data.facePid;
            this.nameGroupid = data.nameGroupid || 1;
            this.langCode = data.langCode || 'CHI';
            this.name = data.name || '';
            this.phonetic = data.phonetic || '';
            this.phoneticArr = [];
            if (data.phonetic) {
                this.phoneticArr.push(data.phonetic.split(';'));
            }
            this.srcFlag = data.srcFlag || 0;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.facePid = this.facePid;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.srcFlag = this.srcFlag;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.facePid = this.facePid;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.srcFlag = this.srcFlag;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return LuFaceName;
}(_Feature3.default);

exports.default = LuFaceName;

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 土地利用link
 */
var LuLink = function (_Feature) {
    _inherits(LuLink, _Feature);

    function LuLink() {
        _classCallCheck(this, LuLink);

        return _possibleConstructorReturn(this, (LuLink.__proto__ || Object.getPrototypeOf(LuLink)).apply(this, arguments));
    }

    _createClass(LuLink, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'LULINK';
            this.pid = data.pid;
            this.rowId = data.rowId || null;
            this.sNodePid = data.sNodePid;
            this.eNodePid = data.eNodePid;
            this.geometry = data.geometry;
            this.length = data.length || 0;
            this.linkKinds = [];
            if (data.linkKinds) {
                for (var i = 0, len = data.linkKinds.length; i < len; i++) {
                    this.linkKinds.push(new FM.dataApi.LuLinkKind(data.linkKinds[i]));
                }
            }
            this.scale = data.scale || 0;
            // this.editFlag = data.editFlag || 1;
            if (typeof data.editFlag !== 'undefined') {
                this.editFlag = data.editFlag;
            } else {
                this.editFlag = 1;
            }
            var str = [];
            for (var j = 0; j < data.meshes.length; j++) {
                str.push(data.meshes[j].meshId);
            }
            this.meshId = str.join(',');
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            data.geometry = this.geometry;
            data.length = this.length;
            data.geoLiveType = this.geoLiveType;
            data.linkKinds = [];
            if (this.linkKinds) {
                for (var i = 0, len = this.linkKinds.length; i < len; i++) {
                    data.linkKinds.push(this.linkKinds[i].getIntegrate());
                }
            }
            data.scale = this.scale;
            data.editFlag = this.editFlag;
            data.meshId = this.meshId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            data.geometry = this.geometry;
            data.geoLiveType = this.geoLiveType;
            data.length = this.length;
            data.linkKinds = [];
            if (this.linkKinds) {
                for (var i = 0, len = this.linkKinds.length; i < len; i++) {
                    data.linkKinds.push(this.linkKinds[i].getIntegrate());
                }
            }
            data.scale = this.scale;
            data.editFlag = this.editFlag;
            data.meshId = this.meshId;
            return data;
        }
    }]);

    return LuLink;
}(_Feature3.default);

exports.default = LuLink;

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 土地利用link种别
 */
var LuLinkKind = function (_Feature) {
    _inherits(LuLinkKind, _Feature);

    function LuLinkKind() {
        _classCallCheck(this, LuLinkKind);

        return _possibleConstructorReturn(this, (LuLinkKind.__proto__ || Object.getPrototypeOf(LuLinkKind)).apply(this, arguments));
    }

    _createClass(LuLinkKind, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'LULINKKIND';
            this.linkPid = data.linkPid;
            this.rowId = data.rowId || null;
            // 需求中默认值为 21，经与玉秀确认按需求来 ，需求号2540
            // this.kind = data.kind || 0;
            if (typeof data.kind !== 'undefined') {
                this.kind = data.kind;
            } else {
                this.kind = 21;
            }
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.kind = this.kind;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return LuLinkKind;
}(_Feature3.default);

exports.default = LuLinkKind;

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 土地利用node
 */
var LuNode = function (_Feature) {
    _inherits(LuNode, _Feature);

    function LuNode() {
        _classCallCheck(this, LuNode);

        return _possibleConstructorReturn(this, (LuNode.__proto__ || Object.getPrototypeOf(LuNode)).apply(this, arguments));
    }

    _createClass(LuNode, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'LUNODE';
            this.pid = data.pid;
            this.form = data.form;
            this.geometry = data.geometry;
            this.meshes = data.meshes;
            var str = [];
            for (var i = 0; i < data.meshes.length; i++) {
                str.push(data.meshes[i].meshId);
            }
            this.meshId = str.join(',');
            this.links = data.links || [];
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.form = this.form;
            data.meshId = this.meshId;
            data.geometry = this.geometry;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.form = this.form;
            data.meshId = this.meshId;
            data.geometry = this.geometry;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return LuNode;
}(_Feature3.default);

exports.default = LuNode;

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 分歧
 */
var RdBranch = function (_Feature) {
    _inherits(RdBranch, _Feature);

    function RdBranch() {
        _classCallCheck(this, RdBranch);

        return _possibleConstructorReturn(this, (RdBranch.__proto__ || Object.getPrototypeOf(RdBranch)).apply(this, arguments));
    }

    _createClass(RdBranch, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.rowId = data.rowId || null;
            this.branchPid = data.pid; // modified by chenx on 20161214: 为了不同分歧类型的高亮
            this.inLinkPid = data.inLinkPid;
            this.nodePid = data.nodePid;
            this.outLinkPid = data.outLinkPid;
            this.relationshipType = data.relationshipType || 1;
            this.realimages = [];
            var i = void 0;
            if (data.realimages.length > 0) {
                for (i = 0; i < data.realimages.length; i++) {
                    var realImage = new FM.dataApi.RdBranchRealImage(data.realimages[i]);
                    this.realimages.push(realImage);
                }
            }

            this.schematics = [];
            if (data.schematics.length > 0) {
                for (i = 0; i < data.schematics.length; i++) {
                    var schemtic = new FM.dataApi.RdBranchSchematic(data.schematics[i]);
                    this.schematics.push(schemtic);
                }
            }

            this.seriesbranches = [];
            if (data.seriesbranches.length > 0) {
                for (i = 0; i < data.seriesbranches.length; i++) {
                    var seriesBranch = new FM.dataApi.RdBranchSeriesBranch(data.seriesbranches[i]);
                    this.seriesbranches.push(seriesBranch);
                }
            }

            this.signasreals = [];
            if (data.signasreals.length > 0) {
                for (i = 0; i < data.signasreals.length; i++) {
                    var signasReal = new FM.dataApi.RdBranchSignAsreal(data.signasreals[i]);
                    this.signasreals.push(signasReal);
                }
            }

            this.signboards = [];
            if (data.signboards.length > 0) {
                for (i = 0; i < data.signboards.length; i++) {
                    var signBoard = new FM.dataApi.RdBranchSignBoard(data.signboards[i]);
                    this.signboards.push(signBoard);
                }
            }

            this.vias = [];
            if (data.vias.length > 0) {
                for (i = 0; i < data.vias.length; i++) {
                    var via = new FM.dataApi.RdBranchVia(data.vias[i]);
                    this.vias.push(via);
                }
            }

            this.details = [];
            if (data.details.length > 0) {
                for (i = 0; i < data.details.length; i++) {
                    var detail = new FM.dataApi.RdBranchDetail(data.details[i]);
                    this.details.push(detail);
                }
            }
            // modified by chenx on 20161214: 为了不同分歧类型的高亮，不同类型的分歧的pid取值不同，与canvasFeature保持一致
            // if (data.branchType) {
            //     this.branchType = data.branchType;
            //     this.pid = data.pid;
            // } else
            if (data.details.length) {
                this.branchType = data.details[0].branchType;
                this.pid = data.details[0].pid;
                switch (this.branchType) {
                    case 0:
                        this.geoLiveType = 'RDHIGHSPEEDBRANCH';
                        break;
                    case 1:
                        this.geoLiveType = 'RDASPECTBRANCH';
                        break;
                    case 2:
                        this.geoLiveType = 'RDICBRANCH';
                        break;
                    case 3:
                        this.geoLiveType = 'RD3DBRANCH';
                        break;
                    case 4:
                        this.geoLiveType = 'RDCOMPLEXSCHEMA';
                        break;
                    default:
                        break;
                }
            } else if (data.realimages.length) {
                this.branchType = 5;
                this.pid = data.realimages[0].rowId;
                this.geoLiveType = 'RDREALIMAGE';
            } else if (data.schematics.length) {
                this.branchType = 8;
                this.pid = data.schematics[0].pid;
                this.geoLiveType = 'RDSCHEMATICBRANCH';
            } else if (data.seriesbranches.length) {
                this.branchType = 7;
                this.pid = data.seriesbranches[0].rowId;
                this.geoLiveType = 'RDSERIESBRANCH';
            } else if (data.signasreals.length) {
                this.branchType = 6;
                this.pid = data.signasreals[0].pid;
                this.geoLiveType = 'RDSIGNASREAL';
            } else if (data.signboards.length) {
                this.branchType = 9;
                this.pid = data.signboards[0].pid;
                this.geoLiveType = 'RDSIGNBOARD';
            }
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.branchPid;
            data.rowId = this.rowId;
            data.inLinkPid = this.inLinkPid;
            data.nodePid = this.nodePid;
            data.outLinkPid = this.outLinkPid;
            data.geoLiveType = this.geoLiveType;
            data.relationshipType = this.relationshipType;
            data.realimages = [];
            var i = void 0;
            for (i = 0; i < this.realimages.length; i++) {
                data.realimages.push(this.realimages[i].getIntegrate());
            }

            data.schematics = [];
            for (i = 0; i < this.schematics.length; i++) {
                data.schematics.push(this.schematics[i].getIntegrate());
            }

            data.seriesbranches = [];
            for (i = 0; i < this.seriesbranches.length; i++) {
                data.seriesbranches.push(this.seriesbranches[i].getIntegrate());
            }

            data.signasreals = [];
            for (i = 0; i < this.signasreals.length; i++) {
                data.signasreals.push(this.signasreals[i].getIntegrate());
            }

            data.signboards = [];
            for (i = 0; i < this.signboards.length; i++) {
                data.signboards.push(this.signboards[i].getIntegrate());
            }

            data.vias = [];
            for (i = 0; i < this.vias.length; i++) {
                data.vias.push(this.vias[i].getIntegrate());
            }

            data.details = [];
            for (i = 0; i < this.details.length; i++) {
                data.details.push(this.details[i].getIntegrate());
            }

            data.branchType = this.branchType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.branchPid;
            data.rowId = this.rowId;
            data.inLinkPid = this.inLinkPid;
            data.nodePid = this.nodePid;
            data.outLinkPid = this.outLinkPid;
            data.relationshipType = this.relationshipType;
            data.realimages = [];
            var i = void 0;
            for (i = 0; i < this.realimages.length; i++) {
                data.realimages.push(this.realimages[i].getIntegrate());
            }

            data.schematics = [];
            for (i = 0; i < this.schematics.length; i++) {
                data.schematics.push(this.schematics[i].getIntegrate());
            }

            data.seriesbranches = [];
            for (i = 0; i < this.seriesbranches.length; i++) {
                data.seriesbranches.push(this.seriesbranches[i].getIntegrate());
            }

            data.signasreals = [];
            for (i = 0; i < this.signasreals.length; i++) {
                data.signasreals.push(this.signasreals[i].getIntegrate());
            }

            data.signboards = [];
            for (i = 0; i < this.signboards.length; i++) {
                data.signboards.push(this.signboards[i].getIntegrate());
            }

            data.vias = [];
            for (i = 0; i < this.vias.length; i++) {
                data.vias.push(this.vias[i].getIntegrate());
            }

            data.details = [];
            for (i = 0; i < this.details.length; i++) {
                data.details.push(this.details[i].getIntegrate());
            }
            data.branchType = this.branchType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 前端校验
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            if (this.signboards.length) {
                for (var i = 0; i < this.signboards.length; i++) {
                    this.signboards[i]._doValidate();
                }
            }
            if (this.details.length > 0) {
                for (var j = 0; j < this.details.length; j++) {
                    if (this.details[j].branchType == 1 || this.details[j].branchType == 2) {
                        this.details[j]._doValidate();
                    }
                }
            }
        }
    }]);

    return RdBranch;
}(_Feature3.default);

exports.default = RdBranch;

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 分歧详细信息
 */
var RdBranchDetail = function (_Feature) {
    _inherits(RdBranchDetail, _Feature);

    function RdBranchDetail() {
        _classCallCheck(this, RdBranchDetail);

        return _possibleConstructorReturn(this, (RdBranchDetail.__proto__ || Object.getPrototypeOf(RdBranchDetail)).apply(this, arguments));
    }

    _createClass(RdBranchDetail, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDBRANCHDETAIL';
            this.pid = data.pid;
            this.rowId = data.rowId || null;
            this.branchPid = data.branchPid;
            this.branchType = data.branchType || 0;
            this.estabType = data.estabType || 0;
            this.exitNum = data.exitNum || '';
            this.guideCode = data.guideCode || 0;
            this.nameKind = data.nameKind || 0;
            this.patternCode = data.patternCode || '';
            this.voiceDir = data.voiceDir || 0;
            this.arrowCode = data.arrowCode || '';
            this.arrowFlag = data.arrowFlag || 0;
            this.names = [];
            for (var i = 0; i < data.names.length; i++) {
                var name = new FM.dataApi.RdBranchName(data.names[i]);
                this.names.push(name);
            }
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.branchPid = this.branchPid;
            data.branchType = this.branchType;
            data.estabType = this.estabType;
            data.exitNum = this.exitNum;
            data.guideCode = this.guideCode;
            data.nameKind = this.nameKind;
            data.patternCode = this.patternCode;
            data.voiceDir = this.voiceDir;
            data.arrowCode = this.arrowCode;
            data.arrowFlag = this.arrowFlag;
            // data.geoLiveType = this.geoLiveType;
            data.names = [];
            for (var i = 0; i < this.names.length; i++) {
                data.names.push(this.names[i].getIntegrate());
            }

            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.branchPid = this.branchPid;
            data.branchType = this.branchType;
            data.estabType = this.estabType;
            data.exitNum = this.exitNum;
            data.guideCode = this.guideCode;
            data.nameKind = this.nameKind;
            data.patternCode = this.patternCode;
            data.voiceDir = this.voiceDir;
            data.arrowCode = this.arrowCode;
            data.arrowFlag = this.arrowFlag;
            data.geoLiveType = this.geoLiveType;
            data.names = [];
            for (var i = 0; i < this.names.length; i++) {
                data.names.push(this.names[i].getIntegrate());
            }

            return data;
        }
        /**
         * 前端校验
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            var _self = this;
            var nameGroup = [];
            this.names.forEach(function (item) {
                if (!nameGroup[item.nameGroupid - 1]) {
                    nameGroup[item.nameGroupid - 1] = [];
                }
                nameGroup[item.nameGroupid - 1].push(item);
            });

            // 判断多音字是否进行了选择
            nameGroup.forEach(function (item, outerIndex) {
                for (var i = 0; i < item.length; i++) {
                    if (item[i].langCode === 'CHI' || item.langCode === 'CHT') {
                        if (item[i].phoneticArr.length) {
                            for (var j = 0; j < item[i].phoneticArr.length; j++) {
                                if (item[i].phoneticArr[j].length > 1) {
                                    _self._pushError('多音字检查', '请选择多音字');
                                    break;
                                }
                            }
                        }
                    }
                }
            });
        }
    }]);

    return RdBranchDetail;
}(_Feature3.default);

exports.default = RdBranchDetail;

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 分歧名称
 */
var RdBranchName = function (_Feature) {
    _inherits(RdBranchName, _Feature);

    function RdBranchName() {
        _classCallCheck(this, RdBranchName);

        return _possibleConstructorReturn(this, (RdBranchName.__proto__ || Object.getPrototypeOf(RdBranchName)).apply(this, arguments));
    }

    _createClass(RdBranchName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDBRANCHNAME';
            this.pid = data.pid || 0;
            this.rowId = data.rowId || null;
            this.seqNum = data.seqNum || 1;
            this.nameGroupid = data.nameGroupid || 1;
            this.detailId = data.detailId;
            this.nameClass = data.nameClass || 0;
            this.langCode = data.langCode || 'CHI';
            this.codeType = data.codeType || 0;
            this.name = data.name || '';
            this.phonetic = data.phonetic || '';
            this.phoneticArr = [];
            if (data.phonetic) {
                this.phoneticArr.push(data.phonetic.split(';'));
            }
            this.srcFlag = data.srcFlag || 0;
            this.voiceFile = data.voiceFile || '';
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.seqNum = this.seqNum;
            data.nameGroupid = this.nameGroupid;
            data.detailId = this.detailId;
            data.nameClass = this.nameClass;
            data.langCode = this.langCode;
            data.codeType = this.codeType;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.srcFlag = this.srcFlag;
            data.voiceFile = this.voiceFile;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.seqNum = this.seqNum;
            data.nameGroupid = this.nameGroupid;
            data.detailId = this.detailId;
            data.nameClass = this.nameClass;
            data.langCode = this.langCode;
            data.codeType = this.codeType;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.srcFlag = this.srcFlag;
            data.voiceFile = this.voiceFile;
            return data;
        }
    }]);

    return RdBranchName;
}(_Feature3.default);

exports.default = RdBranchName;

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 分歧实景图
 */
var RdBranchRealImage = function (_Feature) {
    _inherits(RdBranchRealImage, _Feature);

    function RdBranchRealImage() {
        _classCallCheck(this, RdBranchRealImage);

        return _possibleConstructorReturn(this, (RdBranchRealImage.__proto__ || Object.getPrototypeOf(RdBranchRealImage)).apply(this, arguments));
    }

    _createClass(RdBranchRealImage, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDBRANCHREALIMAGE';
            this.branchPid = data.branchPid;
            this.imageType = data.imageType || 0;
            this.realCode = data.realCode || '';
            this.arrowCode = data.arrowCode || '';
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.branchPid = this.pid;
            data.imageType = this.imageType;
            data.realCode = this.realCode;
            data.arrowCode = this.arrowCode;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.branchPid = this.pid;
            data.imageType = this.imageType;
            data.realCode = this.realCode;
            data.arrowCode = this.arrowCode;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdBranchRealImage;
}(_Feature3.default);

exports.default = RdBranchRealImage;

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 大路口交叉模式图
 */
var RdBranchSchematic = function (_Feature) {
    _inherits(RdBranchSchematic, _Feature);

    function RdBranchSchematic() {
        _classCallCheck(this, RdBranchSchematic);

        return _possibleConstructorReturn(this, (RdBranchSchematic.__proto__ || Object.getPrototypeOf(RdBranchSchematic)).apply(this, arguments));
    }

    _createClass(RdBranchSchematic, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDBRANCHSCHEMATIC';
            this.pid = data.pid;
            this.rowId = data.rowId || null;
            this.schematicCode = data.schematicCode || '';
            this.arrowCode = data.arrowCode || '';
            this.memo = data.memo || '';
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.schematicCode = this.schematicCode;
            data.arrowCode = this.arrowCode;
            data.memo = this.memo;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.schematicCode = this.schematicCode;
            data.arrowCode = this.arrowCode;
            data.memo = this.memo;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdBranchSchematic;
}(_Feature3.default);

exports.default = RdBranchSchematic;

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 连续分歧
 */
var RdBranchSeriesBranch = function (_Feature) {
    _inherits(RdBranchSeriesBranch, _Feature);

    function RdBranchSeriesBranch() {
        _classCallCheck(this, RdBranchSeriesBranch);

        return _possibleConstructorReturn(this, (RdBranchSeriesBranch.__proto__ || Object.getPrototypeOf(RdBranchSeriesBranch)).apply(this, arguments));
    }

    _createClass(RdBranchSeriesBranch, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDBRANCHSERIESBRANCH';
            this.rowId = data.rowId || null;
            this.pid = data.pid;
            this.voiceDir = data.voiceDir || 0;
            this.arrowCode = data.arrowCode || '';
            this.type = data.type || 0;
            this.patternCode = data.patternCode || '';
            this.arrowFlag = data.arrowFlag || 0;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.rowId = this.rowId;
            data.pid = this.pid;
            data.voiceDir = this.voiceDir;
            data.arrowCode = this.arrowCode;
            data.type = this.type;
            data.patternCode = this.patternCode;
            data.arrowFlag = this.arrowFlag;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.rowId = this.rowId;
            data.pid = this.pid;
            data.voiceDir = this.voiceDir;
            data.arrowCode = this.arrowCode;
            data.type = this.type;
            data.patternCode = this.patternCode;
            data.arrowFlag = this.arrowFlag;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdBranchSeriesBranch;
}(_Feature3.default);

exports.default = RdBranchSeriesBranch;

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 实景看板
 */
var RdBranchSignAsreal = function (_Feature) {
    _inherits(RdBranchSignAsreal, _Feature);

    function RdBranchSignAsreal() {
        _classCallCheck(this, RdBranchSignAsreal);

        return _possibleConstructorReturn(this, (RdBranchSignAsreal.__proto__ || Object.getPrototypeOf(RdBranchSignAsreal)).apply(this, arguments));
    }

    _createClass(RdBranchSignAsreal, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDBRANCHSIGNASREAL';
            this.pid = data.pid;
            this.rowId = data.rowId || null;
            this.branchPid = data.branchPid;
            this.arrowCode = data.arrowCode || '';
            this.memo = data.memo || '';
            this.svgfileCode = data.svgfileCode || '';
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.branchPid = this.branchPid;
            data.arrowCode = this.arrowCode;
            data.memo = this.memo;
            data.svgfileCode = this.svgfileCode;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.branchPid = this.branchPid;
            data.arrowCode = this.arrowCode;
            data.memo = this.memo;
            data.svgfileCode = this.svgfileCode;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdBranchSignAsreal;
}(_Feature3.default);

exports.default = RdBranchSignAsreal;

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 方向看板
 */
var RdBranchSignBoard = function (_Feature) {
    _inherits(RdBranchSignBoard, _Feature);

    function RdBranchSignBoard() {
        _classCallCheck(this, RdBranchSignBoard);

        return _possibleConstructorReturn(this, (RdBranchSignBoard.__proto__ || Object.getPrototypeOf(RdBranchSignBoard)).apply(this, arguments));
    }

    _createClass(RdBranchSignBoard, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDBRANCHSIGNBOARD';
            this.pid = data.pid;
            this.rowId = data.rowId || null;
            this.branchPid = data.branchPid;
            this.backimageCode = data.backimageCode || '';
            this.arrowCode = data.arrowCode || '';
            this.names = [];
            for (var i = 0; i < data.names.length; i++) {
                var name = new FM.dataApi.RdBranchSignBoardName(data.names[i]);
                this.names.push(name);
            }
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.branchPid = this.branchPid;
            data.backimageCode = this.backimageCode;
            data.arrowCode = this.arrowCode;
            data.names = [];
            if (this.names.length) {
                for (var i = 0; i < this.names.length; i++) {
                    data.names.push(this.names[i].getIntegrate());
                }
            }
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.branchPid = this.branchPid;
            data.backimageCode = this.backimageCode;
            data.arrowCode = this.arrowCode;
            data.geoLiveType = this.geoLiveType;
            data.names = [];
            for (var i = 0; i < this.names.length; i++) {
                data.names.push(this.names[i].getIntegrate());
            }
            return data;
        }
        /**
         * 前端校验
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            var _self = this;
            var nameGroup = [];
            this.names.forEach(function (item) {
                if (!nameGroup[item.nameGroupid - 1]) {
                    nameGroup[item.nameGroupid - 1] = [];
                }
                nameGroup[item.nameGroupid - 1].push(item);
            });

            // 判断多音字是否进行了选择
            nameGroup.forEach(function (item, outerIndex) {
                for (var i = 0; i < item.length; i++) {
                    if (item[i].langCode === 'CHI' || item.langCode === 'CHT') {
                        if (item[i].phoneticArr.length) {
                            for (var j = 0; j < item[i].phoneticArr.length; j++) {
                                if (item[i].phoneticArr[j].length > 1) {
                                    _self._pushError('多音字检查', '请选择多音字');
                                    break;
                                }
                            }
                        }
                    }
                }
            });
        }
    }]);

    return RdBranchSignBoard;
}(_Feature3.default);

exports.default = RdBranchSignBoard;

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 方向看板名称
 */
var RdBranchSignBoardName = function (_Feature) {
    _inherits(RdBranchSignBoardName, _Feature);

    function RdBranchSignBoardName() {
        _classCallCheck(this, RdBranchSignBoardName);

        return _possibleConstructorReturn(this, (RdBranchSignBoardName.__proto__ || Object.getPrototypeOf(RdBranchSignBoardName)).apply(this, arguments));
    }

    _createClass(RdBranchSignBoardName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDBRANCHSIGNBOARDNAME';
            this.pid = data.pid || 0;
            this.rowId = data.rowId || null;
            this.seqNum = data.seqNum || 1;
            this.nameGroupid = data.nameGroupid || 1;
            this.signboardId = data.signboardId;
            this.nameClass = data.nameClass || 0;
            this.langCode = data.langCode || 'CHI';
            this.codeType = data.codeType || 0;
            this.name = data.name || '';
            this.phonetic = data.phonetic || '';
            this.phoneticArr = [];
            if (data.phonetic) {
                this.phoneticArr.push(data.phonetic.split(';'));
            }
            this.voiceFile = data.voiceFile || '';
            this.srcFlag = data.srcFlag || 0;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.seqNum = this.seqNum;
            data.nameGroupid = this.nameGroupid;
            data.signboardId = this.signboardId;
            data.nameClass = this.nameClass;
            data.langCode = this.langCode;
            data.codeType = this.codeType;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.voiceFile = this.voiceFile;
            data.srcFlag = this.srcFlag;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.seqNum = this.seqNum;
            data.nameGroupid = this.nameGroupid;
            data.signboardId = this.signboardId;
            data.nameClass = this.nameClass;
            data.langCode = this.langCode;
            data.codeType = this.codeType;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.voiceFile = this.voiceFile;
            data.srcFlag = this.srcFlag;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdBranchSignBoardName;
}(_Feature3.default);

exports.default = RdBranchSignBoardName;

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 分歧经过线
 */
var RdBranchVia = function (_Feature) {
    _inherits(RdBranchVia, _Feature);

    function RdBranchVia() {
        _classCallCheck(this, RdBranchVia);

        return _possibleConstructorReturn(this, (RdBranchVia.__proto__ || Object.getPrototypeOf(RdBranchVia)).apply(this, arguments));
    }

    _createClass(RdBranchVia, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDBRANCHVIA';
            this.rowId = data.rowId || null;
            this.groupId = data.groupId || 1;
            this.linkPid = data.linkPid;
            this.seqNum = data.seqNum || 1;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.rowId = this.rowId;
            data.groupId = this.groupId;
            data.linkPid = this.linkPid;
            data.seqNum = this.seqNum;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.rowId = this.rowId;
            data.groupId = this.groupId;
            data.linkPid = this.linkPid;
            data.seqNum = this.seqNum;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdBranchVia;
}(_Feature3.default);

exports.default = RdBranchVia;

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 路口
 */
var RdCross = function (_Feature) {
    _inherits(RdCross, _Feature);

    function RdCross() {
        _classCallCheck(this, RdCross);

        return _possibleConstructorReturn(this, (RdCross.__proto__ || Object.getPrototypeOf(RdCross)).apply(this, arguments));
    }

    _createClass(RdCross, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDCROSS';
            this.pid = data.pid;
            this.type = data.type || 0;
            this.signal = data.signal || 0;
            this.kgFlag = data.kgFlag || 0;
            this.electroeye = data.electroeye || 0;
            this.names = [];
            if (data.names.length > 0) {
                for (var i = 0; i < data.names.length; i++) {
                    var name = new FM.dataApi.RdCrossName(data.names[i]);
                    this.names.push(name);
                }
            }
            this.links = [];
            if (data.links.length > 0) {
                for (var j = 0; j < data.links.length; j++) {
                    var link = new FM.dataApi.RdCrossLink(data.links[j]);
                    this.links.push(link);
                }
            }
            this.nodes = [];
            if (data.nodes.length > 0) {
                for (var k = 0; k < data.nodes.length; k++) {
                    var node = new FM.dataApi.RdCrossNode(data.nodes[k]);
                    this.nodes.push(node);
                }
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.type = this.type;
            data.signal = this.signal;
            data.electroeye = this.electroeye;
            data.geoLiveType = this.geoLiveType;
            data.kgFlag = this.kgFlag;
            data.links = [];
            for (var i = 0, len = this.data.links.length; i < len; i++) {
                data.links.push(this.data.links[i].getIntegrate());
            }

            data.names = [];
            for (var j = 0, nameLen = this.data.names.length; j < nameLen; j++) {
                data.names.push(this.data.names[j].getIntegrate());
            }

            data.nodes = [];
            for (var k = 0, nodeLen = this.data.nodes.length; k < nodeLen; k++) {
                data.nodes.push(this.data.nodes[k].getIntegrate());
            }

            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.type = this.type;
            data.signal = this.signal;
            data.electroeye = this.electroeye;
            data.geoLiveType = this.geoLiveType;
            data.kgFlag = this.kgFlag;
            data.links = [];
            for (var i = 0, len = this.links.length; i < len; i++) {
                data.links.push(this.links[i].getIntegrate());
            }

            data.names = [];
            for (var j = 0, nameLen = this.names.length; j < nameLen; j++) {
                data.names.push(this.names[j].getIntegrate());
            }

            data.nodes = [];
            for (var k = 0, nodeLen = this.nodes.length; k < nodeLen; k++) {
                data.nodes.push(this.nodes[k].getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 前端校验
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            var _self = this;
            var nameGroup = [];
            this.names.forEach(function (item) {
                if (!nameGroup[item.nameGroupid - 1]) {
                    nameGroup[item.nameGroupid - 1] = [];
                }
                nameGroup[item.nameGroupid - 1].push(item);
            });
            // 判断多音字是否进行了选择
            nameGroup.forEach(function (item, outerIndex) {
                for (var i = 0; i < item.length; i++) {
                    if (item[i].langCode === 'CHI' || item.langCode === 'CHT') {
                        if (item[i].phoneticArr.length) {
                            for (var j = 0; j < item[i].phoneticArr.length; j++) {
                                if (item[i].phoneticArr[j].length > 1) {
                                    _self._pushError('多音字检查', '请选择多音字');
                                    break;
                                }
                            }
                        }
                    }
                }
            });
        }
    }]);

    return RdCross;
}(_Feature3.default);

exports.default = RdCross;

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 路口内link
 */
var RdCrossLink = function (_Feature) {
    _inherits(RdCrossLink, _Feature);

    function RdCrossLink() {
        _classCallCheck(this, RdCrossLink);

        return _possibleConstructorReturn(this, (RdCrossLink.__proto__ || Object.getPrototypeOf(RdCrossLink)).apply(this, arguments));
    }

    _createClass(RdCrossLink, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDCROSSLINK';
            this.pid = data.pid;
            this.linkPid = data.linkPid;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdCrossLink;
}(_Feature3.default);

exports.default = RdCrossLink;

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 路口名称
 */
var RdCrossName = function (_Feature) {
    _inherits(RdCrossName, _Feature);

    function RdCrossName() {
        _classCallCheck(this, RdCrossName);

        return _possibleConstructorReturn(this, (RdCrossName.__proto__ || Object.getPrototypeOf(RdCrossName)).apply(this, arguments));
    }

    _createClass(RdCrossName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDCROSSNAME';
            this.pid = data.pid;
            this.nameGroupid = data.nameGroupid || 1;
            this.nameId = data.nameId || 0;
            this.langCode = data.langCode || 'CHI';
            this.name = data.name || '';
            this.phonetic = data.phonetic || '';
            this.phoneticArr = [];
            if (data.phonetic) {
                this.phoneticArr.push(data.phonetic.split(';'));
            }
            this.srcFlag = data.srcFlag || 0;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.nameGroupid = this.nameGroupid;
            //        data["nameId"] = this.nameId;
            data.langCode = this.langCode;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.srcFlag = this.srcFlag;
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.nameGroupid = this.nameGroupid;
            //        data["nameId"] = this.nameId;
            data.langCode = this.langCode;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.srcFlag = this.srcFlag;
            data.rowId = this.rowId;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdCrossName;
}(_Feature3.default);

exports.default = RdCrossName;

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 路口组成node
 */
var RdCrossNode = function (_Feature) {
  _inherits(RdCrossNode, _Feature);

  function RdCrossNode() {
    _classCallCheck(this, RdCrossNode);

    return _possibleConstructorReturn(this, (RdCrossNode.__proto__ || Object.getPrototypeOf(RdCrossNode)).apply(this, arguments));
  }

  _createClass(RdCrossNode, [{
    key: 'setAttributes',

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data - 接口返回的数据
     * @return {undefined}
     */
    value: function setAttributes(data) {
      this.geoLiveType = 'RDCROSSNODE';
      this.pid = data.pid;
      this.isMain = data.isMain || 0;
      this.nodePid = data.nodePid;
      this.rowId = data.rowId || null;
    }
    /**
     * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
     * @return {object} 前端传递给服务的参数数据
     */

  }, {
    key: 'getIntegrate',
    value: function getIntegrate() {
      var data = {};
      data.pid = this.pid;
      data.isMain = this.isMain;
      data.nodePid = this.nodePid;
      data.rowId = this.rowId;
      data.geoLiveType = this.geoLiveType;
      return data;
    }
    /**
     * 模型转换函数，获取的数据片段
     * @return {object} 格式化后的片段数据
     */

  }, {
    key: 'getSnapShot',
    value: function getSnapShot() {
      var data = {};
      data.pid = this.pid;
      data.isMain = this.isMain;
      data.nodePid = this.nodePid;
      data.rowId = this.rowId;
      // data.geoLiveType = this.geoLiveType;
      return data;
    }
  }]);

  return RdCrossNode;
}(_Feature3.default);

exports.default = RdCrossNode;

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 顺行
 */
var RdDirectRoute = function (_Feature) {
    _inherits(RdDirectRoute, _Feature);

    function RdDirectRoute() {
        _classCallCheck(this, RdDirectRoute);

        return _possibleConstructorReturn(this, (RdDirectRoute.__proto__ || Object.getPrototypeOf(RdDirectRoute)).apply(this, arguments));
    }

    _createClass(RdDirectRoute, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDDIRECTROUTE';
            this.pid = data.pid || '';
            this.nodePid = data.nodePid;
            this.rowId = data.rowId || null;
            this.inLinkPid = data.inLinkPid;
            this.outLinkPid = data.outLinkPid;
            if (data.flag == undefined) {
                this.flag = 2;
            } else {
                this.flag = data.flag;
            }
            if (data.processFlag == undefined) {
                this.processFlag = 1;
            } else {
                this.processFlag = data.processFlag;
            }
            this.vias = [];
            for (var i = 0; i < data.vias.length; i++) {
                var via = new FM.dataApi.RdDirectRouteVia(data.vias[i]);
                this.vias.push(via);
            }
            this.relationshipType = data.relationshipType || 1;
        }
        /**
         * 获取RdDirectRoute简略信息
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = parseInt(this.pid, 10);
            data.nodePid = parseInt(this.nodePid, 10);
            data.inLinkPid = parseInt(this.inLinkPid, 10);
            data.outLinkPid = parseInt(this.outLinkPid, 10);
            data.flag = parseInt(this.flag, 10);
            data.processFlag = parseInt(this.processFlag, 10);
            data.relationshipType = parseInt(this.relationshipType, 10);
            data.vias = this.vias;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = parseInt(this.pid, 10);
            data.nodePid = parseInt(this.nodePid, 10);
            data.inLinkPid = parseInt(this.inLinkPid, 10);
            data.outLinkPid = parseInt(this.outLinkPid, 10);
            data.flag = parseInt(this.flag, 10);
            data.processFlag = parseInt(this.processFlag, 10);
            data.relationshipType = parseInt(this.relationshipType, 10);
            data.vias = this.vias;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdDirectRoute;
}(_Feature3.default);

exports.default = RdDirectRoute;

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 方向看板经过线
 */
var RdDirectRouteVia = function (_Feature) {
    _inherits(RdDirectRouteVia, _Feature);

    function RdDirectRouteVia() {
        _classCallCheck(this, RdDirectRouteVia);

        return _possibleConstructorReturn(this, (RdDirectRouteVia.__proto__ || Object.getPrototypeOf(RdDirectRouteVia)).apply(this, arguments));
    }

    _createClass(RdDirectRouteVia, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDDIRECTROUTEVIA';
            this.pid = data.pid || 0;
            this.groupId = data.groupId || 1;
            this.linkPid = data.linkPid;
            this.seqNum = data.seqNum || 1;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.groupId = this.groupId;
            data.linkPid = this.linkPid;
            data.seqNum = this.seqNum;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.groupId = this.groupId;
            data.linkPid = this.linkPid;
            data.seqNum = this.seqNum;
            data.rowId = this.rowId;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdDirectRouteVia;
}(_Feature3.default);

exports.default = RdDirectRouteVia;

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 电子眼
 */
var RdElectronicEye = function (_Feature) {
    _inherits(RdElectronicEye, _Feature);

    function RdElectronicEye() {
        _classCallCheck(this, RdElectronicEye);

        return _possibleConstructorReturn(this, (RdElectronicEye.__proto__ || Object.getPrototypeOf(RdElectronicEye)).apply(this, arguments));
    }

    _createClass(RdElectronicEye, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDELECTRONICEYE';
            this.pid = data.pid || '';
            this.direct = data.direct || 0;
            this.linkPid = data.linkPid;
            this.location = data.location || 0;
            this.kind = data.kind || 0;
            this.rowId = data.rowId || null;
            this.angle = data.angle || 0;
            this.speedLimit = data.speedLimit || 0;
            this.verifiedFlag = data.verifiedFlag || 0;
            this.meshId = data.meshId || 0;
            this.geometry = data.geometry;
            // this.srcFlag = data.srcFlag || 1;
            if (typeof data.srcFlag !== 'undefined') {
                this.srcFlag = data.srcFlag;
            } else {
                this.srcFlag = 1;
            }
            this.creationDate = data.creationDate || null;
            this.highViolation = data.highViolation || 0;
            this.uFields = data.uFields || null;
            this.uRecord = data.uRecord || 0;
            this.uDate = data.uDate || null;
            this.pairs = data.pairs || [];
            this.parts = data.parts || [];
        }
        /**
         * 获取RdElectronicEye简略信息
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.direct = this.direct;
            data.linkPid = this.linkPid;
            data.location = this.location;
            data.kind = this.kind;
            data.rowId = this.rowId;
            data.angle = this.angle;
            data.speedLimit = this.speedLimit;
            data.verifiedFlag = this.verifiedFlag;
            data.meshId = this.meshId;
            data.geometry = this.geometry;
            data.srcFlag = this.srcFlag;
            data.creationDate = this.creationDate;
            data.highViolation = this.highViolation;
            data.uFields = this.uFields;
            data.uRecord = this.uRecord;
            data.uDate = this.uDate;
            data.pairs = this.pairs;
            data.parts = this.parts;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.direct = this.direct;
            data.linkPid = this.linkPid;
            data.location = this.location;
            data.kind = this.kind;
            data.rowId = this.rowId;
            data.angle = this.angle;
            data.speedLimit = this.speedLimit;
            data.verifiedFlag = this.verifiedFlag;
            data.meshId = this.meshId;
            data.geometry = this.geometry;
            data.srcFlag = this.srcFlag;
            data.creationDate = this.creationDate;
            data.highViolation = this.highViolation;
            data.uFields = this.uFields;
            data.uRecord = this.uRecord;
            data.uDate = this.uDate;
            data.pairs = this.pairs;
            data.parts = this.parts;
            return data;
        }
    }]);

    return RdElectronicEye;
}(_Feature3.default);

exports.default = RdElectronicEye;

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 大门
 */
var RdGate = function (_Feature) {
    _inherits(RdGate, _Feature);

    function RdGate() {
        _classCallCheck(this, RdGate);

        return _possibleConstructorReturn(this, (RdGate.__proto__ || Object.getPrototypeOf(RdGate)).apply(this, arguments));
    }

    _createClass(RdGate, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDGATE';
            this.pid = data.pid;
            this.inLinkPid = data.inLinkPid;
            this.nodePid = data.nodePid;
            this.outLinkPid = data.outLinkPid;
            // this.type = (data.type === undefined || data.type === '') ? 2 : data.type;
            if (typeof data.type !== 'undefined') {
                this.type = data.type;
            } else {
                this.type = 2;
            }
            // this.dir = (data.dir === undefined || data.dir === '') ? 2 : data.dir;
            if (typeof data.dir !== 'undefined') {
                this.dir = data.dir;
            } else {
                this.dir = 2;
            }
            this.fee = data.fee || 0;
            this.condition = [];
            if (data.condition && data.condition.length > 0) {
                for (var i = 0, len = data.condition.length; i < len; i++) {
                    var con = new FM.dataApi.RdGateCondition(data.condition[i]);
                    this.condition.push(con);
                }
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.inLinkPid = this.inLinkPid;
            data.nodePid = this.nodePid;
            data.outLinkPid = this.outLinkPid;
            data.type = this.type;
            data.dir = this.dir;
            data.fee = this.fee;

            var con = [];
            for (var i = 0, len = this.condition.length; i < len; i++) {
                con.push(this.condition[i].getIntegrate());
            }
            data.condition = con;
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.inLinkPid = this.inLinkPid;
            data.nodePid = this.nodePid;
            data.outLinkPid = this.outLinkPid;
            data.type = this.type;
            data.dir = this.dir;
            data.fee = this.fee;

            var con = [];
            for (var i = 0, len = this.condition.length; i < len; i++) {
                con.push(this.condition[i].getIntegrate());
            }
            data.condition = con;
            data.rowId = this.rowId;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdGate;
}(_Feature3.default);

exports.default = RdGate;

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 大门限制
 */
var RdGateCondition = function (_Feature) {
  _inherits(RdGateCondition, _Feature);

  function RdGateCondition() {
    _classCallCheck(this, RdGateCondition);

    return _possibleConstructorReturn(this, (RdGateCondition.__proto__ || Object.getPrototypeOf(RdGateCondition)).apply(this, arguments));
  }

  _createClass(RdGateCondition, [{
    key: 'setAttributes',

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data - 接口返回的数据
     * @return {undefined}
     */
    value: function setAttributes(data) {
      this.geoLiveType = 'RDGATECONDITION';
      this.pid = data.pid;
      this.validObj = data.validObj || 0;
      this.timeDomain = data.timeDomain || '';
      this.rowId = data.rowId || null;
    }
    /**
     * 模型转换函数，获取的数据片段
     * @return {object} 格式化后的片段数据
     */

  }, {
    key: 'getSnapShot',
    value: function getSnapShot() {
      var data = {};
      data.pid = this.pid;
      data.validObj = this.validObj;
      data.timeDomain = this.timeDomain;
      data.rowId = this.rowId;
      data.geoLiveType = this.geoLiveType;
      return data;
    }
    /**
     * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
     * @return {object} 前端传递给服务的参数数据
     */

  }, {
    key: 'getIntegrate',
    value: function getIntegrate() {
      var data = {};
      data.pid = this.pid;
      data.validObj = this.validObj;
      data.timeDomain = this.timeDomain;
      data.rowId = this.rowId;
      // data.geoLiveType = this.geoLiveType;
      return data;
    }
  }]);

  return RdGateCondition;
}(_Feature3.default);

exports.default = RdGateCondition;

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 立交
 */
var RdGsc = function (_Feature) {
    _inherits(RdGsc, _Feature);

    function RdGsc() {
        _classCallCheck(this, RdGsc);

        return _possibleConstructorReturn(this, (RdGsc.__proto__ || Object.getPrototypeOf(RdGsc)).apply(this, arguments));
    }

    _createClass(RdGsc, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDGSC';
            this.pid = data.pid;
            this.geometry = data.geometry;
            // this.processFlag = data.processFlag || 1;
            if (typeof data.processFlag !== 'undefined') {
                this.processFlag = data.processFlag;
            } else {
                this.processFlag = 1;
            }
            this.links = [];
            if (data.links && data.links.length > 0) {
                for (var i = 0, len = data.links.length; i < len; i++) {
                    var link = new FM.dataApi.RdGscLink(data.links[i]);
                    this.links.push(link);
                }
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.geometry = this.geometry;
            data.processFlag = this.processFlag;
            // data.geoLiveType = this.geoLiveType;

            var links = [];
            for (var i = 0, len = this.links.length; i < len; i++) {
                links.push(this.links[i].getIntegrate());
            }
            data.links = links;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.geometry = this.geometry;
            data.processFlag = this.processFlag;
            data.geoLiveType = this.geoLiveType;

            var links = [];
            for (var i = 0, len = this.links.length; i < len; i++) {
                links.push(this.links[i].getIntegrate());
            }
            data.links = links;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdGsc;
}(_Feature3.default);

exports.default = RdGsc;

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 立交关系组成 LINK
 */
var RdGscLink = function (_Feature) {
    _inherits(RdGscLink, _Feature);

    function RdGscLink() {
        _classCallCheck(this, RdGscLink);

        return _possibleConstructorReturn(this, (RdGscLink.__proto__ || Object.getPrototypeOf(RdGscLink)).apply(this, arguments));
    }

    _createClass(RdGscLink, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDGSCLINK';
            if (!data.pid) {
                throw new Error('form对象没有对应link');
            } else {
                this.id = data.pid;
            }
            this.pid = data.pid;
            this.zlevel = data.zlevel || 0;
            this.linkPid = data.linkPid || 0;
            this.tableName = data.tableName || '';
            this.shpSeqNum = data.shpSeqNum;
            this.startEnd = data.startEnd;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.zlevel = this.zlevel;
            data.linkPid = this.linkPid;
            data.tableName = this.tableName;
            data.shpSeqNum = this.shpSeqNum;
            data.startEnd = this.startEnd;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.zlevel = this.zlevel;
            data.linkPid = this.linkPid;
            data.tableName = this.tableName;
            data.shpSeqNum = this.shpSeqNum;
            data.startEnd = this.startEnd;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdGscLink;
}(_Feature3.default);

exports.default = RdGscLink;

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 限高限重
 */
var RdHgwgLimit = function (_Feature) {
    _inherits(RdHgwgLimit, _Feature);

    function RdHgwgLimit() {
        _classCallCheck(this, RdHgwgLimit);

        return _possibleConstructorReturn(this, (RdHgwgLimit.__proto__ || Object.getPrototypeOf(RdHgwgLimit)).apply(this, arguments));
    }

    _createClass(RdHgwgLimit, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDHGWGLIMIT';
            this.pid = data.pid;
            this.linkPid = data.linkPid;
            this.direct = data.direct;
            this.resHigh = data.resHigh;
            this.resWeigh = data.resWeigh;
            this.resWidth = data.resWidth;
            this.resAxleLoad = data.resAxleLoad;
            this.meshId = data.meshId;
            this.geometry = data.geometry;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.linkPid = this.linkPid;
            data.direct = this.direct;
            data.resHigh = this.resHigh;
            data.resWeigh = this.resWeigh;
            data.resAxleLoad = this.resAxleLoad;
            data.resWidth = this.resWidth;
            data.meshId = this.meshId;
            data.geometry = this.geometry;
            data.rowId = this.rowId;

            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.linkPid = this.linkPid;
            data.direct = this.direct;
            data.resHigh = this.resHigh;
            data.resWeigh = this.resWeigh;
            data.resAxleLoad = this.resAxleLoad;
            data.resWidth = this.resWidth;
            data.meshId = this.meshId;
            data.geometry = this.geometry;
            data.rowId = this.rowId;

            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdHgwgLimit;
}(_Feature3.default);

exports.default = RdHgwgLimit;

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CRF交叉点
 */
var RdInter = function (_Feature) {
    _inherits(RdInter, _Feature);

    function RdInter() {
        _classCallCheck(this, RdInter);

        return _possibleConstructorReturn(this, (RdInter.__proto__ || Object.getPrototypeOf(RdInter)).apply(this, arguments));
    }

    _createClass(RdInter, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDINTER';
            this.pid = data.pid || '';
            this.links = [];
            this.nodes = [];

            for (var i = 0; i < data.links.length; i++) {
                var link = new FM.dataApi.RdInterLinks(data.links[i]);
                this.links.push(link);
            }

            for (var j = 0; j < data.nodes.length; j++) {
                var node = new FM.dataApi.RdInterNodes(data.nodes[j]);
                this.nodes.push(node);
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.nodes = [];
            data.links = [];
            data.geoLiveType = this.geoLiveType;
            for (var i = 0; i < this.links.length; i++) {
                data.links.push(this.links[i].getIntegrate());
            }
            for (var j = 0; j < this.nodes.length; j++) {
                data.nodes.push(this.nodes[j].getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.nodes = [];
            data.links = [];
            data.geoLiveType = this.geoLiveType;
            for (var i = 0; i < this.links.length; i++) {
                data.links.push(this.links[i].getIntegrate());
            }
            for (var j = 0; j < this.nodes.length; j++) {
                data.nodes.push(this.nodes[j].getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdInter;
}(_Feature3.default);

exports.default = RdInter;

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CRF交叉点组成link
 */
var RdInterLinks = function (_Feature) {
    _inherits(RdInterLinks, _Feature);

    function RdInterLinks() {
        _classCallCheck(this, RdInterLinks);

        return _possibleConstructorReturn(this, (RdInterLinks.__proto__ || Object.getPrototypeOf(RdInterLinks)).apply(this, arguments));
    }

    _createClass(RdInterLinks, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDINTERLINKS';
            this.linkPid = data.linkPid;
            this.seqNum = data.seqNum || 1;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.seqNum = this.seqNum;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.seqNum = this.seqNum;
            data.rowId = this.rowId;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdInterLinks;
}(_Feature3.default);

exports.default = RdInterLinks;

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CRF交叉点组成node
 */
var RdInterNodes = function (_Feature) {
    _inherits(RdInterNodes, _Feature);

    function RdInterNodes() {
        _classCallCheck(this, RdInterNodes);

        return _possibleConstructorReturn(this, (RdInterNodes.__proto__ || Object.getPrototypeOf(RdInterNodes)).apply(this, arguments));
    }

    _createClass(RdInterNodes, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDINTERNODES';
            this.nodePid = data.nodePid;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.nodePid = this.nodePid;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.nodePid = this.nodePid;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdInterNodes;
}(_Feature3.default);

exports.default = RdInterNodes;

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 详细车道
 */
var RdLane = function (_Feature) {
    _inherits(RdLane, _Feature);

    function RdLane() {
        _classCallCheck(this, RdLane);

        return _possibleConstructorReturn(this, (RdLane.__proto__ || Object.getPrototypeOf(RdLane)).apply(this, arguments));
    }

    _createClass(RdLane, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLANE';
            this.pid = data.pid;
            this.linkPid = data.linkPid;
            this.laneNum = data.laneNum || 1;
            this.travelFlag = data.travelFlag || 0;
            this.seqNum = data.seqNum || 1;
            this.laneForming = data.laneForming || 0;
            this.laneDir = data.laneDir || 1;
            this.laneType = data.laneType || 1;
            if (data.arrowDir == '' || typeof data.arrowDir === 'undefined') {
                this.arrowDir = 9;
            } else {
                this.arrowDir = data.arrowDir;
            }
            this.laneMark = data.laneMark || 0;
            this.width = data.width || 0;
            this.restrictHeight = data.restrictHeight || 0;
            this.transitionArea = data.transitionArea || 0;
            this.fromMaxSpeed = data.fromMaxSpeed || 0;
            this.toMaxSpeed = data.toMaxSpeed || 0;
            this.fromMinSpeed = data.fromMinSpeed || 0;
            this.toMinSpeed = data.toMinSpeed || 0;
            this.elecEye = data.elecEye || 0;
            this.laneDivider = data.laneDivider || 0;
            this.centerDivider = data.centerDivider || 0;
            this.speedFlag = data.speedFlag || 0;
            this.srcFlag = data.srcFlag || 1;
            this.rowId = data.rowId || null;
            this.conditions = [];
            if (data.conditions && data.conditions.length > 0) {
                for (var i = 0; i < data.conditions.length; i++) {
                    var condition = new FM.dataApi.RdLaneCondition(data.conditions[i]);
                    this.conditions.push(condition);
                }
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.linkPid = this.linkPid;
            data.laneNum = this.laneNum;
            data.travelFlag = this.travelFlag;
            data.seqNum = this.seqNum;
            data.laneForming = this.laneForming;
            data.laneDir = this.laneDir;
            data.laneType = this.laneType;
            data.arrowDir = this.arrowDir;
            data.laneMark = this.laneMark;
            data.width = parseInt(this.width, 10);
            data.restrictHeight = parseInt(this.restrictHeight, 10);
            data.transitionArea = this.transitionArea;
            data.fromMaxSpeed = parseInt(this.fromMaxSpeed, 10);
            data.toMaxSpeed = parseInt(this.toMaxSpeed, 10);
            data.fromMinSpeed = parseInt(this.fromMinSpeed, 10);
            data.toMinSpeed = parseInt(this.toMinSpeed, 10);
            data.elecEye = this.elecEye;
            data.laneDivider = this.laneDivider;
            data.centerDivider = this.centerDivider;
            data.speedFlag = this.speedFlag;
            data.srcFlag = this.srcFlag;
            data.rowId = this.rowId;
            data.conditions = [];
            for (var i = 0; i < this.conditions.length; i++) {
                data.conditions.push(this.conditions[i].getIntegrate());
            }
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.linkPid = this.linkPid;
            data.laneNum = this.laneNum;
            data.travelFlag = this.travelFlag;
            data.seqNum = this.seqNum;
            data.laneForming = this.laneForming;
            data.laneDir = this.laneDir;
            data.laneType = this.laneType;
            data.arrowDir = this.arrowDir;
            data.laneMark = this.laneMark;
            data.width = parseInt(this.width, 10);
            data.restrictHeight = parseInt(this.restrictHeight, 10);
            data.transitionArea = this.transitionArea;
            data.fromMaxSpeed = parseInt(this.fromMaxSpeed, 10);
            data.toMaxSpeed = parseInt(this.toMaxSpeed, 10);
            data.fromMinSpeed = parseInt(this.fromMinSpeed, 10);
            data.toMinSpeed = parseInt(this.toMinSpeed, 10);
            data.elecEye = this.elecEye;
            data.laneDivider = this.laneDivider;
            data.centerDivider = this.centerDivider;
            data.speedFlag = this.speedFlag;
            data.srcFlag = this.srcFlag;
            data.rowId = this.rowId;
            data.conditions = [];
            for (var i = 0; i < this.conditions.length; i++) {
                data.conditions.push(this.conditions[i].getIntegrate());
            }
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdLane;
}(_Feature3.default);

exports.default = RdLane;

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 详细车道的时间段和车辆限制
 */
var RdLaneCondition = function (_Feature) {
    _inherits(RdLaneCondition, _Feature);

    function RdLaneCondition() {
        _classCallCheck(this, RdLaneCondition);

        return _possibleConstructorReturn(this, (RdLaneCondition.__proto__ || Object.getPrototypeOf(RdLaneCondition)).apply(this, arguments));
    }

    _createClass(RdLaneCondition, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLANECONDITION';
            this.lanePid = data.lanePid;
            this.direction = data.direction || 1;
            this.directionTime = data.directionTime || null;
            this.vehicle = data.vehicle || 0;
            this.vehicleTime = data.vehicleTime || null;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.lanePid = this.lanePid;
            data.direction = parseInt(this.direction, 10);
            data.directionTime = this.directionTime;
            data.vehicle = this.vehicle;
            data.vehicleTime = this.vehicleTime;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.lanePid = this.lanePid;
            data.direction = parseInt(this.direction, 10);
            data.directionTime = this.directionTime;
            data.vehicle = this.vehicle;
            data.vehicleTime = this.vehicleTime;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdLaneCondition;
}(_Feature3.default);

exports.default = RdLaneCondition;

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 车信
 */
var RdLaneConnexity = function (_Feature) {
    _inherits(RdLaneConnexity, _Feature);

    function RdLaneConnexity() {
        _classCallCheck(this, RdLaneConnexity);

        return _possibleConstructorReturn(this, (RdLaneConnexity.__proto__ || Object.getPrototypeOf(RdLaneConnexity)).apply(this, arguments));
    }

    _createClass(RdLaneConnexity, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLANECONNEXITY';
            this.pid = data.pid;
            this.inLinkPid = data.inLinkPid;
            this.nodePid = data.nodePid;
            this.lanes = this._splitLaneInfo(data.laneInfo || '');
            this.conflictFlag = data.conflictFlag || 0;
            this.kgFlag = data.kgFlag || 0;
            this.laneNum = data.laneNum || 0;
            this.leftExtend = data.leftExtend || 0;
            this.rightExtend = data.rightExtend || 0;
            this.topos = [];
            for (var i = 0; i < data.topos.length; i++) {
                var topos = new FM.dataApi.RdLaneTopology(data.topos[i]);
                this.topos.push(topos);
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.inLinkPid = this.inLinkPid;
            data.nodePid = this.nodePid;
            data.laneInfo = this._mergeLaneInfo(this.lanes);
            data.conflictFlag = this.conflictFlag;
            data.kgFlag = this.kgFlag;
            data.laneNum = this.lanes.length;
            var lr = this._getLeftRightExtend(this.lanes);
            data.leftExtend = lr.left;
            data.rightExtend = lr.right;
            data.geoLiveType = this.geoLiveType;
            data.topos = [];
            for (var i = 0; i < this.topos.length; i++) {
                data.topos.push(this.topos[i].getIntegrate());
            }
            data.rowId = this.rowId;

            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.inLinkPid = this.inLinkPid;
            data.nodePid = this.nodePid;
            data.laneInfo = this._mergeLaneInfo(this.lanes);
            data.conflictFlag = this.conflictFlag;
            data.kgFlag = this.kgFlag;
            data.laneNum = this.lanes.length;
            var lr = this._getLeftRightExtend(this.lanes);
            data.leftExtend = lr.left;
            data.rightExtend = lr.right;
            data.topos = [];
            for (var i = 0; i < this.topos.length; i++) {
                data.topos.push(this.topos[i].getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 拆分车道字段，区分附加车道和公交车道
         * @param  {string} laneInfo - 车道字符串
         * @return {object[]} ret - 车道信息数组
         */

    }, {
        key: '_splitLaneInfo',
        value: function _splitLaneInfo(laneInfo) {
            var ret = [];
            var lanes = laneInfo.split(',');
            var lane = void 0,
                temp = void 0;
            for (var i = 0; i < lanes.length; i++) {
                lane = {
                    direct: null,
                    busDirect: null,
                    extend: 0
                };
                if (lanes[i].indexOf('[') >= 0) {
                    // 附加车道
                    lane.extend = 1;
                    lanes[i] = lanes[i].replace(/\[|]/g, '');
                }
                if (lanes[i].indexOf('<') >= 0) {
                    // 公交车道
                    lanes[i] = lanes[i].replace(/<|>/g, '');
                    temp = lanes[i].split('');
                    // 普通车道在前，公交车道在后
                    if (temp[0] == '[') {
                        lane.direct = temp[1];
                    } else {
                        lane.direct = temp[0];
                    }
                    lane.busDirect = temp[1];
                } else {
                    lane.direct = lanes[i];
                }
                ret.push(lane);
            }
            return ret;
        }
        /**
         * 车道信息数组转为数据库存储的字符串格式
         * @param  {object[]} lanes - 车道数组对象
         * @return {string} 车道字符串
         */

    }, {
        key: '_mergeLaneInfo',
        value: function _mergeLaneInfo(lanes) {
            var lane = void 0;
            var temp = [];
            for (var k = 0; k < lanes.length; k++) {
                if (lanes[k].busDirect) {
                    lane = lanes[k].direct + '<' + lanes[k].busDirect + '>';
                } else {
                    lane = lanes[k].direct;
                }
                if (lanes[k].extend == 1) {
                    lane = '[' + lane + ']';
                }
                temp.push(lane);
            }
            return temp.join(',');
        }
        /**
         * 整理左附加车道和右附加车道
         * @param  {object[]} lanes - 车道数组对象
         * @return {object} 附加车道
         */

    }, {
        key: '_getLeftRightExtend',
        value: function _getLeftRightExtend(lanes) {
            var left = 0;
            var right = 0;
            var leftExtend = 0;
            var rightExtend = 0;
            var i = void 0;
            for (i = 0; i < lanes.length; i++) {
                if (lanes[i].extend == 1) {
                    left++;
                } else {
                    break;
                }
            }
            if (lanes.length == left) {
                leftExtend = Math.ceil(left / 2);
                rightExtend = Math.floor(left / 2);
            } else {
                leftExtend = left;
                for (i = lanes.length - 1; i > left; i--) {
                    if (lanes[i].extend == 1) {
                        right++;
                    } else {
                        break;
                    }
                }
                rightExtend = right;
            }

            return {
                left: leftExtend,
                right: rightExtend
            };
        }
    }]);

    return RdLaneConnexity;
}(_Feature3.default);

exports.default = RdLaneConnexity;

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * rdlane组成数组
 */
var RdLanes = function (_Feature) {
    _inherits(RdLanes, _Feature);

    function RdLanes() {
        _classCallCheck(this, RdLanes);

        return _possibleConstructorReturn(this, (RdLanes.__proto__ || Object.getPrototypeOf(RdLanes)).apply(this, arguments));
    }

    _createClass(RdLanes, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLANE';
            this.linkPids = data.linkPids || [];
            this.laneDir = data.laneDir || 1;
            this.laneInfos = [];
            if (data.laneInfos && data.laneInfos.length > 0) {
                for (var i = 0; i < data.laneInfos.length; i++) {
                    var laneInfo = new FM.dataApi.RdLane(data.laneInfos[i]);
                    this.laneInfos.push(laneInfo);
                }
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPids = this.linkPids;
            data.laneDir = this.laneDir;
            data.laneInfos = [];
            for (var i = 0; i < this.laneInfos.length; i++) {
                data.laneInfos.push(this.laneInfos[i].getIntegrate());
            }
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPids = this.linkPids;
            data.laneDir = this.laneDir;
            data.laneInfos = [];
            for (var i = 0; i < this.laneInfos.length; i++) {
                data.laneInfos.push(this.laneInfos[i].getIntegrate());
            }
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdLanes;
}(_Feature3.default);

exports.default = RdLanes;

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 详细车道连通
 */
var RdLaneTopoDetail = function (_Feature) {
    _inherits(RdLaneTopoDetail, _Feature);

    function RdLaneTopoDetail() {
        _classCallCheck(this, RdLaneTopoDetail);

        return _possibleConstructorReturn(this, (RdLaneTopoDetail.__proto__ || Object.getPrototypeOf(RdLaneTopoDetail)).apply(this, arguments));
    }

    _createClass(RdLaneTopoDetail, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLANETOPODETAIL';
            this.pid = data.pid; // topoId
            this.inLanePid = data.inLanePid;
            this.outLanePid = data.outLanePid;
            this.inLinkPid = data.inLinkPid;
            this.outLinkPid = data.outLinkPid;
            this.nodePid = data.nodePid;
            this.reachDir = data.reachDir || 0;
            this.vehicle = data.vehicle || 0;
            this.timeDomain = data.timeDomain || '';
            this.processFlag = data.processFlag || 2;
            this.throughTurn = data.throughTurn || 0;
            this.laneTopoVias = [];
            if (data.topoVias && data.topoVias.length > 0) {
                for (var i = 0; i < data.topoVias.length; i++) {
                    var topoVias = new FM.dataApi.RdLaneTopoVia(data.topoVias[i]);
                    this.laneTopoVias.push(topoVias);
                }
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.inLanePid = this.inLanePid;
            data.outLanePid = this.outLanePid;
            data.inLinkPid = this.inLinkPid;
            data.outLinkPid = this.outLinkPid;
            data.nodePid = this.nodePid;
            data.reachDir = this.reachDir;
            data.vehicle = this.vehicle;
            data.timeDomain = this.timeDomain;
            data.processFlag = this.processFlag;
            data.throughTurn = this.throughTurn;
            data.laneTopoVias = [];
            for (var i = 0; i < this.laneTopoVias.length; i++) {
                data.laneTopoVias.push(this.laneTopoVias[i].getIntegrate());
            }
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.inLanePid = this.inLanePid;
            data.outLanePid = this.outLanePid;
            data.inLinkPid = this.inLinkPid;
            data.outLinkPid = this.outLinkPid;
            data.nodePid = this.nodePid;
            data.reachDir = this.reachDir;
            data.vehicle = this.vehicle;
            data.timeDomain = this.timeDomain;
            data.processFlag = this.processFlag;
            data.throughTurn = this.throughTurn;
            data.laneTopoVias = [];
            for (var i = 0; i < this.laneTopoVias.length; i++) {
                data.laneTopoVias.push(this.laneTopoVias[i].getIntegrate());
            }
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdLaneTopoDetail;
}(_Feature3.default);

exports.default = RdLaneTopoDetail;

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 详细车道连通数组
 */
var RdLaneTopoDetailArr = function (_Feature) {
    _inherits(RdLaneTopoDetailArr, _Feature);

    function RdLaneTopoDetailArr() {
        _classCallCheck(this, RdLaneTopoDetailArr);

        return _possibleConstructorReturn(this, (RdLaneTopoDetailArr.__proto__ || Object.getPrototypeOf(RdLaneTopoDetailArr)).apply(this, arguments));
    }

    _createClass(RdLaneTopoDetailArr, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLANETOPODETAILARR';
            this.laneTopoInfos = [];
            if (data.laneTopoInfos && data.laneTopoInfos.length > 0) {
                for (var i = 0; i < data.laneTopoInfos.length; i++) {
                    var laneTopoInfos = new FM.dataApi.RdLaneTopoDetail(data.laneTopoInfos[i]);
                    this.laneTopoInfos.push(laneTopoInfos);
                }
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.laneTopoInfos = [];
            for (var i = 0; i < this.laneTopoInfos.length; i++) {
                data.laneTopoInfos.push(this.laneTopoInfos[i].getIntegrate());
            }
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.laneTopoInfos = [];
            for (var i = 0; i < this.laneTopoInfos.length; i++) {
                data.laneTopoInfos.push(this.laneTopoInfos[i].getIntegrate());
            }
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdLaneTopoDetailArr;
}(_Feature3.default);

exports.default = RdLaneTopoDetailArr;

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 车道连通
 */
var RdLaneTopology = function (_Feature) {
    _inherits(RdLaneTopology, _Feature);

    function RdLaneTopology() {
        _classCallCheck(this, RdLaneTopology);

        return _possibleConstructorReturn(this, (RdLaneTopology.__proto__ || Object.getPrototypeOf(RdLaneTopology)).apply(this, arguments));
    }

    _createClass(RdLaneTopology, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLANETOPOLOGY';
            this.pid = data.pid || 0;
            this.connexityPid = data.connexityPid;
            this.outLinkPid = data.outLinkPid;
            this.inLaneInfo = FM.Util.decimal2BinaryArray(data.inLaneInfo || 0, 16);
            this.busLaneInfo = FM.Util.decimal2BinaryArray(data.busLaneInfo || 0, 16);
            this.reachDir = data.reachDir || 0;
            this.relationshipType = data.relationshipType || 1;
            this.vias = [];
            for (var i = 0; i < data.vias.length; i++) {
                var via = new FM.dataApi.RdLaneVia(data.vias[i]);
                this.vias.push(via);
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.outLinkPid = this.outLinkPid;
            data.connexityPid = this.connexityPid;
            data.inLaneInfo = FM.Util.binaryArray2Decimal(this.inLaneInfo);
            data.busLaneInfo = FM.Util.binaryArray2Decimal(this.busLaneInfo);
            data.reachDir = this.reachDir;
            data.relationshipType = this.relationshipType;
            data.vias = [];
            data.geoLiveType = this.geoLiveType;
            for (var i = 0; i < this.vias.length; i++) {
                data.vias.push(this.vias.getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.outLinkPid = this.outLinkPid;
            data.connexityPid = this.connexityPid;
            data.inLaneInfo = FM.Util.binaryArray2Decimal(this.inLaneInfo);
            data.busLaneInfo = FM.Util.binaryArray2Decimal(this.busLaneInfo);
            data.reachDir = this.reachDir;
            data.relationshipType = this.relationshipType;
            data.vias = [];
            // data.geoLiveType = this.geoLiveType;
            for (var i = 0; i < this.vias.length; i++) {
                data.vias.push(this.vias[i].getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdLaneTopology;
}(_Feature3.default);

exports.default = RdLaneTopology;

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 详细车道经过link
 */
var RdLaneTopoVia = function (_Feature) {
    _inherits(RdLaneTopoVia, _Feature);

    function RdLaneTopoVia() {
        _classCallCheck(this, RdLaneTopoVia);

        return _possibleConstructorReturn(this, (RdLaneTopoVia.__proto__ || Object.getPrototypeOf(RdLaneTopoVia)).apply(this, arguments));
    }

    _createClass(RdLaneTopoVia, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLANETOPOVIA';
            this.rowId = data.rowId || null;
            this.topoId = data.topoId;
            this.lanePid = data.lanePid || 0;
            this.viaLinkPid = data.viaLinkPid || 1;
            this.groupId = data.groupId || 1;
            this.seqNum = data.seqNum || 1;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.rowId = this.rowId;
            data.topoId = this.topoId;
            data.lanePid = this.lanePid;
            data.viaLinkPid = this.viaLinkPid;
            data.groupId = this.groupId;
            data.seqNum = this.seqNum;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.rowId = this.rowId;
            data.topoId = this.topoId;
            data.lanePid = this.lanePid;
            data.viaLinkPid = this.viaLinkPid;
            data.groupId = this.groupId;
            data.seqNum = this.seqNum;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdLaneTopoVia;
}(_Feature3.default);

exports.default = RdLaneTopoVia;

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 车信经过 LINK
 */
var RdLaneVia = function (_Feature) {
    _inherits(RdLaneVia, _Feature);

    function RdLaneVia() {
        _classCallCheck(this, RdLaneVia);

        return _possibleConstructorReturn(this, (RdLaneVia.__proto__ || Object.getPrototypeOf(RdLaneVia)).apply(this, arguments));
    }

    _createClass(RdLaneVia, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLANEVIA';
            this.rowId = data.rowId || null;
            this.groupId = data.groupId || 1;
            this.linkPid = data.linkPid;
            this.seqNum = data.seqNum || 1;
            this.topologyId = data.topologyId || 0;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.rowId = this.rowId;
            data.groupId = this.groupId;
            data.linkPid = this.linkPid;
            data.seqNum = this.seqNum;
            data.topologyId = this.topologyId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.rowId = this.rowId;
            data.groupId = this.groupId;
            data.linkPid = this.linkPid;
            data.seqNum = this.seqNum;
            data.topologyId = this.topologyId;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdLaneVia;
}(_Feature3.default);

exports.default = RdLaneVia;

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * rdlink
 */
var RdLink = function (_Feature) {
    _inherits(RdLink, _Feature);

    function RdLink() {
        _classCallCheck(this, RdLink);

        return _possibleConstructorReturn(this, (RdLink.__proto__ || Object.getPrototypeOf(RdLink)).apply(this, arguments));
    }

    _createClass(RdLink, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLINK';
            this.pid = data.pid || null;
            this.rowId = data.rowId || null;
            this.sNodePid = data.sNodePid || null;
            this.eNodePid = data.eNodePid || null;
            this.kind = data.kind || 7;
            this.direct = data.direct || 1;
            // this.appInfo = (data.appInfo === undefined || data.appInfo === '') ? 1 : data.appInfo;
            if (typeof data.appInfo !== 'undefined') {
                this.appInfo = data.appInfo;
            } else {
                this.appInfo = 1;
            }
            // this.tollInfo = data.tollInfo || 2;
            if (typeof data.tollInfo !== 'undefined') {
                this.tollInfo = data.tollInfo;
            } else {
                this.tollInfo = 2;
            }
            // this.routeAdopt = data.routeAdopt || 2;
            if (typeof data.routeAdopt !== 'undefined') {
                this.routeAdopt = data.routeAdopt;
            } else {
                this.routeAdopt = 2;
            }
            this.multiDigitized = data.multiDigitized || 0;
            this.developState = data.developState || 0;
            this.imiCode = data.imiCode || 0;
            this.specialTraffic = data.specialTraffic || 0;
            this.functionClass = data.functionClass || 5;
            this.urban = data.urban || 0;
            this.paveStatus = data.paveStatus || 0;
            if (typeof data.laneNum != 'undefined') {
                this.laneNum = data.laneNum;
            } else {
                this.laneNum = 2;
            }
            this.laneLeft = data.laneLeft || 0;
            this.laneRight = data.laneRight || 0;
            this.laneWidthLeft = data.laneWidthLeft || 1;
            this.laneWidthRight = data.laneWidthRight || 1;
            this.laneClass = data.laneClass || 0;
            this.width = data.width || 0;
            this.isViaduct = data.isViaduct || 0;
            this.leftRegionId = data.leftRegionId || 0;
            this.rightRegionId = data.rightRegionId || 0;
            this.length = data.length || 0;
            this.meshId = data.meshId || 0;
            this.onewayMark = data.onewayMark || 0;
            this.streetLight = data.streetLight || 0;
            this.parkingLot = data.parkingLot || 0;
            this.adasFlag = data.adasFlag || 0;
            this.sidewalkFlag = data.sidewalkFlag || 0;
            this.walkstairFlag = data.walkstairFlag || 0;
            this.diciType = data.diciType || 0;
            this.walkFlag = data.walkFlag || 0;
            this.difGroupid = data.difGroupid || '';
            this.srcFlag = data.srcFlag || 6;
            this.digitalLevel = data.digitalLevel || 0;
            this.editFlag = data.editFlag || 1;
            this.truckFlag = data.truckFlag || 0;
            this.feeStd = data.feeStd || 0;
            this.feeFlag = data.feeFlag || 0;
            this.systemId = data.systemId || 0;
            this.originLinkPid = data.originLinkPid || 0;
            this.centerDivider = data.centerDivider || 0;
            this.parkingFlag = data.parkingFlag || 0;
            this.memo = data.memo || '';
            this.forms = [];
            var i = void 0;
            var len = void 0;
            if (data.forms && data.forms.length > 0) {
                for (i = 0, len = data.forms.length; i < len; i++) {
                    var form = new FM.dataApi.RdLinkForm(data.forms[i], this.options);
                    this.forms.push(form);
                }
            }
            this.names = [];
            if (data.names && data.names.length > 0) {
                for (i = 0, len = data.names.length; i < len; i++) {
                    var name = new FM.dataApi.RdLinkName(data.names[i], this.options);
                    this.names.push(name);
                }
            }
            this.rtics = [];
            if (data.rtics && data.rtics.length > 0) {
                for (i = 0, len = data.rtics.length; i < len; i++) {
                    var rtic = new FM.dataApi.RdLinkRtic(data.rtics[i], this.options);
                    this.rtics.push(rtic);
                }
            }
            this.intRtics = [];
            if (data.intRtics && data.intRtics.length > 0) {
                for (i = 0, len = data.intRtics.length; i < len; i++) {
                    var intRtics = new FM.dataApi.RdLinkIntRtic(data.intRtics[i], this.options);
                    this.intRtics.push(intRtics);
                }
            }
            this.sidewalks = [];
            if (data.sidewalks && data.sidewalks.length > 0) {
                for (i = 0, len = data.sidewalks.length; i < len; i++) {
                    var sideWalk = new FM.dataApi.RdLinkSideWalk(data.sidewalks[i], this.options);
                    this.sidewalks.push(sideWalk);
                }
            }
            this.speedlimits = [];
            if (data.speedlimits && data.speedlimits.length > 0) {
                for (i = 0, len = data.speedlimits.length; i < len; i++) {
                    var speeedLimit = new FM.dataApi.RdLinkSpeedLimit(data.speedlimits[i], this.options);
                    this.speedlimits.push(speeedLimit);
                }
            }
            this.limits = [];
            if (data.limits && data.limits.length > 0) {
                for (i = 0, len = data.limits.length; i < len; i++) {
                    var limit = new FM.dataApi.RdLinkLimit(data.limits[i], this.options);
                    this.limits.push(limit);
                }
            }
            this.limitTrucks = [];
            if (data.limitTrucks && data.limitTrucks.length > 0) {
                for (i = 0, len = data.limitTrucks.length; i < len; i++) {
                    var truckLimit = new FM.dataApi.RdLinkTruckLimit(data.limitTrucks[i], this.options);
                    this.limitTrucks.push(truckLimit);
                }
            }
            this.walkstairs = [];
            if (data.walkstairs && data.walkstairs.length > 0) {
                for (i = 0, len = data.walkstairs.length; i < len; i++) {
                    var walkStair = new FM.dataApi.RdLinkWalkStair(data.walkstairs[i], this.options);
                    this.walkstairs.push(walkStair);
                }
            }
            this.zones = [];
            if (data.zones && data.zones.length > 0) {
                for (i = 0, len = data.zones.length; i < len; i++) {
                    var zone = new FM.dataApi.RdLinkZone(data.zones[i], this.options);
                    this.zones.push(zone);
                }
            }
            this.tmclocations = [];
            if (data.tmclocations && data.tmclocations.length > 0) {
                for (i = 0, len = data.tmclocations.length; i < len; i++) {
                    var location = new FM.dataApi.RdTmcLocation(data.tmclocations[i], this.options);
                    this.tmclocations.push(location);
                }
            }
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            data.geometry = this.geometry;
            data.kind = this.kind;
            data.direct = this.direct;
            data.appInfo = this.appInfo;
            data.tollInfo = this.tollInfo;
            data.routeAdopt = this.routeAdopt;
            data.multiDigitized = this.multiDigitized;
            data.developState = this.developState;
            data.imiCode = this.imiCode;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            data.kind = this.kind;
            data.direct = this.direct;
            data.appInfo = this.appInfo;
            data.tollInfo = this.tollInfo;
            data.routeAdopt = this.routeAdopt;
            data.multiDigitized = this.multiDigitized;
            data.developState = this.developState;
            data.imiCode = this.imiCode;
            data.specialTraffic = this.specialTraffic;
            data.functionClass = this.functionClass;
            data.urban = this.urban;
            data.paveStatus = this.paveStatus;
            data.laneNum = this.laneNum;
            data.laneLeft = this.laneLeft;
            data.laneRight = this.laneRight;
            data.laneWidthLeft = this.laneWidthLeft;
            data.laneWidthRight = this.laneWidthRight;
            data.laneClass = this.laneClass;
            data.width = this.width;
            data.isViaduct = this.isViaduct;
            data.leftRegionId = this.leftRegionId;
            data.rightRegionId = this.rightRegionId;
            data.geometry = this.geometry;
            data.length = this.length;
            data.meshId = this.meshId;
            data.onewayMark = this.onewayMark;
            data.streetLight = this.streetLight;
            data.parkingLot = this.parkingLot;
            data.adasFlag = this.adasFlag;
            data.sidewalkFlag = this.sidewalkFlag;
            data.walkstairFlag = this.walkstairFlag;
            data.diciType = this.diciType;
            data.walkFlag = this.walkFlag;
            data.difGroupid = this.difGroupid;
            data.srcFlag = this.srcFlag;
            data.digitalLevel = this.digitalLevel;
            data.editFlag = this.editFlag;
            data.truckFlag = this.truckFlag;
            data.feeStd = parseFloat(this.feeStd);
            data.feeFlag = this.feeFlag;
            data.systemId = this.systemId;
            data.originLinkPid = this.originLinkPid;
            data.centerDivider = this.centerDivider;
            data.parkingFlag = this.parkingFlag;
            data.memo = this.memo;
            data.geoLiveType = this.geoLiveType;
            var forms = [];
            var i = void 0;
            var len = void 0;
            for (i = 0, len = this.forms.length; i < len; i++) {
                if (!this.forms[i].deleted()) {
                    forms.push(this.forms[i].getIntegrate());
                }
            }
            data.forms = forms;
            var limits = [];
            for (i = 0, len = this.limits.length; i < len; i++) {
                limits.push(this.limits[i].getIntegrate());
            }
            data.limits = limits;
            var names = [];
            for (i = 0, len = this.names.length; i < len; i++) {
                if (!this.names[i].deleted()) {
                    names.push(this.names[i].getIntegrate());
                }
            }
            data.names = names;
            var rtics = [];
            for (i = 0, len = this.rtics.length; i < len; i++) {
                if (!this.rtics[i].deleted()) {
                    rtics.push(this.rtics[i].getIntegrate());
                }
            }
            data.rtics = rtics;
            var intRtics = [];
            for (i = 0, len = this.intRtics.length; i < len; i++) {
                if (!this.intRtics[i].deleted()) {
                    intRtics.push(this.intRtics[i].getIntegrate());
                }
            }
            data.intRtics = intRtics;
            var sidewalks = [];
            for (i = 0, len = this.sidewalks.length; i < len; i++) {
                sidewalks.push(this.sidewalks[i].getIntegrate());
            }
            data.sidewalks = sidewalks;
            var speedlimits = [];
            for (i = 0, len = this.speedlimits.length; i < len; i++) {
                speedlimits.push(this.speedlimits[i].getIntegrate());
            }
            data.speedlimits = speedlimits;
            var limitTrucks = [];
            for (i = 0, len = this.limitTrucks.length; i < len; i++) {
                limitTrucks.push(this.limitTrucks[i].getIntegrate());
            }
            data.limitTrucks = limitTrucks;
            var walkstairs = [];
            for (i = 0, len = this.walkstairs.length; i < len; i++) {
                walkstairs.push(this.walkstairs[i].getIntegrate());
            }
            data.walkstairs = walkstairs;
            var zones = [];
            for (i = 0, len = this.zones.length; i < len; i++) {
                zones.push(this.zones[i].getIntegrate());
            }
            data.zones = zones;
            var tmclocations = [];
            for (i = 0, len = this.tmclocations.length; i < len; i++) {
                tmclocations.push(this.tmclocations[i].getIntegrate());
            }
            data.tmclocations = tmclocations;
            return data;
        }
        /**
         * 维护rtic是否保留
         * @return {undefined}
         */

    }, {
        key: 'preserveRticExistsOrNot',
        value: function preserveRticExistsOrNot() {
            if (!this.intRtics.length && !this.rtics.length) return;
            var formTypeArr = [];
            for (var i = 0; i < this.forms.length; i++) {
                if (!this.forms[i]._deleted) {
                    formTypeArr.push(this.forms[i].formOfWay);
                }
            }
            var isIntRticDeletedCondition = this.specialTraffic || this.kind > 8 || formTypeArr.indexOf(33) != -1;
            var isRticDeletedCondition = this.specialTraffic || this.kind > 8 || formTypeArr.indexOf(33) != -1 || formTypeArr.indexOf(22) != -1 || formTypeArr.indexOf(52) != -1;
            if (this.rtics.length) {
                for (var k = 0; k < this.rtics.length; k++) {
                    this.rtics[k]._deleted = isRticDeletedCondition;
                }
            }
            if (this.intRtics.length) {
                for (var j = 0; j < this.intRtics.length; j++) {
                    this.intRtics[j]._deleted = isIntRticDeletedCondition;
                }
            }
        }
        /**
         * 维护rtic的上下表示字段
         * @return {undefined}
         */

    }, {
        key: '_maintainRticupdownFlagInfos',
        value: function _maintainRticupdownFlagInfos() {
            // glm53052 和glm53004 单向道路不能做下行走向
            var _self = this;
            this.rtics.forEach(function (item) {
                for (var key in item) {
                    if (key === 'updownFlag' && item[key] === 1 && _self.direct != 1) {
                        item[key] = 0;
                    }
                }
            });
            this.intRtics.forEach(function (item) {
                for (var key in item) {
                    if (key === 'updownFlag' && item[key] === 1 && _self.direct != 1) {
                        item[key] = 0;
                    }
                }
            });
        }
        /**
         * 修改种别的关联维护
         * 两个参数都必选传
         * @param {number} newValue - 修改后的值
         * @param {number} oldValue - 修改前的值
         * @return {undefined}
         */

    }, {
        key: 'changeKind',
        value: function changeKind(newValue, oldValue) {
            // 如果是批量编辑则去不用关联维护
            // if (this.options.boolBatch) {
            //     return;
            // }
            var normalSpeedLimit = null;
            for (var s = 0; s < this.speedlimits.length; s++) {
                if (this.speedlimits[s].speedType == 0) {
                    normalSpeedLimit = this.speedlimits[s];
                }
            }
            this.kind = newValue;
            // 修改道路种别对道路名的维护;(当LINK种别修改为高速、城市高速、国道时，RD_LINK_NAME表中的“主从CODE”字段修改为1，其他为0)
            if (newValue == 1 || newValue == 2 || newValue == 3) {
                this.names.forEach(function (item) {
                    item.code = 1;
                });
            } else {
                this.names.forEach(function (item) {
                    item.code = 0;
                });
            }
            // 根据车道种别为9、10、轮渡、人渡时维护车道数和车道等级为1;
            if (newValue == 9 || newValue == 10 || newValue == 11 || newValue == 13) {
                this.laneNum = 1;
                this.laneLeft = 0;
                this.laneRight = 0;
                this.laneClass = 1;
            }
            // 如果link种别变为人渡或轮渡  要根维护限速等级
            if (newValue == 11 || newValue == 13) {
                normalSpeedLimit.speedClass = 7;
            } else {
                this._speedLimitLevel();
            }
            // 改变link种别对，普通限速的限速值的维护;
            this._limitSpeed();
            // 根据道路种别维护路径采纳字段 ，参考的是bug4修改
            if (newValue == 1) {
                this.routeAdopt = 5;
            } else if (newValue == 2 || newValue == 3) {
                this.routeAdopt = 4;
            } else if (newValue == 4 || newValue == 6 || newValue == 7) {
                this.routeAdopt = 2;
            } else if (newValue == 8 || newValue == 9 || newValue == 10 || newValue == 11 || newValue == 13) {
                this.routeAdopt = 0;
            }
            if ((newValue == 9 || newValue == 10) && oldValue != 9 && oldValue != 10) {
                var newLimit = void 0;
                if (this.limits.length == 0) {
                    newLimit = new FM.dataApi.RdLinkLimit({
                        linkPid: this.pid,
                        processFlag: 2,
                        limitDir: 0
                    });
                    this.limits.unshift(newLimit);
                } else {
                    var temp = 0;
                    for (var j = 0, limitLen = this.limits.length; j < limitLen; j++) {
                        if (this.limits[j].type == 3) {
                            this.limits[j].processFlag = 2;
                            this.limits[j].limitDir = 0;
                            temp++;
                        }
                    }
                    if (temp == 0) {
                        newLimit = new FM.dataApi.RdLinkLimit({
                            linkPid: this.pid,
                            processFlag: 2,
                            limitDir: 0
                        });
                        this.limits.unshift(newLimit);
                    }
                }
                // RTIC信息维护：道路link种别修改为9,10级时，LINK上的RTIC信息自动删除
                this.rtics.forEach(function (item) {
                    item.delete();
                });
                this.intRtics.forEach(function (item) {
                    item.delete();
                });
            } else if (newValue != 9 && newValue != 10 && (oldValue == 9 || oldValue == 10)) {
                for (var k = this.limits.length - 1; k >= 0; k--) {
                    if (this.limits[k].type == 3) {
                        this.limits.splice(k, 1);
                    }
                }
                // RTIC信息维护：道路link种别修改为9,10级时，LINK上的RTIC信息自动删除
                this.rtics.forEach(function (item) {
                    item.undelete();
                });
                this.intRtics.forEach(function (item) {
                    item.undelete();
                });
            }
            // 10级路变非10级以及非10级切换为10级时对行人导航面板联动控制;
            if (newValue == 10) {
                this.walkFlag = 1;
                this.sidewalkFlag = 0;
            } else if (newValue != 10) {
                this.walkFlag = 0;
                this.sidewalkFlag = 0;
            }
            this.preserveRticExistsOrNot();
        }
        /**
         * 限速来源变化对等级赋值的维护
         * @param {number} newValue - 修改后的值
         * @param {number} oldValue - 修改前的值
         * @return {undefined}
         */

    }, {
        key: '_changeSpeedLimitSource',
        value: function _changeSpeedLimitSource(newValue, oldValue) {
            // 如果是批量编辑则去不用关联维护
            // if (this.options.boolBatch) {
            //     return;
            // }
            var normalSpeedLimit = null;
            for (var i = 0; i < this.speedlimits.length; i++) {
                if (this.speedlimits[i].speedType == 0) {
                    normalSpeedLimit = this.speedlimits[i];
                }
            }
            // 3）对于双方向link，若存在非“未调查”、“匝道未调查”的速度限制来源，则速度限制等级值标识赋“手工赋值”；否则，赋“程序赋值”
            var limitSrcs = void 0;
            if (this.direct == 2) {
                limitSrcs = [normalSpeedLimit.fromLimitSrc];
            } else if (this.direct == 3) {
                limitSrcs = [normalSpeedLimit.toLimitSrc];
            } else {
                limitSrcs = [normalSpeedLimit.fromLimitSrc, normalSpeedLimit.toLimitSrc];
            }

            var res1 = FM.Util.intersection(limitSrcs, [0, 1]);
            var res2 = FM.Util.intersection(limitSrcs, [1, 9]) || FM.Util.intersection(limitSrcs, [1, 7]);
            if (res1.length) {
                normalSpeedLimit.speedClassWork = 0;
            } else {
                normalSpeedLimit.speedClassWork = 1;
            }
            // 如果限速来源改回未调查;
            this._limitSpeed();
        }
        /**
         * 根据限速值维护限速等级
         * @param {string} flag - 顺向还是逆向
         * @return {undefined}
         */

    }, {
        key: '_speedLimitLevel',
        value: function _speedLimitLevel(flag) {
            // 在link限速值变化的任一过程中，若link上存在步行街、人渡、轮渡、POI连接路、SA/PA道路形态时，限速等级值不变
            for (var j = 0; j < this.forms.length; j++) {
                if ([12, 13, 36, 20].indexOf(this.forms[j].formOfWay) != -1) {
                    return;
                }
            }
            if (this.kind == 11 || this.kind == 13) {
                return;
            }
            var normalSpeedLimit = void 0,
                speedValue = void 0;
            for (var i = 0; i < this.speedlimits.length; i++) {
                if (this.speedlimits[i].speedType == 0) {
                    normalSpeedLimit = this.speedlimits[i];
                }
            }
            if (!normalSpeedLimit) {
                throw new Error('数据错误，必须得存在普通限速');
            }

            if (this.direct == 1) {
                if (normalSpeedLimit.fromSpeedLimit && normalSpeedLimit.toSpeedLimit) {
                    speedValue = normalSpeedLimit.fromSpeedLimit > normalSpeedLimit.toSpeedLimit ? normalSpeedLimit.toSpeedLimit : normalSpeedLimit.fromSpeedLimit;
                } else {
                    speedValue = normalSpeedLimit.fromSpeedLimit ? normalSpeedLimit.fromSpeedLimit : normalSpeedLimit.toSpeedLimit;
                }
                if ([7, 9].indexOf(normalSpeedLimit.fromLimitSrc) != -1 && [7, 9].indexOf(normalSpeedLimit.toLimitSrc) != -1 && normalSpeedLimit.speedClassWork == 0) {
                    return;
                }
            } else if (this.direct == 2) {
                speedValue = normalSpeedLimit.fromSpeedLimit;
                // 单方向限速来源为“未调查或砸到为调查”，且等级赋值标记为“手工赋值”时，不自动更新限速等级；
                if ([0, 7, 9].indexOf(normalSpeedLimit.fromLimitSrc) != -1 && normalSpeedLimit.speedClassWork == 0) {
                    return;
                }
            } else if (this.direct == 3) {
                speedValue = normalSpeedLimit.toSpeedLimit;
                // 单方向限速来源为“未调查或砸到为调查”，且等级赋值标记为“手工赋值”时，不自动更新限速等级；
                if ([0, 7, 9].indexOf(normalSpeedLimit.toLimitSrc) != -1 && normalSpeedLimit.speedClassWork == 0) {
                    return;
                }
            } else if (this.direct == '-') {
                // 批量编辑
                speedValue = normalSpeedLimit.fromSpeedLimit > normalSpeedLimit.toSpeedLimit && normalSpeedLimit.toSpeedLimit > 0 ? normalSpeedLimit.toSpeedLimit : normalSpeedLimit.fromSpeedLimit;
            }
            if (speedValue == 0) {
                normalSpeedLimit.speedClass = 0;
            } else if (speedValue < 11) {
                normalSpeedLimit.speedClass = 8;
            } else if (speedValue <= 30) {
                normalSpeedLimit.speedClass = 7;
            } else if (speedValue <= 50) {
                normalSpeedLimit.speedClass = 6;
            } else if (speedValue <= 70) {
                normalSpeedLimit.speedClass = 5;
            } else if (speedValue <= 90) {
                normalSpeedLimit.speedClass = 4;
            } else if (speedValue <= 100) {
                normalSpeedLimit.speedClass = 3;
            } else if (speedValue <= 130) {
                normalSpeedLimit.speedClass = 2;
            } else if (speedValue > 130) {
                normalSpeedLimit.speedClass = 1;
            }
            // if (this.options.boolBatch) {
            //     return;
            // }
            // 当手动修改顺行速度或逆向速度为0，来源值联动为无
            if (!flag) return;
            if (normalSpeedLimit.fromSpeedLimit == 0 && flag == 'from') {
                normalSpeedLimit.fromLimitSrc = 0;
            }
            if (normalSpeedLimit.fromSpeedLimit != 0 && flag == 'from') {
                normalSpeedLimit.fromLimitSrc = 1;
            }
            if (normalSpeedLimit.toSpeedLimit == 0 && flag == 'to') {
                normalSpeedLimit.toLimitSrc = 0;
            }
            if (normalSpeedLimit.toSpeedLimit != 0 && flag == 'to') {
                normalSpeedLimit.toLimitSrc = 1;
            }
            this._changeSpeedLimitSource();
        }
        /**
         * 修改道路形态对限速等级的维护;
         * 修改道路形态对限速值的维护;
         * 修改道路形态为砸道时维护限速等级;
         * @param {object} data - link形态
         * @return {undefined}
         */

    }, {
        key: 'changeRdlinkForm',
        value: function changeRdlinkForm(data) {
            // 如果是批量编辑则去不用关联维护
            // if (this.options.boolBatch) {
            //     return;
            // }
            var formTypeArr = [];
            var formTypeSelected = [];
            var normalSpeedLimit = null;
            for (var s = 0; s < this.speedlimits.length; s++) {
                if (this.speedlimits[s].speedType == 0) {
                    normalSpeedLimit = this.speedlimits[s];
                }
            }
            for (var i = 0; i < this.forms.length; i++) {
                if (!this.forms[i]._deleted) {
                    formTypeArr.push(this.forms[i].formOfWay);
                } else {
                    formTypeSelected.push(this.forms[i].formOfWay);
                }
            }
            // 如果道路形态存在“步行街”等级为8维护限速等级;
            if (formTypeArr.indexOf(20) != -1) {
                normalSpeedLimit.speedClass = 8;
            }
            // 道路形态新增变更为“15匝道”时，限速来源由未调查更新为匝道未调查；
            // 道路形态删除“15匝道”时，限速来源由“匝道未调查”更新为“未调查”
            if (formTypeArr.indexOf(15) != -1) {
                if (this.direct == 1) {
                    normalSpeedLimit.fromLimitSrc = 7;
                    normalSpeedLimit.toLimitSrc = 7;
                } else if (this.direct == 2) {
                    normalSpeedLimit.fromLimitSrc = 7;
                    normalSpeedLimit.toLimitSrc = 9;
                } else if (this.direct == 3) {
                    normalSpeedLimit.fromLimitSrc = 9;
                    normalSpeedLimit.toLimitSrc = 7;
                }
            }
            if (data) {
                if (data.id == 15 && formTypeSelected.indexOf(15) != -1) {
                    normalSpeedLimit.fromLimitSrc = 9;
                    normalSpeedLimit.toLimitSrc = 9;
                }
            }
            var pattern = /\s?(12|13|36)\s?/g;
            // 如果道路形态存在“人渡/轮渡/POI连接路/SA/PA”等维护限速等级;
            if (pattern.test(formTypeArr.join())) {
                normalSpeedLimit.speedClass = 7;
                return;
            }
            // 如果不存在上述形态则按照限速值维护限速等级;
            this._speedLimitLevel();
            // 形态改变对限速值的维护（10级道路不受影响）;
            this._limitSpeed();
            // 维护rtic
            this.preserveRticExistsOrNot();
        }
        /**
         * 修改方向的关联维护
         * 传改变后的方向
         * @param  {integer}    newDirect - 修改后的方向
         * @return {undefined}
         */

    }, {
        key: 'changeDirect',
        value: function changeDirect(newDirect) {
            if (this.direct == newDirect) {
                return;
            }
            // 以下是对限速的维护
            this.direct = newDirect;
            var direct = this.direct;
            for (var i = 0; i < this.speedlimits.length; i++) {
                if (direct == 2) {
                    this.speedlimits[i].toLimitSrc = 0;
                    this.speedlimits[i].toSpeedLimit = 0;
                    if (this.speedlimits[i].fromSpeedLimit != 0) {
                        this.speedlimits[i].speedClass = this._speedLimitLevel();
                    } else {
                        this.speedlimits[i].fromLimitSrc = 9;
                    }
                    this._changeSpeedLimitSource();
                } else if (direct == 3) {
                    this.speedlimits[i].fromLimitSrc = 0;
                    this.speedlimits[i].fromSpeedLimit = 0;
                    if (this.speedlimits[i].toSpeedLimit != 0) {
                        this.speedlimits[i].speedClass = this._speedLimitLevel();
                    } else {
                        this.speedlimits[i].toLimitSrc = 9;
                    }
                    this._changeSpeedLimitSource();
                } else {
                    if (!this.speedlimits[i].fromLimitSrc) {
                        this.speedlimits[i].fromLimitSrc = 9;
                    }
                    if (!this.speedlimits[i].toLimitSrc) {
                        this.speedlimits[i].toLimitSrc = 9;
                    }
                    this._changeSpeedLimitSource(); // 等待link改变方向可以了还需测试;
                    this.speedlimits[i].fromSpeedLimit = this.origin.speedlimits[i].fromSpeedLimit;
                    this.speedlimits[i].toSpeedLimit = this.origin.speedlimits[i].toSpeedLimit;
                }
            }
            // 以下是对车道的维护
            if (direct == 2 || direct == 3) {
                this._changeLaneClass(this.laneNum);
                this.laneLeft = this.laneRight = 0;
            } else if (this.laneNum % 2) {
                this._changeLaneClass((parseInt(this.laneNum, 10) + 1) / 2);
            } else if (!this.laneNum) {
                var temp = this.laneRight > this.laneLeft ? this.laneRight : this.laneLeft;
                this._changeLaneClass(temp);
            } else {
                this._changeLaneClass(parseInt(this.laneNum, 10) / 2);
            }
            this._limitSpeed();
            // 方向改变维护rtic信息;
            this._maintainRticupdownFlagInfos();
        }
        /**
         * 根据道路级别，单双方向，是否urban属性返回限速值
         * @param {number} LaneNum - 道路级别
         * @param {number} direct - 单双方向
         * @param {number} isUrban - 是否urban属性
         * @return {number} 限速值
         */

    }, {
        key: '_getSpeedLimt37',
        value: function _getSpeedLimt37(LaneNum, direct, isUrban) {
            var tempVar = 0;
            if (direct == 1) {
                switch (LaneNum) {
                    case 0:
                        tempVar = 0;
                        break;
                    case 1:
                        tempVar = isUrban ? 40 : 50;
                        break;
                    case 2:
                        tempVar = isUrban ? 50 : 60;
                        break;
                    case 3:
                        tempVar = isUrban ? 60 : 70;
                        break;
                    default:
                        tempVar = isUrban ? 70 : 80;
                        break;
                }
            } else {
                switch (LaneNum) {
                    case 0:
                        tempVar = 0;
                        break;
                    case 1:
                        tempVar = isUrban ? 50 : 60;
                        break;
                    case 2:
                        tempVar = isUrban ? 60 : 70;
                        break;
                    case 3:
                        tempVar = isUrban ? 70 : 80;
                        break;
                    default:
                        tempVar = isUrban ? 70 : 80;
                        break;
                }
            }
            return tempVar;
        }
        /**
         * 8-13级道路根据道路级别返回限速值
         * @param {number} rdLevel - 道路级别
         * @return {number} 限速值
         */

    }, {
        key: '_getSpeedLimt813',
        value: function _getSpeedLimt813(rdLevel) {
            var tempVar = void 0;
            switch (rdLevel) {
                case 8:
                    tempVar = 15;
                    break;
                case 9:
                    tempVar = 15;
                    break;
                case 10:
                    tempVar = 10;
                    break;
                case 11:
                    tempVar = 10;
                    break;
                default:
                    tempVar = 15;
            }
            return tempVar;
        }
        /**
         * 根据道路形态何种别的优先级获得限速值
         * @param {number} formValue - 道路级别
         * @param {number} currentValue - 顺向或逆向速度
         * @return {number} 限速值
         */

    }, {
        key: '_getSpeedLimitbyForm',
        value: function _getSpeedLimitbyForm(formValue, currentValue) {
            var tempValue = currentValue;
            if (formValue.indexOf(52) != -1) {
                tempValue = 15;
            }
            if (this.kind == 13) {
                tempValue = currentValue;
            }
            if (formValue.indexOf(20) != -1 || this.kind == 11) {
                tempValue = 10;
            }
            if (formValue.indexOf(18) != -1) {
                tempValue = 15;
            }
            if ([9, 10].indexOf(this.kind) != -1) {
                tempValue = currentValue;
            }
            return tempValue;
        }
        /**
         * 限速之关联维护
         * @return {undefined}
         */

    }, {
        key: '_limitSpeed',
        value: function _limitSpeed() {
            // 如果是批量编辑则去不用关联维护
            // if (this.options.boolBatch) {
            //     return;
            // }
            var normalSpeedLimit = null;
            for (var s = 0; s < this.speedlimits.length; s++) {
                if (this.speedlimits[s].speedType == 0) {
                    normalSpeedLimit = this.speedlimits[s];
                }
            }
            if (!normalSpeedLimit) {
                return;
            }
            // 是否是城市内道路;
            var isUrban = this.urban;
            var formTypeArr = [];
            for (var i = 0; i < this.forms.length; i++) {
                if (!this.forms[i]._deleted) {
                    formTypeArr.push(this.forms[i].formOfWay);
                }
            }
            // 如果是1，2 级道路则不维护;
            if ([1, 2].indexOf(this.kind) != -1) {
                return;
            }
            if ([9, 7].indexOf(normalSpeedLimit.toLimitSrc) != -1) {
                // && normalSpeedLimit.fromLimitSrc != 1
                // 如果是3,4,6,7级道路
                if ([3, 4, 6, 7].indexOf(this.kind) != -1) {
                    var toTemp = void 0;
                    if (this.laneNum) {
                        if (this.direct == 1) {
                            toTemp = this.laneNum % 2 ? (this.laneNum + 1) / 2 : this.laneNum / 2;
                        } else {
                            toTemp = this.laneNum;
                        }
                    } else {
                        toTemp = this.laneLeft;
                    }
                    normalSpeedLimit.toSpeedLimit = this._getSpeedLimt37(toTemp, this.direct, isUrban);
                } else {
                    // 如果是8,9,10,11,13级道路，该种别道路的值只与中别有关，与车道数，方向以及是否urban属性没有关系;
                    normalSpeedLimit.toSpeedLimit = this._getSpeedLimt813(this.kind);
                }
                // 根据种别形态优先级重新维护限速值；
                normalSpeedLimit.toSpeedLimit = this._getSpeedLimitbyForm(formTypeArr, normalSpeedLimit.toSpeedLimit);
            }
            // 维护顺向来源;
            if ([9, 7].indexOf(normalSpeedLimit.fromLimitSrc) != -1) {
                //  && normalSpeedLimit.toLimitSrc != 1
                // 如果是3,4,6,7级道路
                if ([3, 4, 6, 7].indexOf(this.kind) != -1) {
                    var fromTemp = void 0;
                    if (this.laneNum) {
                        if (this.direct == 1) {
                            fromTemp = this.laneNum % 2 ? (this.laneNum + 1) / 2 : this.laneNum / 2;
                        } else {
                            fromTemp = this.laneNum;
                        }
                    } else {
                        fromTemp = this.laneRight;
                    }
                    normalSpeedLimit.fromSpeedLimit = this._getSpeedLimt37(fromTemp, this.direct, isUrban);
                } else {
                    // 如果是8,9,10,11,13级道路，该种别道路的值只与中别有关，与车道数，方向以及是否urban属性没有关系;
                    normalSpeedLimit.fromSpeedLimit = this._getSpeedLimt813(this.kind);
                }
                // 根据种别形态优先级重新维护限速值；
                normalSpeedLimit.fromSpeedLimit = this._getSpeedLimitbyForm(formTypeArr, normalSpeedLimit.fromSpeedLimit);
            }
            // 程序需要关联维护限速等级;
            this._speedLimitLevel();
        }
        /**
         * 根据laneNum修改laneClass
         * @param {number} laneNum - 车道数
         * @return {undefined}
         */

    }, {
        key: '_changeLaneClass',
        value: function _changeLaneClass(laneNum) {
            // 如果是批量编辑则去不用关联维护
            // if (this.options.boolBatch) {
            //     return;
            // }
            if (laneNum == 0) {
                this.laneClass = 0;
            } else if (laneNum == 1) {
                this.laneClass = 1;
            } else if (laneNum >= 2 && laneNum <= 3) {
                this.laneClass = 2;
            } else {
                this.laneClass = 3;
            }
        }
        /**
         * 根据车道数维护车道幅宽
         * @return {undefined}
         */

    }, {
        key: '_roadWidth',
        value: function _roadWidth() {
            // 如果是批量编辑则去不用关联维护
            // if (this.options.boolBatch) {
            //     return;
            // }
            // 车道幅宽维护;
            if (this.laneNum) {
                if (this.laneNum == 1) {
                    this.width = 30;
                } else if (this.laneNum >= 2 && this.laneNum <= 3) {
                    this.width = 55;
                } else {
                    this.width = 130;
                }
            } else if (this.laneLeft || this.laneRight) {
                var temp = this.laneLeft + this.laneRight;
                if (temp == 1) {
                    this.width = 30;
                } else if (temp >= 2 && temp <= 3) {
                    this.width = 55;
                } else {
                    this.width = 130;
                }
            } else {
                this.width = 0;
            }
        }
        /**
         * 总车道数修改对车道等级的维护
         * @return {undefined}
         */

    }, {
        key: 'changeLaneNum',
        value: function changeLaneNum() {
            // 如果是批量编辑则去不用关联维护
            // if (this.options.boolBatch) {
            //     return;
            // }
            if (this.laneNum < 0) {
                this.laneNum = 0;
            } else if (this.laneNum > 99) {
                this.laneNum = 99;
            }
            this.laneLeft = this.laneRight = 0;
            var tempNum = 0;
            if (this.direct == 1) {
                if (this.laneNum % 2) {
                    tempNum = (this.laneNum + 1) / 2;
                } else {
                    tempNum = this.laneNum / 2;
                }
            } else {
                tempNum = this.laneNum;
            }
            this._changeLaneClass(tempNum);
            this._roadWidth();
            // 总车道数变化对限速值的维护;
            this._limitSpeed();
        }
        /**
         * 左右车道数修改对车道等级的维护
         * @return {undefined}
         */

    }, {
        key: 'changeLeftOrRightLaneNum',
        value: function changeLeftOrRightLaneNum() {
            // 如果是批量编辑则去不用关联维护
            // if (this.options.boolBatch) {
            //     return;
            // }
            if (this.laneLeft < 0) {
                this.laneLeft = 0;
            } else if (this.laneLeft > 99) {
                this.laneLeft = 99;
            }
            if (this.laneRight < 0) {
                this.laneRight = 0;
            } else if (this.laneRight > 99) {
                this.laneRight = 99;
            }
            if (this.laneLeft != this.laneRight) {
                this.laneNum = 0;
            } else {
                this.laneNum = this.laneLeft + this.laneRight;
                this.changeLaneNum();
                if (this.laneNum > 99) {
                    this.laneNum = 98;
                }
            }
            var temp = this.laneLeft > this.laneRight ? this.laneLeft : this.laneRight;
            if (temp) {
                this._changeLaneClass(temp);
            }
            this._roadWidth();
            // 总车道数变化对限速值的维护;
            this._limitSpeed();
        }
        /**
         * 覆盖父类的方法，进行线对象对比
         * @param  {object} options - 数据修改后的数据对象
         * @param  {object} options.compareObj - 比较数据
         * @param  {Object[]} options.rules - 对比原则
         * @return {object} 对象对比结果
         */

    }, {
        key: 'compareCommon',
        value: function compareCommon(options) {
            var compareObj = options.compareObj || {};
            var rules = this.exclude.concat(options.rules || []);
            var sameDirect = options.sameDirect;
            for (var key in this) {
                if (this.hasOwnProperty(key) && rules.indexOf(key) == -1) {
                    if (FM.Util.isArray(this[key])) {
                        if (this[key].length > 0 && compareObj[key].length > 0) {
                            this[key] = this._compareArr1(this, compareObj, key, sameDirect);
                        } else {
                            this[key] = [];
                        }
                    } else if (FM.Util.isObject(this[key])) {
                        var opts = FM.Util.clone(options);
                        opts.compareObj = compareObj[key];
                        this[key].compareCommon(opts);
                    } else if (this[key] != compareObj[key]) {
                        this[key] = -1;
                    }
                }
            }

            return this;
        }
        /**
         * 对比数组，返回相同的数组项
         * @param  {object[]} arrayBase - 数组对象
         * @param  {Object[]} arrayFrom - 数组对象
         * @return {object} 对象对比结果
         */

    }, {
        key: '_compareArr',
        value: function _compareArr(arrayBase, arrayFrom) {
            var result = [];

            for (var i = 0, len = arrayBase.length; i < len; i++) {
                for (var j = 0, length = arrayFrom.length; j < length; j++) {
                    var compareResult = FM.Util.isEmptyObject(arrayBase[i].compareDiff({
                        compareObj: arrayFrom[j],
                        rules: ['rowId', 'linkPid', 'geoLiveType', 'options', '_initHooksCalled', 'status', 'id', '_originData', '_origin', 'seqNum']
                    }));

                    if (compareResult) {
                        // 保存对应关系
                        var correspondingArr = [];
                        // correspondingObj['linkPids'] = [arrayBase[i].linkPid]
                        if (arrayBase[i].options && !arrayBase[i].options.correspondingArr) {
                            arrayBase[i].options.correspondingArr = [];
                            correspondingArr = [{
                                linkPid: arrayBase[i].linkPid,
                                rowId: arrayBase[i].rowId
                            }, {
                                linkPid: arrayFrom[j].linkPid,
                                rowId: arrayFrom[j].rowId
                            }];
                        } else {
                            correspondingArr.push({
                                linkPid: arrayFrom[j].linkPid,
                                rowId: arrayFrom[j].rowId
                            });
                        }
                        arrayBase[i].options.correspondingArr = arrayBase[i].options.correspondingArr.concat(correspondingArr);
                        result.push(arrayBase[i]);
                    }
                }
            }

            return result;
        }
        /**
         * 对比数组，返回相同的数组项
         * @param  {object} Base - 数组对象
         * @param  {Object} From - 数组对象
         * @param  {string} key - 比较字段
         * @param  {boolean} sameDirect - 是否同一方向
         * @return {object[]} 对象对比结果
         */

    }, {
        key: '_compareArr1',
        value: function _compareArr1(Base, From, key, sameDirect) {
            var result = [];

            for (var i = 0, len = Base[key].length; i < len; i++) {
                for (var j = 0, length = From[key].length; j < length; j++) {
                    var exceptRules = ['rowId', 'linkPid', 'links', 'pid', 'geoLiveType', 'options', '_initHooksCalled', 'status', 'id', '_originData', '_origin', 'seqNum'];
                    if (key == 'limits') {
                        exceptRules.push('inputTime');
                    }
                    var com = Base[key][i].compareDiff({
                        key: key,
                        sameDirect: sameDirect,
                        compareObj: From[key][j],
                        rules: exceptRules
                    });

                    var compareResult = FM.Util.isEmptyObject(com);

                    if (key == 'speedlimits' && (compareResult || From[key][j].speedType == 0 && Base[key][i].speedType == 0)) {
                        FM.Util.merge(Base[key][i], com);
                    }

                    if (compareResult || From[key][j].speedType == 0 && Base[key][i].speedType == 0) {
                        // 保存对应关系
                        var correspondingArr = [];
                        // correspondingObj['linkPids'] = [arrayBase[i].linkPid]
                        if (Base[key][i].options && !Base[key][i].options.correspondingArr) {
                            Base[key][i].options.correspondingArr = [];
                            correspondingArr = [{
                                linkPid: Base[key][i].linkPid,
                                rowId: Base[key][i].rowId
                            }, {
                                linkPid: From[key][j].linkPid,
                                rowId: From[key][j].rowId
                            }];
                        } else {
                            correspondingArr.push({
                                linkPid: From[key][j].linkPid,
                                rowId: From[key][j].rowId
                            });
                        }
                        Base[key][i].options.correspondingArr = Base[key][i].options.correspondingArr.concat(correspondingArr);
                        result.push(Base[key][i]);
                    }
                }
            }
            return result;
        }
        /**
         * 比较link对象得到变化的属性
         * @param  {object} options - 数据修改后的数据对象
         * @param  {object} options.compareObj - 比较数据
         * @param  {Object[]} options.rules - 对比原则
         * @return {object[]} 对象对比结果
         */

    }, {
        key: 'compareDiff',
        value: function compareDiff(options) {
            var compareObj = options.compareObj || {};
            var rules = this.exclude.concat(options.rules || []);
            var result = {};
            for (var key in this) {
                if (rules.indexOf(key) != -1) {
                    continue;
                }
                // 增加对比字段原则
                if (typeof this[key] === 'number') {
                    if (this[key] !== compareObj[key]) {
                        // 如果为多个link进行比较，则pid没有意义；
                        result.pid = this.pid;
                        result.objStatus = 'UPDATE';
                        result[key] = compareObj[key];
                    }
                } else if (typeof this[key] === 'string') {
                    if (this[key] !== compareObj[key]) {
                        // 如果为多个link进行比较，则pid没有意义；
                        result.pid = this.pid;
                        result.objStatus = 'UPDATE';
                    }
                } else if (FM.Util.isArray(this[key]) && FM.Util.isArray(compareObj[key])) {
                    //

                    var keyArr = [];
                    for (var i = 0, len = this[key].length; i < len; i++) {
                        var current = this[key][i];
                        var isContained = false;
                        var currentCompareObj = {};
                        var j = 0;
                        for (var ll = compareObj[key].length; j < ll; j++) {
                            if (current.rowId == compareObj[key][j].rowId) {
                                isContained = true;
                                currentCompareObj = compareObj[key][j];
                            }
                        }
                        // 如果rowid存在，则为更新或是未改变
                        if (isContained) {
                            var compareResult = this[key][i].compareDiff({
                                compareObj: currentCompareObj,
                                rules: ['options', 'linkPid']
                            });
                            if (compareResult.objStatus) {
                                keyArr.push(compareResult);
                            }
                            compareObj[key].splice(j, 1);
                        } else {
                            current.objStatus = 'DELETE';
                            keyArr.push(current);
                        }
                    }

                    if (compareObj[key].length != 0) {
                        keyArr = keyArr.concat(compareObj[key]);
                    }

                    if (keyArr.length != 0) {
                        result[key] = keyArr;
                    }
                }
            }

            return result;
        }
        /**
         * 转化成渲染数据对象
         * @return {object} rdlink渲染模型
         */

    }, {
        key: 'toCanvasFeature',
        value: function toCanvasFeature() {
            var data = {
                i: this.pid,
                g: this.geometry.coordinates,
                m: {
                    a: this.kind,
                    // b:this.name,
                    // c: this.limits,
                    d: this.direct,
                    e: this.sNodePid,
                    f: this.eNodePid,
                    h: this.forms.map(function (it) {
                        return it.formOfWay;
                    }).join(';'),
                    i: this.functionClass,
                    j: this.imiCode,
                    k: this.length,
                    l: this.specialTraffic
                }
            };
            if (this.limits.length > 0) {
                data.m.c = this.limits.map(function (it) {
                    return it.type;
                }).join(';');
            }
            return new FM.dataApi.CanvasFeature.RdLink(data);
        }
        /**
         * 前端校验
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            var _self = this;
            this.forms.forEach(function (item) {
                if ([30, 31, 33].indexOf(item.formOfWay) != -1 && !item._deleted && _self.paveStatus === 1) {
                    _self._pushError('GLM01099', '桥/隧道/环岛形态的link铺设状态不能是未铺设');
                }
            });
            if (this.specialTraffic && this.paveStatus === 1) {
                this._pushError('GLM01103', '特殊交通link铺设状态不能是未铺设');
            }
            /*
            * link限制信息的检查规则;
            * (1)除单行限制外，其他限制信息类型不能为多个;
            * (2)同一方向的单行限制不能位多个;
            * */
            if (this.limits.length) {
                var limitClasses = this._createObjByKey(this.limits, 'type');
                var singleLimitClasses = limitClasses[1] ? this._createObjByKey(limitClasses[1], 'limitDir') : {};
                for (var key1 in limitClasses) {
                    if (key1 != 1) {
                        if (limitClasses[key1].length > 1) {
                            this._pushError('GLM01376_1', '一条link上不能有限制类型(单行限制除外)相同的限制信息');
                            return;
                        }
                    }
                }
                for (var key2 in singleLimitClasses) {
                    if (singleLimitClasses[key2].length > 1) {
                        this._pushError('GLM01376_2', '一条link的同一方向上，只能存在一条类型为单行限制的限制信息');
                        return;
                    }
                }
            }
        }
        /**
         * 根据key分类限制信息
         * @param  {object[]} Arr - 限制信息
         * @param  {string} key - 分类类型
         * @return {object} 分类结果对象
         */

    }, {
        key: '_createObjByKey',
        value: function _createObjByKey(Arr, key) {
            var tempObj = {};
            Arr.forEach(function (item) {
                if (!tempObj[item[key]]) {
                    tempObj[item[key]] = [item];
                } else {
                    tempObj[item[key]].push(item);
                }
            });
            return tempObj;
        }
        /**
         * 批量编辑方法：获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'merge',

        /**
         * 批量编辑方法：合并两个数据模型对象，用于批量编辑时将多个数据模型合并成一个虚拟数据模型对象
         * 该方法会改变调用对象
         * @param  {object} desDataModel - 要合并数据模型对象
         * @param  {object} options      - 合并操作的其他选项
         * @return {undefined}
         */
        value: function merge() {
            var desDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            // 判断两根link的划线方向是否一致，用于处理限制信息、速度限制等依赖方向的子表数据
            // 注意：这里方向的判断参照的是起始link，且只处理link挂接的情况，不挂接的无法判断，因此从业务实现上要进行相应控制
            // 0: 未知（不挂接，无法判断的）；1：相同；2：不同
            var flag = 0;
            if (this.pid == desDataModel.pid) {
                flag = 1;
            } else if (this.eNodePid == desDataModel.sNodePid || this.eNodePid == desDataModel.eNodePid) {
                flag = this.eNodePid == desDataModel.sNodePid ? 1 : 2;
                // 重置link的起终点，用于下一次的方向判断
                this.eNodePid = this.eNodePid == desDataModel.sNodePid ? desDataModel.eNodePid : desDataModel.sNodePid;
            } else if (this.sNodePid == desDataModel.eNodePid || this.sNodePid == desDataModel.sNodePid) {
                flag = this.sNodePid == desDataModel.eNodePid ? 1 : 2;
                // 重置link的起终点，用于下一次的方向判断
                this.sNodePid = this.sNodePid == desDataModel.eNodePid ? desDataModel.sNodePid : desDataModel.eNodePid;
            }

            options.sameDirect = flag;
            FM.setOptions(desDataModel, {
                sameDirect: flag
            });

            _get(RdLink.prototype.__proto__ || Object.getPrototypeOf(RdLink.prototype), 'merge', this).call(this, desDataModel, options);
        }
        /**
         * 批量编辑方法：批量编辑更新后，处理forms数组
         * @param   {array}     sForms [description]
         * @param   {array}     dForms [description]
         * @return  {undefined}
         */

    }, {
        key: '_retreatForm',
        value: function _retreatForm(sForms, dForms) {
            // 处理“未调查”、“无属性”的形态
            var fow = -1;
            for (var i = 0, len = dForms.length; i < len; i++) {
                if ((dForms[i].formOfWay == 0 || dForms[i].formOfWay == 1) && !dForms[i].deleted()) {
                    fow = dForms[i].formOfWay;
                    break;
                }
            }
            if (fow >= 0) {
                sForms.forEach(function (it) {
                    if (it.formOfWay != fow) {
                        it.delete();
                    }
                });
            } else {
                var c = 0;
                var d = 0;
                sForms.forEach(function (it) {
                    if (!it.deleted()) {
                        c++;
                        if (it.formOfWay > 1) {
                            d++;
                        }
                    }
                });
                if (c == 0) {
                    var m = 0;
                    sForms.forEach(function (it) {
                        if (it.formOfWay == 1) {
                            it.undelete();
                            m++;
                        }
                    });
                    if (m == 0) {
                        sForms.push(new FM.dataApi.RdLinkForm({
                            linkPid: this.pid,
                            formOfWay: 1,
                            auxiFlag: 0
                        }));
                    }
                } else if (d > 0) {
                    sForms.forEach(function (it) {
                        if (it.formOfWay == 0 || it.formOfWay == 1) {
                            it.delete();
                        }
                    });
                }
            }
        }
        /**
         * 批量编辑方法：对需要关联维护的属性单独处理
         * @param   {array}     sForms [description]
         * @param   {array}     dForms [description]
         * @return  {undefined}
         */

    }, {
        key: '_relatedUpdate',
        value: function _relatedUpdate() {
            var vDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var directFlag = this.options.sameDirect; // 获取在merge时放入的方向一致标识
            // 方向有变化，且划线方向标识不是“0 未知”
            if (vDataModel.propertyChanged('direct') && directFlag) {
                var newDirect = void 0;
                if (vDataModel.direct == 0 || vDataModel.direct == 1) {
                    newDirect = vDataModel.direct;
                } else if (vDataModel.direct == 2) {
                    newDirect = directFlag == 1 ? 2 : 3;
                } else if (vDataModel.direct == 3) {
                    newDirect = directFlag == 1 ? 3 : 2;
                }
                this.changeDirect(newDirect);
            }
            // 种别修改
            if (vDataModel.propertyChanged('kind') && vDataModel.kind != this.kind) {
                this.changeKind(vDataModel.kind, this.kind);
            }
            // 总车道数修改
            if (vDataModel.propertyChanged('laneNum') && vDataModel.laneNum != 0 && vDataModel.laneNum != this.laneNum) {
                this.laneNum = vDataModel.laneNum;
                this.changeLaneNum();
            }
            // 左车道数修改
            if (vDataModel.propertyChanged('laneLeft') && vDataModel.laneLeft != 0 && vDataModel.laneLeft != this.laneLeft) {
                this.laneLeft = vDataModel.laneLeft;
                this.changeLeftOrRightLaneNum();
            }
            // 右车道数修改
            if (vDataModel.propertyChanged('laneRight') && vDataModel.laneRight != 0 && vDataModel.laneRight != this.laneRight) {
                this.laneRight = vDataModel.laneRight;
                this.changeLeftOrRightLaneNum();
            }
            // urban值修改
            if (vDataModel.propertyChanged('urban') && vDataModel.urban != this.urban) {
                this.urban = vDataModel.urban;
                this._limitSpeed();
            }
        }
        /**
         * 批量编辑方法：使用编辑后的虚拟数据模型对象更新原始数据模型对象
         * 该方法在批量编辑完成时调用
         * @param  {Object}   vDataModel   合并后的虚拟数据模型对象
         * @param  {Object}   options      其他选项
         * @return {undefined}
         */

    }, {
        key: 'update',
        value: function update() {
            var vDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            // 关联维护
            this._relatedUpdate(vDataModel, options);

            // 通用的更新
            options.sameDirect = this.options.sameDirect;
            // 将已经做过关联维护的属性排除在通用更新之外
            options.rules = ['direct', 'kind', 'laneNum', 'laneLeft', 'laneRight', 'urban'].concat(options.rules || []);
            _get(RdLink.prototype.__proto__ || Object.getPrototypeOf(RdLink.prototype), 'update', this).call(this, vDataModel, options);

            this._retreatForm(this.forms, vDataModel.forms);

            // 形态变更后的关联维护
            var formChange = this._compareJson({ forms: this.getIntegrate().forms }, { forms: this.originData.forms });
            if (formChange) {
                this.changeRdlinkForm();
            }

            // 批量编辑后，重新设置名称的序号
            this.names = this.names.filter(function (it) {
                return !it.deleted();
            });
            this.names.sort(function (a, b) {
                return a.seqNum > b.seqNum;
            });
            this.names.forEach(function (it, k) {
                it.seqNum = k + 1;
            });
        }
        /**
         * 批量编辑方法：父模型对象创建子模型对象
         * 传入的数据一般是从其他对象拷贝的，子表的外键是不正确的，在这个方法中要重置为当前父对象的主键
         * @param  {string}    type 子对象类型
         * @param  {object}    data 子对象数据，一般是拷贝其他对象的
         * @return {object}         子模型对象
         */

    }, {
        key: 'createChild',
        value: function createChild(type, data) {
            data.rowId = null; // 清空rowId
            var f = this.options.sameDirect; // 获取在merge时放入的方向一致标识
            switch (type) {
                case 'RDLINKFORM':
                    data.linkPid = this.pid;
                    return new FM.dataApi.RdLinkForm(data, this.options);
                case 'RDLINKNAME':
                    data.linkPid = this.pid;
                    data.seqNum = this.names.length + 1;
                    return new FM.dataApi.RdLinkName(data, this.options);
                case 'RDLINKSPEEDLIMIT':
                case 'RDLINKSPEEDLIMIT_DEPENDENT':
                    data.linkPid = this.pid;
                    if (!f) {
                        // 划线方向表示未知时，无法新增限速
                        return null;
                    } else if (f == 2) {
                        var _ref = [data.fromSpeedLimit, data.fromLimitSrc],
                            limit = _ref[0],
                            src = _ref[1];

                        data.fromSpeedLimit = data.toSpeedLimit;
                        data.fromLimitSrc = data.toLimitSrc;
                        data.toSpeedLimit = limit;
                        data.toLimitSrc = src;
                    }
                    return new FM.dataApi.RdLinkSpeedLimit(data, this.options);
                case 'RDLINKLIMIT':
                    data.linkPid = this.pid;
                    if (!f) {
                        data.limitDir = 0;
                    } else if (f == 2 && (data.limitDir == 2 || data.limitDir == 3)) {
                        data.limitDir = data.limitDir == 2 ? 3 : 2;
                    }
                    return new FM.dataApi.RdLinkLimit(data, this.options);
                case 'RDLINKTRUCKLIMIT':
                    data.linkPid = this.pid;
                    if (!f) {
                        data.limitDir = 0;
                    } else if (f == 2 && (data.limitDir == 2 || data.limitDir == 3)) {
                        data.limitDir = data.limitDir == 2 ? 3 : 2;
                    }
                    return new FM.dataApi.RdLinkTruckLimit(data, this.options);
                case 'RDLINKRTIC':
                    data.linkPid = this.pid;
                    if (!f) {
                        data.rticDir = 0;
                    } else if (f == 2 && (data.rticDir == 1 || data.rticDir == 2)) {
                        data.rticDir = data.rticDir == 1 ? 2 : 1;
                    }
                    return new FM.dataApi.RdLinkRtic(data, this.options);
                case 'RDLINKINTRTIC':
                    data.linkPid = this.pid;
                    if (!f) {
                        data.rticDir = 0;
                    } else if (f == 2 && (data.rticDir == 1 || data.rticDir == 2)) {
                        data.rticDir = data.rticDir == 1 ? 2 : 1;
                    }
                    return new FM.dataApi.RdLinkIntRtic(data, this.options);
                case 'RDLINKSIDEWALK':
                    data.linkPid = this.pid;
                    if (!f) {
                        data.workDir = 0;
                    } else if (f == 2 && (data.workDir == 1 || data.workDir == 2)) {
                        data.workDir = data.workDir == 1 ? 2 : 1;
                    }
                    return new FM.dataApi.RdLinkSideWalk(data, this.options);
                case 'RDLINKWALKSTAIR':
                    data.linkPid = this.pid;
                    if (!f) {
                        data.workDir = 0;
                    } else if (f == 2 && (data.workDir == 1 || data.workDir == 2)) {
                        data.workDir = data.workDir == 1 ? 2 : 1;
                    }
                    return new FM.dataApi.RdLinkWalkStair(data, this.options);
                case 'RDLINKZONE':
                    data.linkPid = this.pid;
                    return new FM.dataApi.RdLinkZone(data, this.options);
                default:
                    return null;
            }
        }
    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdLink.prototype.__proto__ || Object.getPrototypeOf(RdLink.prototype), 'exclude', this).concat(['sNodePid', 'eNodePid', 'tmclocations']);
        }
    }]);

    return RdLink;
}(_Feature3.default);

exports.default = RdLink;

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * link形态
 */
var RdLinkForm = function (_Feature) {
    _inherits(RdLinkForm, _Feature);

    function RdLinkForm() {
        _classCallCheck(this, RdLinkForm);

        return _possibleConstructorReturn(this, (RdLinkForm.__proto__ || Object.getPrototypeOf(RdLinkForm)).apply(this, arguments));
    }

    _createClass(RdLinkForm, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLINKFORM';
            if (!data.linkPid) {
                throw new Error('form对象没有对应link');
            } else {
                this.id = data.linkPid;
            }
            this.linkPid = data.linkPid || '';
            this.rowId = data.rowId || null;
            if (typeof data.formOfWay !== 'undefined') {
                this.formOfWay = data.formOfWay;
            } else {
                this.formOfWay = 1;
            }
            this.extendedForm = data.extendedForm || 0;
            this.auxiFlag = data.auxiFlag || 0;
            this.kgFlag = data.kgFlag || 0;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.formOfWay = this.formOfWay;
            data.extendedForm = this.extendedForm;
            data.auxiFlag = this.auxiFlag;
            data.kgFlag = this.kgFlag;

            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.formOfWay = this.formOfWay;
            data.extendedForm = this.extendedForm;
            data.auxiFlag = this.auxiFlag;
            data.kgFlag = this.kgFlag;

            return data;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'match',

        /**
         * 判断两个数据模型对象是否一致
         * @param  {object} des      - 要合并数据模型对象
         * @param  {object} options  - 合并操作的其他选项
         * @return {object} 合并后的源数据模型对象，即变更的this对象
         */
        value: function match() {
            var des = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this.formOfWay == des.formOfWay;
        }
    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdLinkForm.prototype.__proto__ || Object.getPrototypeOf(RdLinkForm.prototype), 'exclude', this).concat(['id', 'linkPid', 'formOfWay']);
        }
    }]);

    return RdLinkForm;
}(_Feature3.default);

exports.default = RdLinkForm;

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * rtic互联网客户
 */
var RdLinkIntRtic = function (_Feature) {
    _inherits(RdLinkIntRtic, _Feature);

    function RdLinkIntRtic() {
        _classCallCheck(this, RdLinkIntRtic);

        return _possibleConstructorReturn(this, (RdLinkIntRtic.__proto__ || Object.getPrototypeOf(RdLinkIntRtic)).apply(this, arguments));
    }

    _createClass(RdLinkIntRtic, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLINKINTRTIC';
            if (!data.linkPid) {
                throw new Error('form对象没有对应link');
            } else {
                this.id = data.linkPid;
            }

            this.linkPid = data.linkPid || '';
            this.rowId = data.rowId || null;
            this.code = data.code || 0;
            this.rank = data.rank || 0;
            this.rticDir = data.rticDir || 0;
            this.updownFlag = data.updownFlag || 0;
            // this.rangeType = data.rangeType || 0;
            if (typeof data.rangeType !== 'undefined') {
                this.rangeType = data.rangeType;
            } else {
                this.rangeType = 1;
            }
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.code = this.code;
            data.rank = this.rank;
            data.rticDir = this.rticDir;
            data.updownFlag = this.updownFlag;
            data.rangeType = this.rangeType;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.code = this.code;
            data.rank = this.rank;
            data.rticDir = this.rticDir;
            data.updownFlag = this.updownFlag;
            data.rangeType = this.rangeType;

            return data;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'match',

        /**
         * 判断两个数据模型对象是否一致
         * @param  {object} des      - 要合并数据模型对象
         * @param  {object} options  - 合并操作的其他选项
         * @return {object} 合并后的源数据模型对象，即变更的this对象
         */
        value: function match() {
            var des = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (!options.sameDirect) {
                return false;
            }

            var f = _get(RdLinkIntRtic.prototype.__proto__ || Object.getPrototypeOf(RdLinkIntRtic.prototype), 'match', this).call(this, des, options); // 其他属性完全匹配

            if (f) {
                if (options.sameDirect == 2 && (this.rticDir == 1 || this.rticDir == 2) && (des.rticDir == 1 || des.rticDir == 2)) {
                    return this.rticDir != des.rticDir;
                }
                return this.rticDir == des.rticDir;
            }

            return false;
        }
        /**
         * 批量编辑方法：使用编辑后的虚拟数据模型对象更新原始数据模型对象
         * 该方法在批量编辑完成时调用
         * @param  {Object}   vDataModel   合并后的虚拟数据模型对象
         * @param  {Object}   options      其他选项
         * @return {undefined}
         */

    }, {
        key: 'update',
        value: function update() {
            var vDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var f = options.sameDirect;
            if (!f) {
                return;
            }
            if (vDataModel.propertyChanged('rticDir')) {
                if (f == 2 && (vDataModel.rticDir == 1 || vDataModel.rticDir == 2)) {
                    this.rticDir = vDataModel.rticDir == 1 ? 2 : 1;
                } else {
                    this.rticDir = vDataModel.rticDir;
                }
            }

            _get(RdLinkIntRtic.prototype.__proto__ || Object.getPrototypeOf(RdLinkIntRtic.prototype), 'update', this).call(this, vDataModel, options);
        }
    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdLinkIntRtic.prototype.__proto__ || Object.getPrototypeOf(RdLinkIntRtic.prototype), 'exclude', this).concat(['id', 'linkPid', 'rticDir']);
        }
    }]);

    return RdLinkIntRtic;
}(_Feature3.default);

exports.default = RdLinkIntRtic;

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * link限制
 */
var RdLinkLimit = function (_Feature) {
    _inherits(RdLinkLimit, _Feature);

    function RdLinkLimit() {
        _classCallCheck(this, RdLinkLimit);

        return _possibleConstructorReturn(this, (RdLinkLimit.__proto__ || Object.getPrototypeOf(RdLinkLimit)).apply(this, arguments));
    }

    _createClass(RdLinkLimit, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLINKLIMIT';
            if (!data.linkPid) {
                throw new Error('form对象没有对应link');
            } else {
                this.id = data.linkPid;
            }

            this.linkPid = data.linkPid || '';
            this.rowId = data.rowId || null;
            if (typeof data.type !== 'undefined') {
                this.type = data.type;
            } else {
                this.type = 3;
            }
            this.limitDir = data.limitDir || 0;
            this.timeDomain = data.timeDomain || '';
            this.vehicle = data.vehicle || 0;
            if (typeof data.tollType !== 'undefined') {
                this.tollType = data.tollType;
            } else {
                this.tollType = 9;
            }
            if (typeof data.weather !== 'undefined') {
                this.weather = data.weather;
            } else {
                this.weather = 9;
            }
            this.inputTime = data.inputTime || '';
            this.processFlag = data.processFlag || 0;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.type = this.type;
            data.limitDir = this.limitDir;
            data.timeDomain = this.timeDomain;
            data.vehicle = this.vehicle;
            data.tollType = this.tollType;
            data.weather = this.weather;
            data.inputTime = this.inputTime;
            data.processFlag = this.processFlag;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.type = this.type;
            data.limitDir = this.limitDir;
            data.timeDomain = this.timeDomain;
            data.vehicle = this.vehicle;
            data.tollType = this.tollType;
            data.weather = this.weather;
            data.inputTime = this.inputTime;
            data.processFlag = this.processFlag;

            return data;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'match',

        /**
         * 判断两个数据模型对象是否一致
         * @param  {object} des      - 要合并数据模型对象
         * @param  {object} options  - 合并操作的其他选项
         * @return {object} 合并后的源数据模型对象，即变更的this对象
         */
        value: function match() {
            var des = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var f = _get(RdLinkLimit.prototype.__proto__ || Object.getPrototypeOf(RdLinkLimit.prototype), 'match', this).call(this, des, options); // 其他属性完全匹配

            if (f) {
                if ((this.limitDir == 2 || this.limitDir == 3) && (des.limitDir == 2 || des.limitDir == 3)) {
                    if (!options.sameDirect) {
                        // 限制方向为顺逆，且划线方向标识未知时，判定为不匹配
                        return false;
                    } else if (options.sameDirect == 2) {
                        return this.limitDir != des.limitDir;
                    }
                }
                return this.limitDir == des.limitDir;
            }

            return false;
        }
        /**
         * 批量编辑方法：使用编辑后的虚拟数据模型对象更新原始数据模型对象
         * 该方法在批量编辑完成时调用
         * @param  {Object}   vDataModel   合并后的虚拟数据模型对象
         * @param  {Object}   options      其他选项
         * @return {undefined}
         */

    }, {
        key: 'update',
        value: function update() {
            var vDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var f = options.sameDirect;
            if (vDataModel.propertyChanged('limitDir')) {
                if (vDataModel.limitDir == 2 || vDataModel.limitDir == 3) {
                    if (!f) {
                        // 限制方向为顺逆，且划线方向标识未知时，不更新
                        return;
                    } else if (f == 1) {
                        this.limitDir = vDataModel.limitDir;
                    } else if (f == 2) {
                        this.limitDir = vDataModel.limitDir == 2 ? 3 : 2;
                    }
                } else {
                    this.limitDir = vDataModel.limitDir;
                }
            }

            _get(RdLinkLimit.prototype.__proto__ || Object.getPrototypeOf(RdLinkLimit.prototype), 'update', this).call(this, vDataModel, options);
        }
    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdLinkLimit.prototype.__proto__ || Object.getPrototypeOf(RdLinkLimit.prototype), 'exclude', this).concat(['id', 'linkPid', 'limitDir', 'inputTime']);
        }
    }]);

    return RdLinkLimit;
}(_Feature3.default);

exports.default = RdLinkLimit;

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * link与名称关系
 */
var RdLinkName = function (_Feature) {
    _inherits(RdLinkName, _Feature);

    function RdLinkName() {
        _classCallCheck(this, RdLinkName);

        return _possibleConstructorReturn(this, (RdLinkName.__proto__ || Object.getPrototypeOf(RdLinkName)).apply(this, arguments));
    }

    _createClass(RdLinkName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLINKNAME';
            if (!data.linkPid) {
                throw new Error('form对象没有对应link');
            } else {
                this.id = data.linkPid;
            }

            this.linkPid = data.linkPid || '';
            this.rowId = data.rowId || null;
            this.nameGroupid = data.nameGroupid || 0;
            if (typeof data.seqNum !== 'undefined') {
                this.seqNum = data.seqNum;
            } else {
                this.seqNum = 1;
            }
            // this.seqNum = data.seqNum || 1;
            this.name = data.name || '';
            this.nameClass = data.nameClass || 1;
            this.inputTime = data.inputTime || '';
            this.nameType = data.nameType || 0;
            if (typeof data.srcFlag !== 'undefined') {
                this.srcFlag = data.srcFlag;
            } else {
                this.srcFlag = 9;
            }
            this.routeAtt = data.routeAtt || 0;
            this.code = data.code || 0;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.nameGroupid = this.nameGroupid;
            data.name = this.name;
            data.seqNum = this.seqNum;
            data.nameClass = parseInt(this.nameClass, 10);
            data.inputTime = this.inputTime;
            data.nameType = this.nameType;
            data.srcFlag = this.srcFlag;
            data.routeAtt = this.routeAtt;
            data.code = parseInt(this.code, 10);
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.nameGroupid = this.nameGroupid;
            data.name = this.name;
            data.seqNum = this.seqNum;
            data.nameClass = parseInt(this.nameClass, 10);
            data.inputTime = this.inputTime;
            data.nameType = this.nameType;
            data.srcFlag = this.srcFlag;
            data.routeAtt = this.routeAtt;
            data.code = parseInt(this.code, 10);

            return data;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'match',

        /**
         * 判断两个数据模型对象是否一致
         * @param  {object} des      - 要合并数据模型对象
         * @param  {object} options  - 合并操作的其他选项
         * @return {object} 合并后的源数据模型对象，即变更的this对象
         */
        value: function match() {
            var des = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this.nameGroupid == des.nameGroupid && this.nameClass == des.nameClass && this.nameType == des.nameType;
        }
    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdLinkName.prototype.__proto__ || Object.getPrototypeOf(RdLinkName.prototype), 'exclude', this).concat(['id', 'linkPid', 'inputTime', 'seqNum', 'nameGroupid']);
        }
    }]);

    return RdLinkName;
}(_Feature3.default);

exports.default = RdLinkName;

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * rtic 车导客户
 */
var RdLinkRtic = function (_Feature) {
    _inherits(RdLinkRtic, _Feature);

    function RdLinkRtic() {
        _classCallCheck(this, RdLinkRtic);

        return _possibleConstructorReturn(this, (RdLinkRtic.__proto__ || Object.getPrototypeOf(RdLinkRtic)).apply(this, arguments));
    }

    _createClass(RdLinkRtic, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLINKRTIC';
            if (!data.linkPid) {
                throw new Error('form对象没有对应link');
            }

            this.linkPid = data.linkPid || '';
            this.rowId = data.rowId || null;
            this.code = data.code || 0;
            this.rank = data.rank || 0;
            this.rticDir = data.rticDir || 0;
            this.updownFlag = data.updownFlag || 0;
            if (typeof data.rangeType !== 'undefined') {
                this.rangeType = data.rangeType;
            } else {
                this.rangeType = 1;
            }
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.code = this.code;
            data.rank = this.rank;
            data.rticDir = this.rticDir;
            data.updownFlag = this.updownFlag;
            data.rangeType = this.rangeType;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.code = this.code;
            data.rank = this.rank;
            data.rticDir = this.rticDir;
            data.updownFlag = this.updownFlag;
            data.rangeType = this.rangeType;

            return data;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'match',

        /**
         * 判断两个数据模型对象是否一致
         * @param  {object} des      - 要合并数据模型对象
         * @param  {object} options  - 合并操作的其他选项
         * @return {object} 合并后的源数据模型对象，即变更的this对象
         */
        value: function match() {
            var des = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (!options.sameDirect) {
                return false;
            }

            var f = _get(RdLinkRtic.prototype.__proto__ || Object.getPrototypeOf(RdLinkRtic.prototype), 'match', this).call(this, des, options); // 其他属性完全匹配

            if (f) {
                if (options.sameDirect == 2 && (this.rticDir == 1 || this.rticDir == 2) && (des.rticDir == 1 || des.rticDir == 2)) {
                    return this.rticDir != des.rticDir;
                }
                return this.rticDir == des.rticDir;
            }

            return false;
        }
        /**
         * 批量编辑方法：使用编辑后的虚拟数据模型对象更新原始数据模型对象
         * 该方法在批量编辑完成时调用
         * @param  {Object}   vDataModel   合并后的虚拟数据模型对象
         * @param  {Object}   options      其他选项
         * @return {undefined}
         */

    }, {
        key: 'update',
        value: function update() {
            var vDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var f = options.sameDirect;
            if (!f) {
                return;
            }
            if (vDataModel.propertyChanged('rticDir')) {
                if (f == 2 && (vDataModel.rticDir == 1 || vDataModel.rticDir == 2)) {
                    this.rticDir = vDataModel.rticDir == 1 ? 2 : 1;
                } else {
                    this.rticDir = vDataModel.rticDir;
                }
            }

            _get(RdLinkRtic.prototype.__proto__ || Object.getPrototypeOf(RdLinkRtic.prototype), 'update', this).call(this, vDataModel, options);
        }
    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdLinkRtic.prototype.__proto__ || Object.getPrototypeOf(RdLinkRtic.prototype), 'exclude', this).concat(['linkPid', 'rticDir']);
        }
    }]);

    return RdLinkRtic;
}(_Feature3.default);

exports.default = RdLinkRtic;

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 人行便道
 */
var RdLinkSideWalk = function (_Feature) {
    _inherits(RdLinkSideWalk, _Feature);

    function RdLinkSideWalk() {
        _classCallCheck(this, RdLinkSideWalk);

        return _possibleConstructorReturn(this, (RdLinkSideWalk.__proto__ || Object.getPrototypeOf(RdLinkSideWalk)).apply(this, arguments));
    }

    _createClass(RdLinkSideWalk, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLINKSIDEWALK';
            if (!data.linkPid) {
                throw new Error('form对象没有对应link');
            } else {
                this.id = data.linkPid;
            }

            this.linkPid = data.linkPid || '';
            this.rowId = data.rowId || null;
            this.sidewalkLoc = data.sidewalkLoc || 0;
            this.dividerType = data.dividerType || 0;
            this.workDir = data.workDir || 0;
            this.processFlag = data.processFlag || 0;
            this.captureFlag = data.captureFlag || 0;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.sidewalkLoc = this.sidewalkLoc;
            data.dividerType = this.dividerType;
            data.workDir = this.workDir;
            data.processFlag = this.processFlag;
            data.captureFlag = this.captureFlag;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.sidewalkLoc = this.sidewalkLoc;
            data.dividerType = this.dividerType;
            data.workDir = this.workDir;
            data.processFlag = this.processFlag;
            data.captureFlag = this.captureFlag;

            return data;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'match',

        /**
         * 判断两个数据模型对象是否一致
         * @param  {object} des      - 要合并数据模型对象
         * @param  {object} options  - 合并操作的其他选项
         * @return {object} 合并后的源数据模型对象，即变更的this对象
         */
        value: function match() {
            var des = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (!options.sameDirect) {
                return false;
            }

            var f = _get(RdLinkSideWalk.prototype.__proto__ || Object.getPrototypeOf(RdLinkSideWalk.prototype), 'match', this).call(this, des, options); // 其他属性完全匹配

            if (f) {
                if (options.sameDirect == 2 && (this.workDir == 1 || this.workDir == 2) && (des.workDir == 1 || des.workDir == 2)) {
                    return this.workDir != des.workDir;
                }
                return this.workDir == des.workDir;
            }

            return false;
        }
        /**
         * 批量编辑方法：使用编辑后的虚拟数据模型对象更新原始数据模型对象
         * 该方法在批量编辑完成时调用
         * @param  {Object}   vDataModel   合并后的虚拟数据模型对象
         * @param  {Object}   options      其他选项
         * @return {undefined}
         */

    }, {
        key: 'update',
        value: function update() {
            var vDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var f = options.sameDirect;
            if (!f) {
                return;
            }
            if (vDataModel.propertyChanged('workDir')) {
                if (f == 2 && (vDataModel.workDir == 1 || vDataModel.workDir == 2)) {
                    this.workDir = vDataModel.workDir == 1 ? 2 : 1;
                } else {
                    this.workDir = vDataModel.workDir;
                }
            }

            _get(RdLinkSideWalk.prototype.__proto__ || Object.getPrototypeOf(RdLinkSideWalk.prototype), 'update', this).call(this, vDataModel, options);
        }
    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdLinkSideWalk.prototype.__proto__ || Object.getPrototypeOf(RdLinkSideWalk.prototype), 'exclude', this).concat(['id', 'linkPid', 'workDir']);
        }
    }]);

    return RdLinkSideWalk;
}(_Feature3.default);

exports.default = RdLinkSideWalk;

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * link限速
 */
var RdLinkSpeedLimit = function (_Feature) {
    _inherits(RdLinkSpeedLimit, _Feature);

    function RdLinkSpeedLimit() {
        _classCallCheck(this, RdLinkSpeedLimit);

        return _possibleConstructorReturn(this, (RdLinkSpeedLimit.__proto__ || Object.getPrototypeOf(RdLinkSpeedLimit)).apply(this, arguments));
    }

    _createClass(RdLinkSpeedLimit, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLINKSPEEDLIMIT';
            this.linkPid = data.linkPid;
            this.rowId = data.rowId || null;
            this.speedType = data.speedType || 0;
            if (this.speedType === 3) {
                this.geoLiveType = 'RDLINKSPEEDLIMIT_DEPENDENT';
            }

            this.fromSpeedLimit = data.fromSpeedLimit || 0;
            this.toSpeedLimit = data.toSpeedLimit || 0;
            this.speedClass = data.speedClass || 0;
            this.fromLimitSrc = data.fromLimitSrc || 0;
            this.toLimitSrc = data.toLimitSrc || 0;
            this.speedDependent = data.speedDependent || 0;
            this.timeDomain = data.timeDomain || '';
            if (typeof data.speedClassWork !== 'undefined') {
                this.speedClassWork = data.speedClassWork;
            } else {
                this.speedClassWork = 1;
            }

            // 批量编辑线限速时用
            this.direct = data.direct;
            this.pid = this.linkPid + '-' + this.direct + '-' + this.speedType + '-' + this.speedDependent;
            this.links = [];
            if (data.links) {
                this.links = data.links;
            }
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.speedType = this.speedType;
            data.fromSpeedLimit = this.fromSpeedLimit;
            data.toSpeedLimit = this.toSpeedLimit;
            data.speedClass = this.speedClass;
            data.fromLimitSrc = this.fromLimitSrc;
            data.toLimitSrc = this.toLimitSrc;
            data.speedDependent = this.speedDependent;
            data.timeDomain = this.timeDomain;
            data.speedClassWork = this.speedClassWork;

            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.speedType = this.speedType;
            data.fromSpeedLimit = this.fromSpeedLimit;
            data.toSpeedLimit = this.toSpeedLimit;
            data.speedClass = this.speedClass;
            data.fromLimitSrc = this.fromLimitSrc;
            data.toLimitSrc = this.toLimitSrc;
            data.speedDependent = this.speedDependent;
            data.timeDomain = this.timeDomain;
            data.speedClassWork = parseInt(this.speedClassWork, 10);

            return data;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'match',

        /**
         * 判断两个数据模型对象是否一致
         * @param  {object} des      - 要合并数据模型对象
         * @param  {object} options  - 合并操作的其他选项
         * @return {object} 合并后的源数据模型对象，即变更的this对象
         */
        value: function match() {
            var des = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this.speedType == des.speedType && this.speedDependent == des.speedDependent;
        }
        /**
         * 合并两个数据模型对象
         * @param  {object} des      - 要合并数据模型对象
         * @param  {object} options  - 合并操作的其他选项
         * @return {undefined}
         */

    }, {
        key: 'merge',
        value: function merge() {
            var des = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var f = options.sameDirect;
            var opts = FM.Util.clone(options);
            if (!f) {
                this.fromSpeedLimit = -1;
                this.toSpeedLimit = -1;
                this.fromLimitSrc = -1;
                this.toLimitSrc = -1;
            } else if (f == 2) {
                if (this.fromSpeedLimit != des.toSpeedLimit) {
                    this.fromSpeedLimit = -1;
                }
                if (this.toSpeedLimit != des.fromSpeedLimit) {
                    this.toSpeedLimit = -1;
                }
                if (this.fromLimitSrc != des.toLimitSrc) {
                    this.fromLimitSrc = -1;
                }
                if (this.toLimitSrc != des.fromLimitSrc) {
                    this.toLimitSrc = -1;
                }
                opts.rules = ['fromSpeedLimit', 'toSpeedLimit', 'fromLimitSrc', 'toLimitSrc'].concat(opts.rules || []);
            }
            _get(RdLinkSpeedLimit.prototype.__proto__ || Object.getPrototypeOf(RdLinkSpeedLimit.prototype), 'merge', this).call(this, des, opts);
        }
        /**
         * 批量编辑方法：使用编辑后的虚拟数据模型对象更新原始数据模型对象
         * 该方法在批量编辑完成时调用
         * @param  {Object}   vDataModel   合并后的虚拟数据模型对象
         * @param  {Object}   options      其他选项
         * @return {undefined}
         */

    }, {
        key: 'update',
        value: function update() {
            var vDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var f = options.sameDirect;
            if (!f) {
                return;
            }
            var opts = FM.Util.clone(options);
            if (f == 2) {
                if (vDataModel.propertyChanged('fromSpeedLimit')) {
                    this.toSpeedLimit = vDataModel.fromSpeedLimit;
                }
                if (vDataModel.propertyChanged('toSpeedLimit')) {
                    this.fromSpeedLimit = vDataModel.toSpeedLimit;
                }
                if (vDataModel.propertyChanged('fromLimitSrc')) {
                    this.toLimitSrc = vDataModel.fromLimitSrc;
                }
                if (vDataModel.propertyChanged('toLimitSrc')) {
                    this.fromLimitSrc = vDataModel.toLimitSrc;
                }
                opts.rules = ['fromSpeedLimit', 'toSpeedLimit', 'fromLimitSrc', 'toLimitSrc'].concat(opts.rules || []);
            }
            _get(RdLinkSpeedLimit.prototype.__proto__ || Object.getPrototypeOf(RdLinkSpeedLimit.prototype), 'update', this).call(this, vDataModel, opts);
        }
    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdLinkSpeedLimit.prototype.__proto__ || Object.getPrototypeOf(RdLinkSpeedLimit.prototype), 'exclude', this).concat(['linkPid', 'speedType']);
        }
    }]);

    return RdLinkSpeedLimit;
}(_Feature3.default);

exports.default = RdLinkSpeedLimit;

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 卡车限制
 */
var RdLinkTruckLimit = function (_Feature) {
    _inherits(RdLinkTruckLimit, _Feature);

    function RdLinkTruckLimit() {
        _classCallCheck(this, RdLinkTruckLimit);

        return _possibleConstructorReturn(this, (RdLinkTruckLimit.__proto__ || Object.getPrototypeOf(RdLinkTruckLimit)).apply(this, arguments));
    }

    _createClass(RdLinkTruckLimit, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLINKTRUCKLIMIT';
            if (!data.linkPid) {
                throw new Error('form对象没有对应link');
            }

            this.linkPid = data.linkPid || '';
            this.rowId = data.rowId || null;
            this.limitDir = data.limitDir || 0;
            this.timeDomain = data.timeDomain || '';
            this.resTrailer = data.resTrailer || 0;
            this.resWeigh = data.resWeigh || 0;
            this.resAxleLoad = data.resAxleLoad || 0;
            this.resAxleCount = data.resAxleCount || 0;
            this.resOut = data.resOut || 0;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.limitDir = this.limitDir;
            data.timeDomain = this.timeDomain;
            data.resTrailer = this.resTrailer;
            data.resWeigh = this.resWeigh;
            data.resAxleLoad = this.resAxleLoad;
            data.resAxleCount = this.resAxleCount;
            data.resOut = this.resOut;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.limitDir = this.limitDir;
            data.timeDomain = this.timeDomain;
            data.resTrailer = this.resTrailer;
            data.resWeigh = this.resWeigh;
            data.resAxleLoad = this.resAxleLoad;
            data.resAxleCount = this.resAxleCount;
            data.resOut = parseInt(this.resOut, 10);

            return data;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'match',

        /**
         * 判断两个数据模型对象是否一致
         * @param  {object} des      - 要合并数据模型对象
         * @param  {object} options  - 合并操作的其他选项
         * @return {object} 合并后的源数据模型对象，即变更的this对象
         */
        value: function match() {
            var des = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var f = _get(RdLinkTruckLimit.prototype.__proto__ || Object.getPrototypeOf(RdLinkTruckLimit.prototype), 'match', this).call(this, des, options); // 其他属性完全匹配

            if (f) {
                if ((this.limitDir == 2 || this.limitDir == 3) && (des.limitDir == 2 || des.limitDir == 3)) {
                    if (!options.sameDirect) {
                        // 限制方向为顺逆，且划线方向标识未知时，判定为不匹配
                        return false;
                    } else if (options.sameDirect == 2) {
                        return this.limitDir != des.limitDir;
                    }
                }
                return this.limitDir == des.limitDir;
            }

            return false;
        }
        /**
         * 批量编辑方法：使用编辑后的虚拟数据模型对象更新原始数据模型对象
         * 该方法在批量编辑完成时调用
         * @param  {Object}   vDataModel   合并后的虚拟数据模型对象
         * @param  {Object}   options      其他选项
         * @return {undefined}
         */

    }, {
        key: 'update',
        value: function update() {
            var vDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var f = options.sameDirect;
            if (vDataModel.propertyChanged('limitDir')) {
                if (vDataModel.limitDir == 2 || vDataModel.limitDir == 3) {
                    if (!f) {
                        // 限制方向为顺逆，且划线方向标识未知时，不更新
                        return;
                    } else if (f == 1) {
                        this.limitDir = vDataModel.limitDir;
                    } else if (f == 2) {
                        this.limitDir = vDataModel.limitDir == 2 ? 3 : 2;
                    }
                } else {
                    this.limitDir = vDataModel.limitDir;
                }
            }

            _get(RdLinkTruckLimit.prototype.__proto__ || Object.getPrototypeOf(RdLinkTruckLimit.prototype), 'update', this).call(this, vDataModel, options);
        }
    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdLinkTruckLimit.prototype.__proto__ || Object.getPrototypeOf(RdLinkTruckLimit.prototype), 'exclude', this).concat(['linkPid', 'limitDir']);
        }
    }]);

    return RdLinkTruckLimit;
}(_Feature3.default);

exports.default = RdLinkTruckLimit;

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 人行阶梯
 */
var RdLinkWalkStair = function (_Feature) {
    _inherits(RdLinkWalkStair, _Feature);

    function RdLinkWalkStair() {
        _classCallCheck(this, RdLinkWalkStair);

        return _possibleConstructorReturn(this, (RdLinkWalkStair.__proto__ || Object.getPrototypeOf(RdLinkWalkStair)).apply(this, arguments));
    }

    _createClass(RdLinkWalkStair, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLINKWALKSTAIR';
            if (!data.linkPid) {
                throw new Error('form对象没有对应link');
            }

            this.linkPid = data.linkPid || '';
            this.rowId = data.rowId || null;
            this.stairLoc = data.stairLoc || 0;
            this.stairFlag = data.stairFlag || 0;
            this.workDir = data.workDir || 0;
            this.captureFlag = data.captureFlag || 0;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.stairLoc = this.stairLoc;
            data.stairFlag = this.stairFlag;
            data.workDir = this.workDir;
            data.captureFlag = this.captureFlag;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.stairLoc = this.stairLoc;
            data.stairFlag = this.stairFlag;
            data.workDir = this.workDir;
            data.captureFlag = this.captureFlag;

            return data;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'match',

        /**
         * 判断两个数据模型对象是否一致
         * @param  {object} des      - 要合并数据模型对象
         * @param  {object} options  - 合并操作的其他选项
         * @return {object} 合并后的源数据模型对象，即变更的this对象
         */
        value: function match() {
            var des = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (!options.sameDirect) {
                return false;
            }

            var f = _get(RdLinkWalkStair.prototype.__proto__ || Object.getPrototypeOf(RdLinkWalkStair.prototype), 'match', this).call(this, des, options); // 其他属性完全匹配

            if (f) {
                if (options.sameDirect == 2 && (this.workDir == 1 || this.workDir == 2) && (des.workDir == 1 || des.workDir == 2)) {
                    return this.workDir != des.workDir;
                }
                return this.workDir == des.workDir;
            }

            return false;
        }
        /**
         * 批量编辑方法：使用编辑后的虚拟数据模型对象更新原始数据模型对象
         * 该方法在批量编辑完成时调用
         * @param  {Object}   vDataModel   合并后的虚拟数据模型对象
         * @param  {Object}   options      其他选项
         * @return {undefined}
         */

    }, {
        key: 'update',
        value: function update() {
            var vDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var f = options.sameDirect;
            if (!f) {
                return;
            }
            if (vDataModel.propertyChanged('workDir')) {
                if (f == 2 && (vDataModel.workDir == 1 || vDataModel.workDir == 2)) {
                    this.workDir = vDataModel.workDir == 1 ? 2 : 1;
                } else {
                    this.workDir = vDataModel.workDir;
                }
            }

            _get(RdLinkWalkStair.prototype.__proto__ || Object.getPrototypeOf(RdLinkWalkStair.prototype), 'update', this).call(this, vDataModel, options);
        }
    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdLinkWalkStair.prototype.__proto__ || Object.getPrototypeOf(RdLinkWalkStair.prototype), 'exclude', this).concat(['linkPid', 'workDir']);
        }
    }]);

    return RdLinkWalkStair;
}(_Feature3.default);

exports.default = RdLinkWalkStair;

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 警示信息
 */
var RdLinkWarning = function (_Feature) {
  _inherits(RdLinkWarning, _Feature);

  function RdLinkWarning() {
    _classCallCheck(this, RdLinkWarning);

    return _possibleConstructorReturn(this, (RdLinkWarning.__proto__ || Object.getPrototypeOf(RdLinkWarning)).apply(this, arguments));
  }

  _createClass(RdLinkWarning, [{
    key: 'setAttributes',

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data - 接口返回的数据
     * @return {undefined}
     */
    value: function setAttributes(data) {
      this.geoLiveType = 'RDLINKWARNING';
      this.pid = data.pid || null;
      this.linkPid = data.linkPid;
      this.direct = data.direct || 0;
      this.geometry = data.geometry;
      this.typeCode = data.typeCode || null;
      this.validDis = data.validDis || 0;
      this.warnDis = data.warnDis || 0;
      this.timeDomain = data.timeDomain || '';
      this.vehicle = data.vehicle || 0;
      this.descript = data.descript || null;
      this.rowId = data.rowId || null;
    }
    /**
     * 模型转换函数，获取的数据片段
     * @return {object} 格式化后的片段数据
     */

  }, {
    key: 'getSnapShot',
    value: function getSnapShot() {
      var data = {};
      data.pid = this.pid;
      data.linkPid = this.linkPid;
      data.direct = this.direct;
      data.geometry = this.geometry;
      data.typeCode = this.typeCode;
      data.validDis = this.validDis;
      data.warnDis = this.warnDis;
      data.timeDomain = this.timeDomain;
      data.vehicle = this.vehicle;
      data.descript = this.descript;
      data.rowId = this.rowId;
      data.geoLiveType = this.geoLiveType;

      return data;
    }
    /**
     * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
     * @return {object} 前端传递给服务的参数数据
     */

  }, {
    key: 'getIntegrate',
    value: function getIntegrate() {
      var data = {};
      data.pid = this.pid;
      data.linkPid = this.linkPid;
      data.direct = this.direct;
      data.geometry = this.geometry;
      data.typeCode = this.typeCode;
      data.validDis = this.validDis;
      data.warnDis = this.warnDis;
      data.timeDomain = this.timeDomain;
      data.vehicle = this.vehicle;
      data.descript = this.descript;
      // data.geoLiveType = this.geoLiveType;

      return data;
    }
  }]);

  return RdLinkWarning;
}(_Feature3.default);

exports.default = RdLinkWarning;

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * link与zone
 */
var RdLinkZone = function (_Feature) {
    _inherits(RdLinkZone, _Feature);

    function RdLinkZone() {
        _classCallCheck(this, RdLinkZone);

        return _possibleConstructorReturn(this, (RdLinkZone.__proto__ || Object.getPrototypeOf(RdLinkZone)).apply(this, arguments));
    }

    _createClass(RdLinkZone, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDLINKZONE';
            if (!data.linkPid) {
                throw new Error('form对象没有对应link');
            }

            this.linkPid = data.linkPid || '';
            this.rowId = data.rowId || null;
            this.regionId = data.regionId || 0;
            this.type = data.type || 0;
            this.side = data.side || 0;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.regionId = this.regionId;
            data.type = this.type;
            data.side = this.side;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.rowId = this.rowId;
            data.regionId = this.regionId;
            data.type = this.type;
            data.side = this.side;

            return data;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdLinkZone.prototype.__proto__ || Object.getPrototypeOf(RdLinkZone.prototype), 'exclude', this).concat(['linkPid']);
        }
    }]);

    return RdLinkZone;
}(_Feature3.default);

exports.default = RdLinkZone;

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 里程桩
 */
var RdMileagePile = function (_Feature) {
    _inherits(RdMileagePile, _Feature);

    function RdMileagePile() {
        _classCallCheck(this, RdMileagePile);

        return _possibleConstructorReturn(this, (RdMileagePile.__proto__ || Object.getPrototypeOf(RdMileagePile)).apply(this, arguments));
    }

    _createClass(RdMileagePile, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDMILEAGEPILE';
            this.pid = data.pid || '';
            this.mileageNum = data.mileageNum;
            this.linkPid = data.linkPid;
            this.direct = data.direct;
            this.roadName = data.roadName;
            this.roadNum = data.roadNum;
            this.roadType = data.roadType;
            this.source = data.source;
            this.dllx = data.dllx;
            this.geometry = data.geometry;
            this.meshId = data.meshId;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.mileageNum = this.mileageNum;
            data.linkPid = this.linkPid;
            data.direct = this.direct || 0;
            data.roadName = this.roadName || '';
            data.roadNum = this.roadNum || '';
            data.roadType = this.roadType || 1;
            data.source = this.source || 1;
            data.dllx = this.dllx || '';
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.mileageNum = parseFloat(this.mileageNum);
            data.linkPid = this.linkPid;
            data.direct = this.direct || 0;
            data.roadName = this.roadName || '';
            data.roadNum = this.roadNum || '';
            data.roadType = this.roadType || 1;
            data.source = this.source || 1;
            data.dllx = this.dllx || '';
            data.geometry = this.geometry;
            data.meshId = this.meshId || 0;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdMileagePile;
}(_Feature3.default);

exports.default = RdMileagePile;

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * rdnode
 */
var RdNode = function (_Feature) {
    _inherits(RdNode, _Feature);

    function RdNode() {
        _classCallCheck(this, RdNode);

        return _possibleConstructorReturn(this, (RdNode.__proto__ || Object.getPrototypeOf(RdNode)).apply(this, arguments));
    }

    _createClass(RdNode, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDNODE';
            this.pid = data.pid || '';
            this.kind = data.kind || 1;
            this.geometry = data.geometry || null;
            if (typeof data.adasFlag !== 'undefined') {
                this.adasFlag = data.adasFlag;
            } else {
                this.adasFlag = 2;
            }
            if (typeof data.editFlag !== 'undefined') {
                this.editFlag = data.editFlag;
            } else {
                this.editFlag = 1;
            }
            this.difGroupid = data.difGroupid || '';
            this.srcFlag = data.srcFlag || 6;
            this.digitalLevel = data.digitalLevel || 0;
            this.reserved = data.reserved || '';
            this.forms = [];
            this.meshes = [];

            for (var i = 0; i < data.forms.length; i++) {
                var form = new FM.dataApi.RdNodeForm(data.forms[i], this.options);
                this.forms.push(form);
            }

            for (var j = 0; j < data.meshes.length; j++) {
                var mesh = new FM.dataApi.RdNodeMesh(data.meshes[j], this.options);
                this.meshes.push(mesh);
            }

            this.links = data.links || [];
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.kind = this.kind;
            data.geometry = this.geometry;
            data.adasFlag = this.adasFlag;
            data.editFlag = this.editFlag;
            data.difGroupid = this.difGroupid;
            data.srcFlag = this.srcFlag;
            data.digitalLevel = this.digitalLevel;
            data.reserved = this.reserved;
            data.forms = this.forms;
            data.meshes = this.meshes;
            data.geoLiveType = this.geoLiveType;
            data.forms = [];

            for (var i = 0; i < this.forms.length; i++) {
                data.forms.push(this.forms[i].getIntegrate());
            }

            data.meshes = [];
            for (var j = 0; j < this.meshes.length; j++) {
                data.meshes.push(this.meshes[j].getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.kind = this.kind;
            data.geometry = this.geometry;
            data.adasFlag = this.adasFlag;
            data.editFlag = this.editFlag;
            data.difGroupid = this.difGroupid;
            data.srcFlag = this.srcFlag;
            data.digitalLevel = this.digitalLevel;
            data.reserved = this.reserved;
            data.geoLiveType = this.geoLiveType;
            data.forms = [];
            data.meshes = [];

            for (var i = 0; i < this.forms.length; i++) {
                if (!this.forms[i].deleted()) {
                    data.forms.push(this.forms[i].getIntegrate());
                }
            }

            for (var j = 0; j < this.meshes.length; j++) {
                data.meshes.push(this.meshes[j].getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 转化成渲染数据对象
         * @return {object} RdNode渲染模型
         */

    }, {
        key: 'toCanvasFeature',
        value: function toCanvasFeature() {
            var data = {
                i: this.pid,
                g: this.geometry.coordinates,
                m: {
                    a: '',
                    b: this.forms.map(function (it) {
                        return it.formOfWay;
                    }).join(';'),
                    c: this.kind
                }
            };

            return new FM.dataApi.CanvasFeature.RdNode(data);
        }
        /**
         * 覆盖父类的方法，进行线对象对比
         * @param  {object} options - 数据修改后的数据对象
         * @param  {object} options.compareObj - 比较数据
         * @param  {Object[]} options.rules - 对比原则
         * @return {object} 对象对比结果
         */

    }, {
        key: 'compareCommon',
        value: function compareCommon(options) {
            var compareObj = options.compareObj || {};
            var rules = this.exclude.concat(options.rules || []);
            for (var key in this) {
                if (this.hasOwnProperty(key) && rules.indexOf(key) == -1) {
                    if (FM.Util.isArray(this[key])) {
                        if (this[key].length > 0 && compareObj[key].length > 0) {
                            this[key] = this._compareArr1(this, compareObj, key);
                        } else {
                            this[key] = [];
                        }
                    } else if (FM.Util.isObject(this[key])) {
                        var opts = FM.Util.clone(options);
                        opts.compareObj = compareObj[key];
                        this[key].compareCommon(opts);
                    } else if (this[key] != compareObj[key]) {
                        this[key] = -1;
                    }
                }
            }
            return this;
        }
        /**
         * 对比数组，返回相同的数组项
         * @param  {object} Base - 数组对象
         * @param  {Object} From - 数组对象
         * @param  {string} key - 比较字段
         * @return {object[]} 对象对比结果
         */

    }, {
        key: '_compareArr1',
        value: function _compareArr1(Base, From, key) {
            var result = [];
            for (var i = 0; i < Base[key].length; i++) {
                for (var j = 0; j < From[key].length; j++) {
                    var com = Base[key][i].compareNodeDiff({
                        key: key,
                        compareObj: From[key][j],
                        rules: ['rowId', 'nodePid', 'geoLiveType', 'options', '_initHooksCalled', '_originData', '_origin', 'meshes']
                    });
                    var compareResult = FM.Util.isEmptyObject(com);
                    if (compareResult) {
                        // 保存对应关系
                        var correspondingArr = [];
                        if (Base[key][i].options && !Base[key][i].options.correspondingArr) {
                            Base[key][i].options.correspondingArr = [];
                            correspondingArr = [{
                                nodePid: Base[key][i].nodePid,
                                rowId: Base[key][i].rowId
                            }, {
                                nodePid: From[key][j].nodePid,
                                rowId: From[key][j].rowId
                            }];
                        } else {
                            correspondingArr.push({
                                nodePid: From[key][j].nodePid,
                                rowId: From[key][j].rowId
                            });
                        }
                        Base[key][i].options.correspondingArr = Base[key][i].options.correspondingArr.concat(correspondingArr);
                        result.push(Base[key][i]);
                    }
                }
            }
            return result;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: '_retreatForm',

        /**
         * 批量编辑方法：批量编辑更新后，处理forms数组
         * @param   {array}     sForms [description]
         * @param   {array}     dForms [description]
         * @return  {undefined}
         */
        value: function _retreatForm(sForms, dForms) {
            var _mutexMe = function _mutexMe(me) {
                sForms.forEach(function (it) {
                    if (it.formOfWay != me) {
                        it.delete();
                    }
                });
            };

            var _mutexOthers = function _mutexOthers(others) {
                sForms.forEach(function (it) {
                    if (others.indexOf(it.formOfWay) >= 0) {
                        it.delete();
                    }
                });
            };

            var fows = [];
            dForms.forEach(function (it) {
                if (!it.deleted()) {
                    fows.push(it.formOfWay);
                }
            });
            var inter = FM.Util.intersection(fows, [0, 1, 2, 3, 4, 5, 11, 12, 13, 15, 16]);

            if (inter.length > 0) {
                var tmp = FM.Util.intersection(inter, [0, 1, 3]);
                if (tmp.length > 0) {
                    _mutexMe(tmp[0]);
                } else {
                    if (inter.indexOf(16) >= 0) {
                        if (this.links.length == 2) {
                            _mutexMe(16);
                        } else {
                            sForms.forEach(function (it) {
                                if (it.formOfWay == 16) {
                                    it.delete();
                                }
                            });
                        }
                    }
                    if (inter.indexOf(11) >= 0) {
                        _mutexOthers([0, 1, 3, 12, 13]);
                    }
                    if (inter.indexOf(12) >= 0 || inter.indexOf(13) >= 0) {
                        _mutexOthers([0, 1, 3, 11]);
                    }
                    if (inter.indexOf(2) >= 0) {
                        _mutexOthers([0, 1, 3, 15]);
                    }
                    if (inter.indexOf(15) >= 0) {
                        _mutexOthers([0, 1, 3, 2]);
                    }
                    if (inter.indexOf(4) >= 0) {
                        if (this.kind == 3) {
                            _mutexOthers([0, 1, 3]);
                        } else {
                            sForms.forEach(function (it) {
                                if (it.formOfWay == 4) {
                                    it.delete();
                                }
                            });
                        }
                    }
                }
            } else if (fows.length > 0) {
                _mutexOthers([0, 1, 3]);
            }

            var c = 0;
            var d = 0;
            sForms.forEach(function (it) {
                if (!it.deleted()) {
                    c++;
                    if ([0, 1, 3].indexOf(it.formOfWay) == -1) {
                        d++;
                    }
                }
            });
            if (c == 0) {
                var m = 0;
                sForms.forEach(function (it) {
                    if (it.formOfWay == 1) {
                        it.undelete();
                        m++;
                    }
                });
                if (m == 0) {
                    sForms.push(new FM.dataApi.RdNodeForm({
                        nodePid: this.pid,
                        formOfWay: 1,
                        auxiFlag: 0
                    }));
                }
            } else if (d > 0) {
                sForms.forEach(function (it) {
                    if ([0, 1, 3].indexOf(it.formOfWay) >= 0) {
                        it.delete();
                    }
                });
            }
        }
        /**
         * 批量编辑方法：使用编辑后的虚拟数据模型对象更新原始数据模型对象
         * 该方法在批量编辑完成时调用
         * @param  {Object}   vDataModel   合并后的虚拟数据模型对象
         * @param  {Object}   options      其他选项
         * @return {undefined}
         */

    }, {
        key: 'update',
        value: function update() {
            var vDataModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            _get(RdNode.prototype.__proto__ || Object.getPrototypeOf(RdNode.prototype), 'update', this).call(this, vDataModel, options);

            this._retreatForm(this.forms, vDataModel.forms);
        }
        /**
         * 批量编辑方法：父模型对象创建子模型对象
         * 传入的数据一般是从其他对象拷贝的，子表的外键是不正确的，在这个方法中要重置为当前父对象的主键
         * @param  {string}    type 子对象类型
         * @param  {object}    data 子对象数据，一般是拷贝其他对象的
         * @return {object}         子模型对象
         */

    }, {
        key: 'createChild',
        value: function createChild(type, data) {
            data.rowId = null;
            switch (type) {
                case 'RDNODEFORM':
                    data.nodePid = this.pid;
                    return new FM.dataApi.RdNodeForm(data, this.options);
                default:
                    return null;
            }
        }
    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdNode.prototype.__proto__ || Object.getPrototypeOf(RdNode.prototype), 'exclude', this).concat(['meshes']);
        }
    }]);

    return RdNode;
}(_Feature3.default);

exports.default = RdNode;

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * node形态
 */
var RdNodeForm = function (_Feature) {
    _inherits(RdNodeForm, _Feature);

    function RdNodeForm() {
        _classCallCheck(this, RdNodeForm);

        return _possibleConstructorReturn(this, (RdNodeForm.__proto__ || Object.getPrototypeOf(RdNodeForm)).apply(this, arguments));
    }

    _createClass(RdNodeForm, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDNODEFORM';
            this.nodePid = data.nodePid || '';
            if (typeof data.formOfWay !== 'undefined') {
                this.formOfWay = data.formOfWay;
            } else {
                this.formOfWay = 1;
            }
            this.auxiFlag = data.auxiFlag || 0;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.nodePid = this.nodePid;
            data.formOfWay = this.formOfWay;
            data.auxiFlag = this.auxiFlag;
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.nodePid = this.nodePid;
            data.formOfWay = this.formOfWay;
            data.auxiFlag = this.auxiFlag;
            data.rowId = this.rowId;

            return data;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'match',

        /**
         * 判断两个数据模型对象是否一致
         * @param  {object} des      - 要合并数据模型对象
         * @param  {object} options  - 合并操作的其他选项
         * @return {object} 合并后的源数据模型对象，即变更的this对象
         */
        value: function match() {
            var des = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this.formOfWay == des.formOfWay;
        }
    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdNodeForm.prototype.__proto__ || Object.getPrototypeOf(RdNodeForm.prototype), 'exclude', this).concat(['nodePid', 'formOfWay']);
        }
    }]);

    return RdNodeForm;
}(_Feature3.default);

exports.default = RdNodeForm;

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * node图幅
 */
var RdNodeMesh = function (_Feature) {
    _inherits(RdNodeMesh, _Feature);

    function RdNodeMesh() {
        _classCallCheck(this, RdNodeMesh);

        return _possibleConstructorReturn(this, (RdNodeMesh.__proto__ || Object.getPrototypeOf(RdNodeMesh)).apply(this, arguments));
    }

    _createClass(RdNodeMesh, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDNODEMESH';
            this.nodePid = data.nodePid || '';
            this.meshId = data.meshId || 0;
            this.rowId = data.rowId || '';
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.nodePid = this.nodePid;
            data.meshId = this.meshId;
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.nodePid = this.nodePid;
            data.meshId = this.meshId;
            data.rowId = this.rowId;

            return data;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdNodeMesh.prototype.__proto__ || Object.getPrototypeOf(RdNodeMesh.prototype), 'exclude', this).concat(['nodePid']);
        }
    }]);

    return RdNodeMesh;
}(_Feature3.default);

exports.default = RdNodeMesh;

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CRF对象
 */
var RdObject = function (_Feature) {
    _inherits(RdObject, _Feature);

    function RdObject() {
        _classCallCheck(this, RdObject);

        return _possibleConstructorReturn(this, (RdObject.__proto__ || Object.getPrototypeOf(RdObject)).apply(this, arguments));
    }

    _createClass(RdObject, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDOBJECT';
            this.pid = data.pid || '';
            this.geometry = data.geometry || '';
            this.links = [];
            this.nodes = [];
            this.inters = [];
            this.roads = [];
            this.names = [];
            var i = void 0;
            for (i = 0; i < data.links.length; i++) {
                var link = new FM.dataApi.RdObjectLinks(data.links[i]);
                this.links.push(link);
            }
            for (i = 0; i < data.nodes.length; i++) {
                var node = new FM.dataApi.RdObjectNodes(data.nodes[i]);
                this.nodes.push(node);
            }
            for (i = 0; i < data.inters.length; i++) {
                var inter = new FM.dataApi.RdObjectInters(data.inters[i]);
                this.inters.push(inter);
            }
            for (i = 0; i < data.roads.length; i++) {
                var road = new FM.dataApi.RdObjectRoads(data.roads[i]);
                this.roads.push(road);
            }
            for (i = 0; i < data.names.length; i++) {
                var name = new FM.dataApi.RdObjectNames(data.names[i]);
                this.names.push(name);
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.nodes = [];
            data.links = [];
            data.inters = [];
            data.roads = [];
            data.names = [];
            data.geoLiveType = this.geoLiveType;
            var i = void 0;
            for (i = 0; i < this.links.length; i++) {
                data.links.push(this.links[i].getIntegrate());
            }
            for (i = 0; i < this.nodes.length; i++) {
                data.nodes.push(this.nodes[i].getIntegrate());
            }
            for (i = 0; i < this.inters.length; i++) {
                data.inters.push(this.inters[i].getIntegrate());
            }
            for (i = 0; i < this.roads.length; i++) {
                data.roads.push(this.roads[i].getIntegrate());
            }
            for (i = 0; i < this.names.length; i++) {
                data.names.push(this.names[i].getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.nodes = [];
            data.links = [];
            data.inters = [];
            data.roads = [];
            data.names = [];
            // data.geoLiveType = this.geoLiveType;
            var i = void 0;
            for (i = 0; i < this.links.length; i++) {
                data.links.push(this.links[i].getIntegrate());
            }
            for (i = 0; i < this.nodes.length; i++) {
                data.nodes.push(this.nodes[i].getIntegrate());
            }
            for (i = 0; i < this.inters.length; i++) {
                data.inters.push(this.inters[i].getIntegrate());
            }
            for (i = 0; i < this.roads.length; i++) {
                data.roads.push(this.roads[i].getIntegrate());
            }
            for (i = 0; i < this.names.length; i++) {
                data.names.push(this.names[i].getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 前端校验
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            var _self = this;
            var nameGroup = [];
            this.names.forEach(function (item) {
                if (!nameGroup[item.nameGroupid - 1]) {
                    nameGroup[item.nameGroupid - 1] = [];
                }
                nameGroup[item.nameGroupid - 1].push(item);
            });

            // 判断多音字是否进行了选择
            nameGroup.forEach(function (item, outerIndex) {
                for (var i = 0; i < item.length; i++) {
                    if (item[i].langCode === 'CHI' || item.langCode === 'CHT') {
                        if (item[i].phoneticArr.length) {
                            for (var j = 0; j < item[i].phoneticArr.length; j++) {
                                if (item[i].phoneticArr[j].length > 1) {
                                    _self._pushError('多音字检查', '请选择多音字');
                                    break;
                                }
                            }
                        }
                    }
                }
            });
        }
    }]);

    return RdObject;
}(_Feature3.default);

exports.default = RdObject;

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CRFOBJECT 组成 CRFINTERSECTION
 */
var RdObjectInters = function (_Feature) {
    _inherits(RdObjectInters, _Feature);

    function RdObjectInters() {
        _classCallCheck(this, RdObjectInters);

        return _possibleConstructorReturn(this, (RdObjectInters.__proto__ || Object.getPrototypeOf(RdObjectInters)).apply(this, arguments));
    }

    _createClass(RdObjectInters, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDOBJECTINTERS';
            this.interPid = data.interPid;
            this.links = [];
            this.nodes = [];
            for (var i = 0; i < data.links.length; i++) {
                var link = new FM.dataApi.RdInterLinks(data.links[i]);
                this.links.push(link);
            }
            for (var j = 0; j < data.nodes.length; j++) {
                var node = new FM.dataApi.RdInterNodes(data.nodes[j]);
                this.nodes.push(node);
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.interPid = this.interPid;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.interPid = this.interPid;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdObjectInters;
}(_Feature3.default);

exports.default = RdObjectInters;

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CRFOBJECT 组成 LINK
 */
var RdObjectLinks = function (_Feature) {
    _inherits(RdObjectLinks, _Feature);

    function RdObjectLinks() {
        _classCallCheck(this, RdObjectLinks);

        return _possibleConstructorReturn(this, (RdObjectLinks.__proto__ || Object.getPrototypeOf(RdObjectLinks)).apply(this, arguments));
    }

    _createClass(RdObjectLinks, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDOBJECTLINKS';
            this.linkPid = data.linkPid;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdObjectLinks;
}(_Feature3.default);

exports.default = RdObjectLinks;

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CRFOBJECT 名称
 */
var RdObjectNames = function (_Feature) {
    _inherits(RdObjectNames, _Feature);

    function RdObjectNames() {
        _classCallCheck(this, RdObjectNames);

        return _possibleConstructorReturn(this, (RdObjectNames.__proto__ || Object.getPrototypeOf(RdObjectNames)).apply(this, arguments));
    }

    _createClass(RdObjectNames, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDOBJECTNAME';
            this.nameId = data.nameId || 0;
            this.pid = data.pid || 0;
            this.nameGroupid = data.nameGroupid || 1;
            this.langCode = data.langCode || 'CHI';
            this.name = data.name || '';
            this.phonetic = data.phonetic || '';
            this.phoneticArr = [];
            if (data.phonetic) {
                this.phoneticArr.push(data.phonetic.split(';'));
            }
            this.srcFlag = data.srcFlag || 0;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.srcFlag = this.srcFlag;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.srcFlag = this.srcFlag;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdObjectNames;
}(_Feature3.default);

exports.default = RdObjectNames;

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CRFOBJECT 组成 node
 */
var RdObjectNodes = function (_Feature) {
    _inherits(RdObjectNodes, _Feature);

    function RdObjectNodes() {
        _classCallCheck(this, RdObjectNodes);

        return _possibleConstructorReturn(this, (RdObjectNodes.__proto__ || Object.getPrototypeOf(RdObjectNodes)).apply(this, arguments));
    }

    _createClass(RdObjectNodes, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDOBJECTNODES';
            this.nodePid = data.pid;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.nodePid;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.nodePid;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdObjectNodes;
}(_Feature3.default);

exports.default = RdObjectNodes;

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CRFOBJECT 组成 CRFROAD
 */
var RdObjectRoads = function (_Feature) {
    _inherits(RdObjectRoads, _Feature);

    function RdObjectRoads() {
        _classCallCheck(this, RdObjectRoads);

        return _possibleConstructorReturn(this, (RdObjectRoads.__proto__ || Object.getPrototypeOf(RdObjectRoads)).apply(this, arguments));
    }

    _createClass(RdObjectRoads, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDOBJECTROADS';
            this.roadPid = data.roadPid;
            this.links = [];
            for (var i = 0; i < data.links.length; i++) {
                var link = new FM.dataApi.RdRoadLinks(data.links[i]);
                this.links.push(link);
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.roadPid = this.roadPid;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.roadPid = this.roadPid;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdObjectRoads;
}(_Feature3.default);

exports.default = RdObjectRoads;

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 交限
 */
var RdRestriction = function (_Feature) {
    _inherits(RdRestriction, _Feature);

    function RdRestriction() {
        _classCallCheck(this, RdRestriction);

        return _possibleConstructorReturn(this, (RdRestriction.__proto__ || Object.getPrototypeOf(RdRestriction)).apply(this, arguments));
    }

    _createClass(RdRestriction, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            if (!data.pid) {
                throw new Error('对象没有对应pid');
            }
            this.geoLiveType = 'RDRESTRICTION';
            this.pid = data.pid || null;
            this.inLinkPid = data.inLinkPid || null;
            this.nodePid = data.nodePid || null;
            this.restricInfo = data.restricInfo || null;
            this.kgFlag = data.kgFlag || 0;

            this.details = [];
            if (data.details && data.details.length > 0) {
                for (var i = 0, len = data.details.length; i < len; i++) {
                    var detail = new FM.dataApi.RdRestrictionDetail(data.details[i]);
                    this.details.push(detail);
                }
            }
            // 按照掉左直右排序
            var sortOrder = {
                4: 1,
                2: 2,
                1: 3,
                3: 4,
                0: 5
            };
            this.details.sort(function (a, b) {
                return sortOrder[a.restricInfo] > sortOrder[b.restricInfo];
            });
            this.rowId = data.rowId || null;

            if (this.isTruckRestriction()) {
                this.geoLiveType = 'RDRESTRICTIONTRUCK';
            }
        }
        /**
         * 判断是否为卡车交限
         * @return {boolean} 是否为卡车交限
         */

    }, {
        key: 'isTruckRestriction',
        value: function isTruckRestriction() {
            var flag = false;
            var details = this.details;
            for (var i = 0; i < details.length; i++) {
                if (details[i].conditions && details[i].conditions[0]) {
                    var bin = FM.Util.dec2bin(details[i].conditions[0].vehicle);
                    var reverseBin = bin.split('').reverse();
                    var a = reverseBin[1];
                    var b = reverseBin[2];
                    if (a === '1' || b === '1') {
                        flag = true;
                    }
                }
            }
            return flag;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.inLinkPid = this.inLinkPid;
            data.restricInfo = this.restricInfo;
            data.kgFlag = this.kgFlag;
            data.geoLiveType = this.geoLiveType;
            data.details = this.details;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.inLinkPid = this.inLinkPid;
            data.restricInfo = this.restricInfo;
            // data.geoLiveType = this.geoLiveType;
            data.kgFlag = this.kgFlag;
            data.nodePid = this.nodePid;
            var details = [];
            for (var i = 0, len = this.details.length; i < len; i++) {
                details.push(this.details[i].getIntegrate());
            }
            data.details = details;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 前端校验
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            var details = [];
            for (var i = 0, len = this.details.length; i < len; i++) {
                details = this.details[i].getIntegrate();
                if (details.type == 2) {
                    if (details.conditions.length) {
                        for (var j = 0; j < details.conditions.length; j++) {
                            if (details.pid == details.conditions[j].detailId) {
                                if (!details.conditions[j].timeDomain) {
                                    this._pushError('RES_TIME', '限制类型为时间段禁止时，时间段不能为空！');
                                }
                            }
                        }
                    } else {
                        // 有可能出现类型为时间段禁止，但是并未选择时间
                        this._pushError('RES_TIME', '限制类型为时间段禁止时，时间段不能为空！');
                    }
                }
            }
        }
    }]);

    return RdRestriction;
}(_Feature3.default);

exports.default = RdRestriction;

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 交限时间段和车辆限制
 */
var RdRestrictionCondition = function (_Feature) {
    _inherits(RdRestrictionCondition, _Feature);

    function RdRestrictionCondition() {
        _classCallCheck(this, RdRestrictionCondition);

        return _possibleConstructorReturn(this, (RdRestrictionCondition.__proto__ || Object.getPrototypeOf(RdRestrictionCondition)).apply(this, arguments));
    }

    _createClass(RdRestrictionCondition, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDRESTRICTIONCONDITION';
            this.detailId = data.detailId;
            this.timeDomain = data.timeDomain || '';
            this.vehicle = data.vehicle || 0;
            this.resTrailer = data.resTrailer || 0;
            this.resWeigh = data.resWeigh || 0;
            this.resAxleLoad = data.resAxleLoad || 0;
            this.resAxleCount = data.resAxleCount || 0;
            this.resOut = data.resOut || 0;
            this.rowId = data.rowId || '';
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.detailId = this.detailId;
            data.timeDomain = this.timeDomain;
            data.vehicle = this.vehicle;
            data.resTrailer = this.resTrailer;
            data.resWeigh = this.resWeigh;
            data.resAxleLoad = this.resAxleLoad;
            data.resAxleCount = this.resAxleCount;
            data.resOut = this.resOut;
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            // add by chenx on 2017-9-6
            // 去除页面编辑时加入的未编辑的空条件
            if (!(this.timeDomain || this.vehicle || this.resTrailer || this.resWeigh || this.resAxleLoad || this.resAxleCount || this.resOut)) {
                return null;
            }

            var data = {};
            data.detailId = this.detailId;
            data.timeDomain = this.timeDomain;
            data.vehicle = this.vehicle;
            data.resTrailer = this.resTrailer;
            data.resWeigh = this.resWeigh;
            data.resAxleLoad = this.resAxleLoad;
            data.resAxleCount = this.resAxleCount;
            data.resOut = this.resOut;
            data.rowId = this.rowId;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdRestrictionCondition;
}(_Feature3.default);

exports.default = RdRestrictionCondition;

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 交限详细信息
 */
var RdRestrictionDetail = function (_Feature) {
    _inherits(RdRestrictionDetail, _Feature);

    function RdRestrictionDetail() {
        _classCallCheck(this, RdRestrictionDetail);

        return _possibleConstructorReturn(this, (RdRestrictionDetail.__proto__ || Object.getPrototypeOf(RdRestrictionDetail)).apply(this, arguments));
    }

    _createClass(RdRestrictionDetail, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDRESTRICTIONDETAIL';
            this.pid = data.pid || 0;
            this.restricPid = data.restricPid || 0;
            this.outLinkPid = data.outLinkPid || 0;
            this.flag = data.flag === undefined || data.flag === '' ? 2 : data.flag;
            this.restricInfo = data.restricInfo || 0;
            this.type = data.type === undefined || data.type === '' ? 1 : data.type;
            this.relationshipType = data.relationshipType === undefined || data.relationshipType === '' ? 1 : data.relationshipType;

            this.conditions = [];
            if (data.conditions && data.conditions.length > 0) {
                for (var i = 0, len = data.conditions.length; i < len; i++) {
                    var condition = new FM.dataApi.RdRestrictionCondition(data.conditions[i]);
                    this.conditions.push(condition);
                }
            }

            this.vias = [];
            if (data.vias && data.vias.length > 0) {
                for (var j = 0, viaLen = data.vias.length; j < viaLen; j++) {
                    var vias = new FM.dataApi.RdRestrictionVias(data.vias[j]);
                    this.vias.push(vias);
                }
            }
            this.vias.sort(function (a, b) {
                return a.seqNum - b.seqNum;
            });
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.restricPid = this.restricPid;
            data.outLinkPid = this.outLinkPid;
            data.flag = this.flag;
            data.restricInfo = this.restricInfo;
            data.type = this.type;
            data.relationshipType = this.relationshipType;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.restricPid = this.restricPid;
            data.outLinkPid = this.outLinkPid;
            data.flag = this.flag;
            data.restricInfo = this.restricInfo;
            data.type = this.type;
            data.relationshipType = this.relationshipType;
            // data.geoLiveType = this.geoLiveType;
            var conditions = [];
            var cond = void 0;
            for (var i = 0, len = this.conditions.length; i < len; i++) {
                cond = this.conditions[i].getIntegrate();
                if (cond) {
                    conditions.push(cond);
                }
            }
            data.conditions = conditions;

            var vias = [];
            for (var j = 0, viaLen = this.vias.length; j < viaLen; j++) {
                vias.push(this.vias[j].getIntegrate());
            }
            data.vias = vias;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdRestrictionDetail;
}(_Feature3.default);

exports.default = RdRestrictionDetail;

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 交限经过线
 */
var RdRestrictionVias = function (_Feature) {
    _inherits(RdRestrictionVias, _Feature);

    function RdRestrictionVias() {
        _classCallCheck(this, RdRestrictionVias);

        return _possibleConstructorReturn(this, (RdRestrictionVias.__proto__ || Object.getPrototypeOf(RdRestrictionVias)).apply(this, arguments));
    }

    _createClass(RdRestrictionVias, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDRESTRICTIONVIA';
            this.detailId = data.detailId || 0;
            this.linkPid = data.linkPid;
            this.groupId = data.groupId || 1;
            this.seqNum = data.seqNum || 1;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.linkPid = this.linkPid;
            data.groupId = this.groupId;
            data.seqNum = this.seqNum;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.linkPid = this.linkPid;
            data.groupId = this.groupId;
            data.seqNum = this.seqNum;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdRestrictionVias;
}(_Feature3.default);

exports.default = RdRestrictionVias;

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CRF道路
 */
var RdRoad = function (_Feature) {
    _inherits(RdRoad, _Feature);

    function RdRoad() {
        _classCallCheck(this, RdRoad);

        return _possibleConstructorReturn(this, (RdRoad.__proto__ || Object.getPrototypeOf(RdRoad)).apply(this, arguments));
    }

    _createClass(RdRoad, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDROAD';
            this.pid = data.pid || '';
            this.links = [];

            for (var i = 0; i < data.links.length; i++) {
                var link = new FM.dataApi.RdRoadLinks(data.links[i]);
                this.links.push(link);
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.nodes = [];
            data.links = [];
            data.geoLiveType = this.geoLiveType;
            for (var i = 0; i < this.links.length; i++) {
                data.links.push(this.links[i].getIntegrate());
            }

            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.nodes = [];
            data.links = [];
            data.geoLiveType = this.geoLiveType;
            for (var i = 0; i < this.links.length; i++) {
                data.links.push(this.links[i].getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdRoad;
}(_Feature3.default);

exports.default = RdRoad;

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CRF组成link
 */
var RdRoadLinks = function (_Feature) {
    _inherits(RdRoadLinks, _Feature);

    function RdRoadLinks() {
        _classCallCheck(this, RdRoadLinks);

        return _possibleConstructorReturn(this, (RdRoadLinks.__proto__ || Object.getPrototypeOf(RdRoadLinks)).apply(this, arguments));
    }

    _createClass(RdRoadLinks, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDROADLINKS';
            this.linkPid = data.linkPid;
            this.seqNum = data.seqNum || 1;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.seqNum = this.seqNum;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.seqNum = this.seqNum;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdRoadLinks;
}(_Feature3.default);

exports.default = RdRoadLinks;

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 同一关系
 */
var RdSameLink = function (_Feature) {
    _inherits(RdSameLink, _Feature);

    function RdSameLink() {
        _classCallCheck(this, RdSameLink);

        return _possibleConstructorReturn(this, (RdSameLink.__proto__ || Object.getPrototypeOf(RdSameLink)).apply(this, arguments));
    }

    _createClass(RdSameLink, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDSAMELINK';
            this.pid = data.pid;
            this.groupId = data.groupId;
            this.rowId = data.rowId || null;

            this.parts = [];
            if (data.parts) {
                for (var i = 0, len = data.parts.length; i < len; i++) {
                    this.parts.push(new FM.dataApi.RdSameLinkPart(data.parts[i]));
                }
            }
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.groupId = this.groupId;

            data.parts = [];
            if (this.parts) {
                for (var i = 0, len = this.parts.length; i < len; i++) {
                    data.parts.push(this.parts[i].getIntegrate());
                }
            }

            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.groupId = this.groupId;
            data.parts = [];
            if (this.parts) {
                for (var i = 0, len = this.parts.length; i < len; i++) {
                    data.parts.push(this.parts[i].getIntegrate());
                }
            }
            data.rowId = this.rowId;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdSameLink;
}(_Feature3.default);

exports.default = RdSameLink;

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 同一link关系
 */
var RdSameLinkPart = function (_Feature) {
    _inherits(RdSameLinkPart, _Feature);

    function RdSameLinkPart() {
        _classCallCheck(this, RdSameLinkPart);

        return _possibleConstructorReturn(this, (RdSameLinkPart.__proto__ || Object.getPrototypeOf(RdSameLinkPart)).apply(this, arguments));
    }

    _createClass(RdSameLinkPart, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDSAMELINKPART';
            this.groupId = data.groupId;
            this.linkPid = data.linkPid;
            this.tableName = data.tableName;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.groupId = this.groupId;
            data.linkPid = this.linkPid;
            data.tableName = this.tableName;
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.groupId = this.groupId;
            data.linkPid = this.linkPid;
            data.tableName = this.tableName;
            data.rowId = this.rowId;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdSameLinkPart;
}(_Feature3.default);

exports.default = RdSameLinkPart;

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 同一点
 */
var RdSameNode = function (_Feature) {
    _inherits(RdSameNode, _Feature);

    function RdSameNode() {
        _classCallCheck(this, RdSameNode);

        return _possibleConstructorReturn(this, (RdSameNode.__proto__ || Object.getPrototypeOf(RdSameNode)).apply(this, arguments));
    }

    _createClass(RdSameNode, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDSAMENODE';
            this.pid = data.pid;
            this.groupId = data.groupId;
            this.rowId = data.rowId || null;

            this.parts = [];
            if (data.parts) {
                for (var i = 0, len = data.parts.length; i < len; i++) {
                    this.parts.push(new FM.dataApi.RdSameNodePart(data.parts[i]));
                }
            }
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.groupId = this.groupId;
            data.rowId = this.rowId;
            data.parts = [];
            for (var i = 0; i < this.parts.length; i++) {
                data.parts.push(this.parts[i].getIntegrate());
            }
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.groupId = this.groupId;
            data.rowId = this.rowId;
            // data.geoLiveType = this.geoLiveType;
            data.parts = [];
            for (var i = 0; i < this.parts.length; i++) {
                data.parts.push(this.parts[i].getIntegrate());
            }
            return data;
        }
    }]);

    return RdSameNode;
}(_Feature3.default);

exports.default = RdSameNode;

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 同一点关系组成
 */
var RdSameNodePart = function (_Feature) {
    _inherits(RdSameNodePart, _Feature);

    function RdSameNodePart() {
        _classCallCheck(this, RdSameNodePart);

        return _possibleConstructorReturn(this, (RdSameNodePart.__proto__ || Object.getPrototypeOf(RdSameNodePart)).apply(this, arguments));
    }

    _createClass(RdSameNodePart, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDSAMENODE';
            this.groupId = data.groupId;
            this.nodePid = data.nodePid;
            this.tableName = data.tableName;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.groupId = this.groupId;
            data.nodePid = this.nodePid;
            data.tableName = this.tableName;
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.groupId = this.groupId;
            data.nodePid = this.nodePid;
            data.tableName = this.tableName;
            data.rowId = this.rowId;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdSameNodePart;
}(_Feature3.default);

exports.default = RdSameNodePart;

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 分叉口
 */
var RdSe = function (_Feature) {
    _inherits(RdSe, _Feature);

    function RdSe() {
        _classCallCheck(this, RdSe);

        return _possibleConstructorReturn(this, (RdSe.__proto__ || Object.getPrototypeOf(RdSe)).apply(this, arguments));
    }

    _createClass(RdSe, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDSE';
            this.pid = data.pid || '';
            this.nodePid = data.nodePid;
            this.inLinkPid = data.inLinkPid;
            this.outLinkPid = data.outLinkPid;
            this.uFields = data.uFields;
            this.uDate = data.uDate || null;
            this.rowId = data.rowId || null;
            this.uRecord = data.uRecord || 0;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.nodePid = this.nodePid;
            data.inLinkPid = this.inLinkPid;
            data.outLinkPid = this.outLinkPid;
            data.uFields = this.uFields;
            data.uDate = this.uDate;
            data.rowId = this.rowId;
            data.uRecord = this.uRecord;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.nodePid = this.nodePid;
            data.inLinkPid = this.inLinkPid;
            data.outLinkPid = this.outLinkPid;
            data.uFields = this.uFields;
            data.uDate = this.uDate;
            data.rowId = this.rowId;
            data.uRecord = this.uRecord;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdSe;
}(_Feature3.default);

exports.default = RdSe;

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 坡度
 */
var RdSlope = function (_Feature) {
    _inherits(RdSlope, _Feature);

    function RdSlope() {
        _classCallCheck(this, RdSlope);

        return _possibleConstructorReturn(this, (RdSlope.__proto__ || Object.getPrototypeOf(RdSlope)).apply(this, arguments));
    }

    _createClass(RdSlope, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDSLOPE';
            this.pid = data.pid || '';
            this.nodePid = data.nodePid || 0;
            this.linkPid = data.linkPid;
            // this.type = data.type || 1;
            if (typeof data.type !== 'undefined') {
                this.type = data.type;
            } else {
                this.type = 1;
            }
            this.angle = data.angle || 0;
            this.slopeVias = [];

            for (var i = 0; i < data.slopeVias.length; i++) {
                var link = new FM.dataApi.RdSlopeLinks(data.slopeVias[i]);
                this.slopeVias.push(link);
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.nodePid = this.nodePid;
            data.linkPid = this.linkPid;
            data.type = this.type;
            data.angle = this.angle;
            data.slopeVias = [];
            data.geoLiveType = this.geoLiveType;
            for (var i = 0; i < this.slopeVias.length; i++) {
                data.slopeVias.push(this.slopeVias[i].getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.nodePid = this.nodePid;
            data.linkPid = this.linkPid;
            data.type = this.type;
            data.angle = this.angle;
            data.slopeVias = [];
            data.geoLiveType = this.geoLiveType;
            for (var i = 0; i < this.slopeVias.length; i++) {
                data.slopeVias.push(this.slopeVias[i].getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 重写了DataModel.js的方法，取消掉了linkPid属性，因为坡度如果没有修改linkPid的时候是不需要传递linkPid的，但是DataModel.js中却包含了linkPid
         * @return {object} 变化的属性对象
         */

    }, {
        key: 'getChanges',
        value: function getChanges() {
            var changes = _get(RdSlope.prototype.__proto__ || Object.getPrototypeOf(RdSlope.prototype), 'getChanges', this).call(this);
            if (this.linkPid && this.linkPid === this.origin.linkPid && changes) {
                delete changes.linkPid;
            }
            return changes;
        }
    }]);

    return RdSlope;
}(_Feature3.default);

exports.default = RdSlope;

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 坡度连续link
 */
var RdSlopeLinks = function (_Feature) {
    _inherits(RdSlopeLinks, _Feature);

    function RdSlopeLinks() {
        _classCallCheck(this, RdSlopeLinks);

        return _possibleConstructorReturn(this, (RdSlopeLinks.__proto__ || Object.getPrototypeOf(RdSlopeLinks)).apply(this, arguments));
    }

    _createClass(RdSlopeLinks, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDSLOPELINKS';
            this.linkPid = data.linkPid;
            this.seqNum = data.seqNum || 1;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.seqNum = this.seqNum;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.linkPid = this.linkPid;
            data.seqNum = this.seqNum;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdSlopeLinks;
}(_Feature3.default);

exports.default = RdSlopeLinks;

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 减速带
 */
var RdSpeedBump = function (_Feature) {
    _inherits(RdSpeedBump, _Feature);

    function RdSpeedBump() {
        _classCallCheck(this, RdSpeedBump);

        return _possibleConstructorReturn(this, (RdSpeedBump.__proto__ || Object.getPrototypeOf(RdSpeedBump)).apply(this, arguments));
    }

    _createClass(RdSpeedBump, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDSPEEDBUMP';
            this.bumpPid = data.bumpPid || '';
            this.nodePid = data.nodePid;
            this.linkPid = data.linkPid;
            this.pid = data.pid;
            this.memo = data.memo || null;
            this.reserved = data.reserved || null;
            this.uRecord = data.uRecord || 0;
            this.uFields = data.uFields || null;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.bumpPid = this.bumpPid;
            data.nodePid = this.nodePid;
            data.linkPid = this.linkPid;
            data.memo = this.memo;
            data.pid = this.pid;
            data.reserved = this.reserved;
            data.uRecord = this.uRecord;
            data.uFields = this.uFields;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.bumpPid = this.bumpPid;
            data.nodePid = this.nodePid;
            data.linkPid = this.linkPid;
            data.memo = this.memo;
            data.pid = this.pid;
            data.reserved = this.reserved;
            data.uRecord = this.uRecord;
            data.uFields = this.uFields;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdSpeedBump;
}(_Feature3.default);

exports.default = RdSpeedBump;

/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 点限速
 */
var RdSpeedLimit = function (_Feature) {
    _inherits(RdSpeedLimit, _Feature);

    function RdSpeedLimit() {
        _classCallCheck(this, RdSpeedLimit);

        return _possibleConstructorReturn(this, (RdSpeedLimit.__proto__ || Object.getPrototypeOf(RdSpeedLimit)).apply(this, arguments));
    }

    _createClass(RdSpeedLimit, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDSPEEDLIMIT'; //  RDSPEEDLIMIT or RDSPEEDLIMIT_DEPENDENT
            this.pid = data.pid;
            this.linkPid = data.linkPid;
            this.direct = data.direct || 0;
            this.speedValue = data.speedValue || 0;
            this.speedType = data.speedType || 0;

            if (this.speedType === 3) {
                this.geoLiveType = 'RDSPEEDLIMIT_DEPENDENT';
            }

            this.tollgateFlag = data.tollgateFlag || 0;
            this.speedDependent = data.speedDependent || 0;
            this.speedFlag = data.speedFlag || 0;
            if (typeof data.limitSrc !== 'undefined') {
                this.limitSrc = data.limitSrc;
            } else {
                this.limitSrc = 1;
            }
            this.timeDomain = data.timeDomain || '';
            this.captureFlag = data.captureFlag || 0;
            this.descript = data.descript || '';
            this.meshId = data.meshId || 0;
            if (typeof data.status !== 'undefined') {
                this.status = data.status;
            } else {
                this.status = 7;
            }
            if (typeof data.status !== 'undefined') {
                this.ckStatus = data.ckStatus;
            } else {
                this.ckStatus = 6;
            }
            this.adjaFlag = data.adjaFlag || 0;
            this.recStatusIn = data.recStatusIn || 0;
            this.recStatusOut = data.recStatusOut || 0;
            this.timeDescript = data.timeDescript || '';
            this.geometry = data.geometry;
            this.laneSpeedValue = data.laneSpeedValue || '';
            this.rowId = data.rowId || null;
            this.state = data.state;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.linkPid = this.linkPid;
            data.direct = this.direct;
            data.speedValue = this.speedValue;
            data.speedType = this.speedType;
            data.tollgateFlag = this.tollgateFlag;
            data.speedDependent = this.speedDependent;
            data.speedFlag = this.speedFlag;
            data.limitSrc = this.limitSrc;
            data.timeDomain = this.timeDomain;
            data.captureFlag = this.captureFlag;
            data.descript = this.descript;
            data.meshId = this.meshId;
            data.status = this.status;
            data.ckStatus = this.ckStatus;
            data.adjaFlag = this.adjaFlag;
            data.recStatusIn = this.recStatusIn;
            data.recStatusOut = this.recStatusOut;
            data.timeDescript = this.timeDescript;
            data.geometry = this.geometry;
            data.laneSpeedValue = this.laneSpeedValue;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            data.state = this.state;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            this._clearTimeDomain();
            var data = {};
            data.pid = this.pid;
            data.linkPid = this.linkPid;
            data.direct = this.direct;
            data.speedValue = this.speedValue;
            data.speedType = this.speedType;
            data.tollgateFlag = this.tollgateFlag;
            data.speedDependent = this.speedDependent;
            data.speedFlag = this.speedFlag;
            data.limitSrc = this.limitSrc;
            data.timeDomain = this.timeDomain;
            data.captureFlag = this.captureFlag;
            data.descript = this.descript;
            data.meshId = this.meshId;
            data.status = this.status;
            data.ckStatus = this.ckStatus;
            data.adjaFlag = this.adjaFlag;
            data.recStatusIn = this.recStatusIn;
            data.recStatusOut = this.recStatusOut;
            data.timeDescript = this.timeDescript;
            data.geometry = this.geometry;
            data.laneSpeedValue = this.laneSpeedValue;
            data.state = this.state;
            // data.geoLiveType = this.geoLiveType;

            return data;
        }
        /**
         * 如果不是特定条件，清空时间段
         * @return {undefined}
         */

    }, {
        key: '_clearTimeDomain',
        value: function _clearTimeDomain() {
            if (this.speedType !== 3) {
                this.timeDomain = '';
            }
        }
    }]);

    return RdSpeedLimit;
}(_Feature3.default);

exports.default = RdSpeedLimit;

/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * TMC匹配信息
 */
var RdTmcLocation = function (_Feature) {
    _inherits(RdTmcLocation, _Feature);

    function RdTmcLocation() {
        _classCallCheck(this, RdTmcLocation);

        return _possibleConstructorReturn(this, (RdTmcLocation.__proto__ || Object.getPrototypeOf(RdTmcLocation)).apply(this, arguments));
    }

    _createClass(RdTmcLocation, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDTMCLOCATION';
            this.pid = data.pid;
            this.tmcId = data.tmcId || 0;
            this.loctableId = data.loctableId || 0;
            this.rowId = data.rowId || null;
            this.links = [];
            if (data.links && data.links.length > 0) {
                for (var i = 0; i < data.links.length; i++) {
                    var link = new FM.dataApi.RdTmcLocationLink(data.links[i]);
                    this.links.push(link);
                }
            }
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.tmcId = this.tmcId;
            data.loctableId = this.loctableId;
            data.rowId = this.rowId;
            data.links = [];
            for (var i = 0; i < this.links.length; i++) {
                data.links.push(this.links[i].getIntegrate());
            }
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.tmcId = this.tmcId;
            data.loctableId = this.loctableId;
            data.rowId = this.rowId;
            data.links = [];
            for (var i = 0; i < this.links.length; i++) {
                data.links.push(this.links[i].getIntegrate());
            }
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 获取需要在比较时排除的属性列表
         * @return {Array}   属性列表
         */

    }, {
        key: 'exclude',
        get: function get() {
            return _get(RdTmcLocation.prototype.__proto__ || Object.getPrototypeOf(RdTmcLocation.prototype), 'exclude', this).concat(['links']);
        }
    }]);

    return RdTmcLocation;
}(_Feature3.default);

exports.default = RdTmcLocation;

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * TMC组成link
 */
var RdTmcLocationLink = function (_Feature) {
    _inherits(RdTmcLocationLink, _Feature);

    function RdTmcLocationLink() {
        _classCallCheck(this, RdTmcLocationLink);

        return _possibleConstructorReturn(this, (RdTmcLocationLink.__proto__ || Object.getPrototypeOf(RdTmcLocationLink)).apply(this, arguments));
    }

    _createClass(RdTmcLocationLink, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDTMCLOCATIONLINK';
            this.groupId = data.groupId;
            this.linkPid = data.linkPid;
            this.locDirect = data.locDirect || 0;
            this.rowId = data.rowId || null;
            this.direct = data.direct || 0;
            this.geometry = data.geometry || null;
            this.sNodePid = data.sNodePid || 0;
            this.eNodePid = data.eNodePid || 0;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.groupId = this.groupId;
            data.linkPid = this.linkPid;
            data.locDirect = this.locDirect;
            data.rowId = this.rowId;
            data.direct = this.direct;
            data.geometry = this.geometry;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.groupId = this.groupId;
            data.linkPid = this.linkPid;
            data.locDirect = this.locDirect;
            data.rowId = this.rowId;
            data.direct = this.direct;
            data.geometry = this.geometry;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            return data;
        }
    }]);

    return RdTmcLocationLink;
}(_Feature3.default);

exports.default = RdTmcLocationLink;

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 收费站
 */
var RdTollgate = function (_Feature) {
    _inherits(RdTollgate, _Feature);

    function RdTollgate() {
        _classCallCheck(this, RdTollgate);

        return _possibleConstructorReturn(this, (RdTollgate.__proto__ || Object.getPrototypeOf(RdTollgate)).apply(this, arguments));
    }

    _createClass(RdTollgate, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDTOLLGATE';
            this.pid = data.pid || 0;
            this.nodePid = data.nodePid;
            this.inLinkPid = data.inLinkPid;
            this.outLinkPid = data.outLinkPid;
            this.type = data.type || 0;
            this.passageNum = data.passageNum || 0;
            this.etcFigureCode = data.etcFigureCode || null;
            this.hwName = data.hwName || null;
            this.photoFlag = data.photoFlag || 1;
            this.feeType = data.feeType;
            if (data.feeType == '') {
                this.feeType = 2;
            }
            this.names = [];
            if (data.names && data.names.length > 0) {
                for (var i = 0; i < data.names.length; i++) {
                    var name = new FM.dataApi.RdTollgateName(data.names[i]);
                    this.names.push(name);
                }
            }
            this.passages = [];
            if (data.passages && data.passages.length > 0) {
                for (var j = 0; j < data.passages.length; j++) {
                    var passage = new FM.dataApi.RdTollgatePassage(data.passages[j]);
                    this.passages.push(passage);
                }
            }
            this.feeStd = data.feeStd || 0;
            this.locationFlag = data.locationFlag || 0;
            this.rowId = data.rowId || null;
            if (typeof data.truckFlag !== 'undefined') {
                this.truckFlag = data.truckFlag;
            } else {
                this.truckFlag = 1;
            }
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.nodePid = this.nodePid;
            data.inLinkPid = this.inLinkPid;
            data.outLinkPid = this.outLinkPid;
            data.type = this.type;
            data.passageNum = this.passageNum;
            data.etcFigureCode = this.etcFigureCode;
            data.hwName = this.hwName;
            this.photoFlag = data.photoFlag || 1;
            data.feeType = this.feeType;
            data.feeStd = this.feeStd;
            data.names = [];
            for (var i = 0; i < this.names.length; i++) {
                data.names.push(this.names[i].getIntegrate());
            }
            data.passages = [];
            for (var j = 0; j < this.passages.length; j++) {
                data.passages.push(this.passages[j].getIntegrate());
            }
            data.locationFlag = this.locationFlag;
            data.rowId = this.rowId;
            data.truckFlag = this.truckFlag;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.nodePid = this.nodePid;
            data.inLinkPid = this.inLinkPid;
            data.outLinkPid = this.outLinkPid;
            data.type = this.type;
            data.passageNum = this.passageNum;
            data.etcFigureCode = this.etcFigureCode;
            data.hwName = this.hwName;
            data.photoFlag = this.photoFlag;
            data.feeType = this.feeType;
            data.feeStd = this.feeStd;
            data.names = [];
            for (var i = 0; i < this.names.length; i++) {
                data.names.push(this.names[i].getIntegrate());
            }
            data.passages = [];
            for (var j = 0; j < this.passages.length; j++) {
                data.passages.push(this.passages[j].getIntegrate());
            }
            data.locationFlag = this.locationFlag;
            data.truckFlag = this.truckFlag;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 前端校验
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            var _self = this;
            var nameGroup = [];
            this.names.forEach(function (item) {
                if (!nameGroup[item.nameGroupid - 1]) {
                    nameGroup[item.nameGroupid - 1] = [];
                }
                nameGroup[item.nameGroupid - 1].push(item);
            });

            // 判断多音字是否进行了选择
            nameGroup.forEach(function (item, outerIndex) {
                for (var i = 0; i < item.length; i++) {
                    if (item[i].langCode === 'CHI' || item.langCode === 'CHT') {
                        if (item[i].phoneticArr.length) {
                            for (var j = 0; j < item[i].phoneticArr.length; j++) {
                                if (item[i].phoneticArr[j].length > 1) {
                                    _self._pushError('多音字检查', '请选择多音字');
                                    break;
                                }
                            }
                        }
                    }
                }
            });
        }
    }]);

    return RdTollgate;
}(_Feature3.default);

exports.default = RdTollgate;

/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 收费站名称
 */
var RdTollgateName = function (_Feature) {
    _inherits(RdTollgateName, _Feature);

    function RdTollgateName() {
        _classCallCheck(this, RdTollgateName);

        return _possibleConstructorReturn(this, (RdTollgateName.__proto__ || Object.getPrototypeOf(RdTollgateName)).apply(this, arguments));
    }

    _createClass(RdTollgateName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDTOLLGATENAME';
            this.pid = data.pid || 0;
            this.nameId = data.nameId || 0;
            this.nameGroupid = data.nameGroupid || 1;
            this.langCode = data.langCode || 'CHI';
            this.name = data.name || '';
            this.phonetic = data.phonetic || '';
            this.phoneticArr = [];
            if (data.phonetic) {
                this.phoneticArr.push(data.phonetic.split(';'));
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            //        data.nameId = this.nameId;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            //        data.nameId = this.nameId;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.name = this.name;
            // data.phonetic = this.phonetic;
            data.phonetic = '';
            if (this.phoneticArr.length) {
                for (var i = 0; i < this.phoneticArr.length; i++) {
                    data.phonetic += this.phoneticArr[i].join(' ') + ' ';
                }
                data.phonetic = data.phonetic.trim();
            }
            data.rowId = this.rowId;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdTollgateName;
}(_Feature3.default);

exports.default = RdTollgateName;

/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 收费站通道信息
 */
var RdTollgatePassage = function (_Feature) {
    _inherits(RdTollgatePassage, _Feature);

    function RdTollgatePassage() {
        _classCallCheck(this, RdTollgatePassage);

        return _possibleConstructorReturn(this, (RdTollgatePassage.__proto__ || Object.getPrototypeOf(RdTollgatePassage)).apply(this, arguments));
    }

    _createClass(RdTollgatePassage, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDTOLLGATEPASSAGE';
            this.pid = data.pid || 0;
            this.seqNum = data.seqNum || 1;
            if (data.tollForm) {
                this.tollForm = FM.Util.dec2bin(data.tollForm + '');
            } else {
                this.tollForm = 0;
            }
            this.cardType = data.cardType || 0;
            this.vehicle = data.vehicle || 0;
            this.rowId = data.rowId || null;
            this.laneType = data.laneType || 0;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.seqNum = this.seqNum;
            data.tollForm = FM.Util.bin2dec(this.tollForm + '');
            data.cardType = this.cardType;
            data.vehicle = this.vehicle;
            data.rowId = this.rowId;
            data.laneType = this.laneType;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.seqNum = this.seqNum;
            data.tollForm = FM.Util.bin2dec(this.tollForm + '');
            data.cardType = this.cardType;
            data.vehicle = this.vehicle;
            data.rowId = this.rowId;
            data.laneType = this.laneType;
            return data;
        }
    }]);

    return RdTollgatePassage;
}(_Feature3.default);

exports.default = RdTollgatePassage;

/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 信号灯
 */
var RdTrafficSignal = function (_Feature) {
    _inherits(RdTrafficSignal, _Feature);

    function RdTrafficSignal() {
        _classCallCheck(this, RdTrafficSignal);

        return _possibleConstructorReturn(this, (RdTrafficSignal.__proto__ || Object.getPrototypeOf(RdTrafficSignal)).apply(this, arguments));
    }

    _createClass(RdTrafficSignal, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDTRAFFICSIGNAL';
            this.pid = data.pid || '';
            this.nodePid = data.nodePid;
            this.linkPid = data.linkPid;
            this.location = data.location;
            this.flag = data.flag || 0;
            this.rowId = data.rowId || null;

            this.type = data.type || 0;
            this.kgFlag = data.kgFlag || 0;
            this.uRecord = data.uRecord || 0;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = parseInt(this.pid, 10);
            data.nodePid = parseInt(this.nodePid, 10);
            data.linkPid = parseInt(this.linkPid, 10);
            data.location = parseInt(this.location, 2);
            data.flag = parseInt(this.flag, 10);
            data.rowId = this.rowId;
            data.type = parseInt(this.type, 10);
            data.kgFlag = parseInt(this.kgFlag, 10);
            data.uRecord = this.uRecord;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = parseInt(this.pid, 10);
            data.nodePid = parseInt(this.nodePid, 10);
            data.linkPid = parseInt(this.linkPid, 10);
            data.location = parseInt(this.location, 10);
            data.flag = parseInt(this.flag, 10);
            data.rowId = this.rowId;
            data.type = parseInt(this.type, 10);
            data.kgFlag = parseInt(this.kgFlag, 10);
            data.uRecord = this.uRecord;
            return data;
        }
    }]);

    return RdTrafficSignal;
}(_Feature3.default);

exports.default = RdTrafficSignal;

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 可变限速
 */
var RdVariableSpeed = function (_Feature) {
    _inherits(RdVariableSpeed, _Feature);

    function RdVariableSpeed() {
        _classCallCheck(this, RdVariableSpeed);

        return _possibleConstructorReturn(this, (RdVariableSpeed.__proto__ || Object.getPrototypeOf(RdVariableSpeed)).apply(this, arguments));
    }

    _createClass(RdVariableSpeed, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDVARIABLESPEED';
            this.pid = data.pid;
            this.inLinkPid = data.inLinkPid;
            this.nodePid = data.nodePid;
            this.outLinkPid = data.outLinkPid;
            this.location = data.location || 2;
            this.speedValue = data.speedValue || 0;
            this.speedType = data.speedType || 0;
            this.speedDependent = data.speedDependent || 0;
            this.timedomain = data.timedomain || '';
            this.vehicle = data.vehicle || 0;
            this.vias = [];
            for (var i = 0; i < data.vias.length; i++) {
                var link = new FM.dataApi.RdVariableSpeedLink(data.vias[i]);
                this.vias.push(link);
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.inLinkPid = this.inLinkPid;
            data.nodePid = this.nodePid;
            data.outLinkPid = this.outLinkPid;
            data.location = this.location;
            data.speedValue = this.speedValue;
            data.speedType = this.speedType;
            data.speedDependent = this.speedDependent;
            data.timedomain = this.timedomain;
            data.vehicle = this.vehicle;
            // data.geoLiveType = this.geoLiveType;
            data.vias = [];
            for (var i = 0; i < this.vias.length; i++) {
                data.vias.push(this.vias[i].getIntegrate());
            }
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.inLinkPid = this.inLinkPid;
            data.nodePid = this.nodePid;
            data.outLinkPid = this.outLinkPid;
            data.location = this.location;
            data.speedValue = this.speedValue;
            data.speedType = this.speedType;
            data.speedDependent = this.speedDependent;
            data.timedomain = this.timedomain;
            data.vehicle = this.vehicle;
            data.vias = [];
            for (var i = 0; i < this.vias.length; i++) {
                data.vias.push(this.vias[i].getIntegrate());
            }
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdVariableSpeed;
}(_Feature3.default);

exports.default = RdVariableSpeed;

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 可变限速连续link
 */
var RdVariableSpeedLink = function (_Feature) {
    _inherits(RdVariableSpeedLink, _Feature);

    function RdVariableSpeedLink() {
        _classCallCheck(this, RdVariableSpeedLink);

        return _possibleConstructorReturn(this, (RdVariableSpeedLink.__proto__ || Object.getPrototypeOf(RdVariableSpeedLink)).apply(this, arguments));
    }

    _createClass(RdVariableSpeedLink, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDVARIABLESPEEDLINK';
            this.pid = data.pid;
            this.linkPid = data.linkPid;
            this.seqNum = data.seqNum || 1;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.seqNum = this.seqNum;
            data.linkPid = this.linkPid;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.seqNum = this.seqNum;
            data.linkPid = this.linkPid;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdVariableSpeedLink;
}(_Feature3.default);

exports.default = RdVariableSpeedLink;

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 语音引导
 */
var RdVoiceGuide = function (_Feature) {
    _inherits(RdVoiceGuide, _Feature);

    function RdVoiceGuide() {
        _classCallCheck(this, RdVoiceGuide);

        return _possibleConstructorReturn(this, (RdVoiceGuide.__proto__ || Object.getPrototypeOf(RdVoiceGuide)).apply(this, arguments));
    }

    _createClass(RdVoiceGuide, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDVOICEGUIDE';
            this.pid = data.pid;
            this.inLinkPid = data.inLinkPid;
            this.nodePid = data.nodePid;
            this.rowId = data.rowId || null;

            this.details = [];
            if (data.details) {
                for (var i = 0, len = data.details.length; i < len; i++) {
                    this.details.push(new FM.dataApi.RdVoiceGuideDetail(data.details[i]));
                }
            }
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.inLinkPid = this.inLinkPid;
            data.nodePid = this.nodePid;
            data.rowId = this.rowId;

            data.details = [];
            if (this.details) {
                for (var i = 0, len = this.details.length; i < len; i++) {
                    data.details.push(this.details[i].getIntegrate());
                }
            }

            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.inLinkPid = this.inLinkPid;
            data.nodePid = this.nodePid;
            data.rowId = this.rowId;

            data.details = [];
            if (this.details) {
                for (var i = 0, len = this.details.length; i < len; i++) {
                    data.details.push(this.details[i].getIntegrate());
                }
            }

            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdVoiceGuide;
}(_Feature3.default);

exports.default = RdVoiceGuide;

/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 语音引导详细信息
 */
var RdVoiceGuideDetail = function (_Feature) {
    _inherits(RdVoiceGuideDetail, _Feature);

    function RdVoiceGuideDetail() {
        _classCallCheck(this, RdVoiceGuideDetail);

        return _possibleConstructorReturn(this, (RdVoiceGuideDetail.__proto__ || Object.getPrototypeOf(RdVoiceGuideDetail)).apply(this, arguments));
    }

    _createClass(RdVoiceGuideDetail, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDVOICEGUIDEDETAIL';
            this.pid = data.pid;
            this.voiceguidePid = data.voiceguidePid;
            this.outLinkPid = data.outLinkPid;
            this.guideCode = data.guideCode || 0;
            this.guideType = data.guideType || 0;
            // this.processFlag = (data.processFlag === undefined || data.processFlag === '') ? 1 : data.processFlag;
            if (typeof data.processFlag !== 'undefined') {
                this.processFlag = data.processFlag;
            } else {
                this.processFlag = 1;
            }
            // this.relationshipType = (data.relationshipType === undefined || data.relationshipType === '') ? 1 : data.relationshipType;
            if (typeof data.relationshipType !== 'undefined') {
                this.relationshipType = data.relationshipType;
            } else {
                this.relationshipType = 1;
            }
            this.rowId = data.rowId || null;

            this.vias = [];
            if (data.vias) {
                for (var i = 0, len = data.vias.length; i < len; i++) {
                    this.vias.push(new FM.dataApi.RdVoiceGuideVia(data.vias[i]));
                }
            }
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.voiceguidePid = this.voiceguidePid;
            data.outLinkPid = this.outLinkPid;
            data.guideCode = this.guideCode;
            data.guideType = this.guideType;
            data.processFlag = this.processFlag;
            data.relationshipType = this.relationshipType;

            data.vias = [];
            if (this.vias) {
                for (var i = 0, len = this.vias.length; i < len; i++) {
                    data.vias.push(this.vias[i].getIntegrate());
                }
            }
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.voiceguidePid = this.voiceguidePid;
            data.outLinkPid = this.outLinkPid;
            data.guideCode = this.guideCode;
            data.guideType = this.guideType;
            data.processFlag = this.processFlag;
            data.relationshipType = this.relationshipType;

            data.vias = [];
            if (this.vias) {
                for (var i = 0, len = this.vias.length; i < len; i++) {
                    data.vias.push(this.vias[i].getIntegrate());
                }
            }
            data.rowId = this.rowId;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return RdVoiceGuideDetail;
}(_Feature3.default);

exports.default = RdVoiceGuideDetail;

/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 语音引导经过线
 */
var RdVoiceGuideVia = function (_Feature) {
    _inherits(RdVoiceGuideVia, _Feature);

    function RdVoiceGuideVia() {
        _classCallCheck(this, RdVoiceGuideVia);

        return _possibleConstructorReturn(this, (RdVoiceGuideVia.__proto__ || Object.getPrototypeOf(RdVoiceGuideVia)).apply(this, arguments));
    }

    _createClass(RdVoiceGuideVia, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RDVOICEGUIDEVIA';
            this.detailId = data.detailId;
            this.linkPid = data.linkPid;
            this.groupId = data.groupId === undefined || data.groupId === '' ? 1 : data.groupId;
            this.seqNum = data.seqNum === undefined || data.seqNum === '' ? 1 : data.seqNum;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.detailId = this.detailId;
            data.linkPid = this.linkPid;
            data.groupId = this.groupId;
            data.seqNum = this.seqNum;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.detailId = this.detailId;
            data.linkPid = this.linkPid;
            data.groupId = this.groupId;
            data.seqNum = this.seqNum;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RdVoiceGuideVia;
}(_Feature3.default);

exports.default = RdVoiceGuideVia;

/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 警示信息
 */
var RdWarningInfo = function (_Feature) {
  _inherits(RdWarningInfo, _Feature);

  function RdWarningInfo() {
    _classCallCheck(this, RdWarningInfo);

    return _possibleConstructorReturn(this, (RdWarningInfo.__proto__ || Object.getPrototypeOf(RdWarningInfo)).apply(this, arguments));
  }

  _createClass(RdWarningInfo, [{
    key: 'setAttributes',

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data - 接口返回的数据
     * @return {undefined}
     */
    value: function setAttributes(data) {
      this.geoLiveType = 'RDWARNINGINFO';
      this.pid = data.pid || null;
      this.linkPid = data.linkPid;
      this.nodePid = data.nodePid;
      this.typeCode = data.typeCode || null;
      this.validDis = data.validDis || 0;
      this.warnDis = data.warnDis || 0;
      this.timeDomain = data.timeDomain || '';
      this.vehicle = data.vehicle || 0;
      this.descript = data.descript || null;
      this.rowId = data.rowId || null;
    }
    /**
     * 模型转换函数，获取的数据片段
     * @return {object} 格式化后的片段数据
     */

  }, {
    key: 'getSnapShot',
    value: function getSnapShot() {
      var data = {};
      data.pid = this.pid;
      data.linkPid = this.linkPid;
      data.nodePid = this.nodePid;
      data.typeCode = this.typeCode;
      data.validDis = this.validDis;
      data.warnDis = this.warnDis;
      data.timeDomain = this.timeDomain;
      data.vehicle = this.vehicle;
      data.descript = this.descript;
      data.rowId = this.rowId;
      data.geoLiveType = this.geoLiveType;

      return data;
    }
    /**
     * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
     * @return {object} 前端传递给服务的参数数据
     */

  }, {
    key: 'getIntegrate',
    value: function getIntegrate() {
      var data = {};
      data.pid = this.pid;
      data.linkPid = this.linkPid;
      data.nodePid = this.nodePid;
      data.typeCode = this.typeCode;
      data.validDis = this.validDis;
      data.warnDis = this.warnDis;
      data.timeDomain = this.timeDomain;
      data.vehicle = this.vehicle;
      data.descript = this.descript;
      data.rowId = this.rowId;
      // data.geoLiveType = this.geoLiveType;

      return data;
    }
  }]);

  return RdWarningInfo;
}(_Feature3.default);

exports.default = RdWarningInfo;

/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 道路名
 */
var RoadName = function (_Feature) {
    _inherits(RoadName, _Feature);

    function RoadName() {
        _classCallCheck(this, RoadName);

        return _possibleConstructorReturn(this, (RoadName.__proto__ || Object.getPrototypeOf(RoadName)).apply(this, arguments));
    }

    _createClass(RoadName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'ROADNAME';
            this.pid = data.pid || null;
            this.nameId = data.nameId || null;
            this.nameGroupid = data.nameGroupid || null;
            this.langCode = data.langCode || 'CHI';
            this.name = data.name || '';
            this.type = data.type || '';
            this.base = data.base || '';
            this.prefix = data.prefix || '';
            this.infix = data.infix || '';
            this.suffix = data.suffix || '';
            this.namePhonetic = data.namePhonetic || '';
            this.typePhonetic = data.typePhonetic || '';
            this.basePhonetic = data.basePhonetic || '';
            this.prefixPhonetic = data.prefixPhonetic || '';
            this.infixPhonetic = data.infixPhonetic || '';
            this.suffixPhonetic = data.suffixPhonetic || '';
            this.srcFlag = data.srcFlag === undefined || data.srcFlag === '' ? 0 : data.srcFlag;
            this.roadType = data.roadType === undefined || data.roadType === '' ? 0 : data.roadType;
            this.adminId = data.adminId || null;
            this.codeType = data.codeType === undefined || data.codeType === '' ? 0 : data.codeType;
            this.voiceFile = data.voiceFile || '';
            this.srcResume = data.srcResume || '';
            this.paRegionId = data.paRegionId || null;
            this.splitFlag = data.splitFlag === undefined || data.splitFlag === '' ? 0 : data.splitFlag;
            this.memo = data.memo || '';
            this.routeId = data.routeId === undefined || data.routeId === '' ? 0 : data.routeId;
            this.uRecord = data.uRecord || null;
            this.uFields = data.uFields || '';
            this.city = data.city || '';
            this.adminName = data.adminName || '';
            this.rowId = data.rowId || null;
            this.hwInfoFlag = null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.nameId = this.nameId;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.name = this.name;
            data.type = this.type;
            data.base = this.base;
            data.prefix = this.prefix;
            data.infix = this.infix;
            data.suffix = this.suffix;
            data.namePhonetic = this.namePhonetic;
            data.typePhonetic = this.typePhonetic;
            data.basePhonetic = this.basePhonetic;
            data.prefixPhonetic = this.prefixPhonetic;
            data.infixPhonetic = this.infixPhonetic;
            data.suffixPhonetic = this.suffixPhonetic;
            data.srcFlag = this.srcFlag;
            data.roadType = this.roadType;
            data.adminId = this.adminId;
            data.codeType = this.codeType;
            data.voiceFile = this.voiceFile;
            data.srcResume = this.srcResume;
            data.paRegionId = this.paRegionId;
            data.splitFlag = this.splitFlag;
            data.memo = this.memo;
            data.routeId = this.routeId;
            data.uRecord = this.uRecord;
            data.uFields = this.uFields;
            data.city = this.city;
            data.adminName = this.adminName;
            data.hwInfoFlag = this.hwInfoFlag;

            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.nameId = this.nameId;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.name = this.name;
            data.type = this.type || '';
            data.base = this.base || '';
            data.prefix = this.prefix;
            data.infix = this.infix;
            data.suffix = this.suffix;
            data.namePhonetic = this.namePhonetic;
            data.typePhonetic = this.typePhonetic;
            data.basePhonetic = this.basePhonetic;
            data.prefixPhonetic = this.prefixPhonetic;
            data.infixPhonetic = this.infixPhonetic;
            data.suffixPhonetic = this.suffixPhonetic;
            data.srcFlag = this.srcFlag;
            data.roadType = this.roadType;
            data.adminId = this.adminId || '';
            data.codeType = this.codeType;
            data.voiceFile = this.voiceFile;
            data.srcResume = this.srcResume;
            data.paRegionId = this.paRegionId;
            data.splitFlag = this.splitFlag;
            data.memo = this.memo;
            data.routeId = this.routeId;
            data.uRecord = this.uRecord;
            data.uFields = this.uFields;
            data.city = this.city;
            data.adminName = this.adminName;
            data.geoLiveType = this.geoLiveType;
            data.hwInfoFlag = this.hwInfoFlag;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RoadName;
}(_Feature3.default);

exports.default = RoadName;

/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 铁路
 */
var RwLink = function (_Feature) {
    _inherits(RwLink, _Feature);

    function RwLink() {
        _classCallCheck(this, RwLink);

        return _possibleConstructorReturn(this, (RwLink.__proto__ || Object.getPrototypeOf(RwLink)).apply(this, arguments));
    }

    _createClass(RwLink, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RWLINK';
            this.pid = data.pid;
            this.linkPid = data.linkPid;
            this.featurePid = data.featurePid || 0;
            this.sNodePid = data.sNodePid;
            this.eNodePid = data.eNodePid;
            this.kind = data.kind || 1;
            this.form = data.form || 0;
            this.length = data.length || 0;
            this.geometry = data.geometry;
            this.meshId = data.meshId || 0;
            this.scale = data.scale || 0;
            this.detailFlag = data.detailFlag || 0;
            if (typeof data.editFlag !== 'undefined') {
                this.editFlag = data.editFlag;
            } else {
                this.editFlag = 1;
            }
            this.color = data.color || null;
            this.names = [];
            if (data.names && data.names.length > 0) {
                for (var i = 0, len = data.names.length; i < len; i++) {
                    var name = new FM.dataApi.RwLinkName(data.names[i]);
                    this.names.push(name);
                }
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.linkPid = this.linkPid;
            data.featurePid = this.featurePid;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            data.kind = this.kind;
            data.form = this.form;
            data.length = this.length;
            data.meshId = this.meshId;
            data.scale = this.scale;
            data.detailFlag = this.detailFlag;
            data.editFlag = this.editFlag;
            data.color = this.color;
            var names = [];
            for (var i = 0, len = this.names.length; i < len; i++) {
                names.push(this.names[i].getIntegrate());
            }
            data.names = names;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.linkPid = this.linkPid;
            data.featurePid = this.featurePid;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            data.kind = this.kind;
            data.form = this.form;
            data.length = this.length;
            data.geometry = this.geometry;
            data.meshId = this.meshId;
            data.scale = this.scale;
            data.detailFlag = this.detailFlag;
            data.editFlag = this.editFlag;
            data.color = this.color;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 前端校验
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            var _self = this;
            this.names.forEach(function (nameItem) {
                if (!nameItem.name) {
                    _self._pushError('nameNotNull', 'rwLink道路名称中的NAME值不能为空');
                    return;
                }
            });
        }
    }]);

    return RwLink;
}(_Feature3.default);

exports.default = RwLink;

/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 铁路名
 */
var RwLinkName = function (_Feature) {
    _inherits(RwLinkName, _Feature);

    function RwLinkName() {
        _classCallCheck(this, RwLinkName);

        return _possibleConstructorReturn(this, (RwLinkName.__proto__ || Object.getPrototypeOf(RwLinkName)).apply(this, arguments));
    }

    _createClass(RwLinkName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RWLINKNAME';
            this.rowId = data.rowId || null;
            this.pid = data.pid;
            this.linkPid = data.linkPid || 0;
            this.nameGroupid = data.nameGroupid || 0;
            this.name = data.name || '';
            // this.uFields = data["uFields"];
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.rowId = this.rowId;
            data.pid = this.pid;
            data.linkPid = this.linkPid;
            data.nameGroupid = this.nameGroupid;
            // data["uFields"] = this.uFields;
            // data["name"] = this.name;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.rowId = this.rowId;
            data.pid = this.pid;
            data.linkPid = this.linkPid;
            data.nameGroupid = this.nameGroupid;
            data.geoLiveType = this.geoLiveType;
            // data["uFields"] = this.uFields;
            // data["name"] = this.name;
            return data;
        }
    }]);

    return RwLinkName;
}(_Feature3.default);

exports.default = RwLinkName;

/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 铁路点
 */
var RwNode = function (_Feature) {
    _inherits(RwNode, _Feature);

    function RwNode() {
        _classCallCheck(this, RwNode);

        return _possibleConstructorReturn(this, (RwNode.__proto__ || Object.getPrototypeOf(RwNode)).apply(this, arguments));
    }

    _createClass(RwNode, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'RWNODE';
            this.pid = data.pid;
            this.kind = data.kind;
            this.form = data.form;
            this.geometry = data.geometry;
            this.meshes = data.meshes;
            var str = [];
            for (var i = 0; i < data.meshes.length; i++) {
                str.push(data.meshes[i].meshId);
            }
            this.meshId = str.join(',');
            this.links = data.links || [];
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.kind = this.kind;
            data.form = this.form;
            data.meshId = this.meshId;
            data.geometry = this.geometry;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.kind = this.kind;
            data.form = this.form;
            data.meshId = this.meshId;
            data.geometry = this.geometry;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RwNode;
}(_Feature3.default);

exports.default = RwNode;

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * TmcLine
 */
var TmcLine = function (_Feature) {
    _inherits(TmcLine, _Feature);

    function TmcLine() {
        _classCallCheck(this, TmcLine);

        return _possibleConstructorReturn(this, (TmcLine.__proto__ || Object.getPrototypeOf(TmcLine)).apply(this, arguments));
    }

    _createClass(TmcLine, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TMCLINE';
            this.tmcId = data.tmcId;
            this.pid = data.tmcId;
            this.loctableId = data.loctableId;
            this.cid = data.cid;
            this.locCode = data.locCode;
            this.typeCode = data.typeCode;
            this.seqNum = data.seqNum;
            this.areaTmcId = data.areaTmcId;
            this.locoffPos = data.locoffPos;
            this.locoffNeg = data.locoffNeg;
            this.uplineTmcId = data.uplineTmcId;
            this.names = [];
            if (data.names && data.names.length > 0) {
                for (var i = 0; i < data.names.length; i++) {
                    var name = new FM.dataApi.TmcLineName(data.names[i]);
                    this.names.push(name);
                }
            }
            this.uRecord = data.uRecord;
            this.uFields = data.uFields;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.tmcId = this.tmcId;
            data.loctableId = this.loctableId;
            data.cid = this.cid;
            data.locCode = this.locCode;
            data.typeCode = this.typeCode;
            data.seqNum = this.seqNum;
            data.areaTmcId = this.areaTmcId;
            data.locoffPos = this.locoffPos;
            data.locoffNeg = this.locoffNeg;
            data.uplineTmcId = this.uplineTmcId;
            data.names = [];
            for (var i = 0; i < this.names.length; i++) {
                data.names.push(this.names[i].getIntegrate());
            }
            data.uRecord = this.uRecord;
            data.uFields = this.uFields;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.tmcId = this.tmcId;
            data.loctableId = this.loctableId;
            data.cid = this.cid;
            data.locCode = this.locCode;
            data.typeCode = this.typeCode;
            data.seqNum = this.seqNum;
            data.areaTmcId = this.areaTmcId;
            data.locoffPos = this.locoffPos;
            data.locoffNeg = this.locoffNeg;
            data.uplineTmcId = this.uplineTmcId;
            data.names = [];
            for (var i = 0; i < this.names.length; i++) {
                data.names.push(this.names[i].getIntegrate());
            }
            data.uRecord = this.uRecord;
            data.uFields = this.uFields;
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return TmcLine;
}(_Feature3.default);

exports.default = TmcLine;

/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * TmcLine名称
 */
var TmcLineName = function (_Feature) {
    _inherits(TmcLineName, _Feature);

    function TmcLineName() {
        _classCallCheck(this, TmcLineName);

        return _possibleConstructorReturn(this, (TmcLineName.__proto__ || Object.getPrototypeOf(TmcLineName)).apply(this, arguments));
    }

    _createClass(TmcLineName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TMCLINETRANSLATENAME';
            this.tmcId = data.tmcId;
            this.nameFlag = data.nameFlag;
            this.transLang = data.transLang;
            this.translateName = data.translateName;
            this.phonetic = data.phonetic;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.tmcId = this.tmcId;
            data.nameFlag = this.nameFlag;
            data.transLang = this.transLang;
            data.translateName = this.translateName;
            data.phonetic = this.phonetic;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.tmcId = this.tmcId;
            data.nameFlag = this.nameFlag;
            data.transLang = this.transLang;
            data.translateName = this.translateName;
            data.phonetic = this.phonetic;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return TmcLineName;
}(_Feature3.default);

exports.default = TmcLineName;

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * TmcPoint
 */
var TmcPoint = function (_Feature) {
    _inherits(TmcPoint, _Feature);

    function TmcPoint() {
        _classCallCheck(this, TmcPoint);

        return _possibleConstructorReturn(this, (TmcPoint.__proto__ || Object.getPrototypeOf(TmcPoint)).apply(this, arguments));
    }

    _createClass(TmcPoint, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TMCPOINT';
            this.tmcId = data.tmcId;
            this.loctableId = data.loctableId;
            this.cid = data.cid;
            this.pid = data.tmcId;
            this.locCode = data.locCode;
            this.typeCode = data.typeCode;
            this.inPos = data.inPos;
            this.inNeg = data.inNeg;
            this.outNeg = data.outNeg;
            this.outPos = data.outPos;
            this.presentPos = data.presentPos;
            this.presentNeg = data.presentNeg;
            this.locoffPos = data.locoffPos;
            this.locoffNeg = data.locoffNeg;
            this.lineTmcId = data.lineTmcId;
            this.areaTmcId = data.areaTmcId;
            this.juncLoccode = data.juncLoccode;
            this.neighbourBound = data.neighbourBound;
            this.neighbourTable = data.neighbourTable;
            this.urban = data.urban;
            this.interuptRoad = data.interuptRoad;
            // 服务返回的是坐标数组，这里需要转成几何格式
            if (data.geometry.length) {
                var coor = data.geometry;
                this.geometry = {
                    coordinates: coor,
                    type: 'Point'
                };
            } else {
                this.geometry = data.geometry;
            }
            this.editFlag = data.editFlag;
            this.names = [];
            if (data.names && data.names.length > 0) {
                for (var i = 0; i < data.names.length; i++) {
                    var name = new FM.dataApi.TmcPointName(data.names[i]);
                    this.names.push(name);
                }
            }
            this.uRecord = data.uRecord;
            this.uFields = data.uFields;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.tmcId = this.tmcId;
            data.loctableId = this.loctableId;
            data.cid = this.cid;
            data.locCode = this.locCode;
            data.typeCode = this.typeCode;
            data.inPos = this.inPos;
            data.inNeg = this.inNeg;
            data.outNeg = this.outNeg;
            data.outPos = this.outPos;
            data.presentPos = this.presentPos;
            data.presentNeg = this.presentNeg;
            data.locoffPos = this.locoffPos;
            data.locoffNeg = this.locoffNeg;
            data.lineTmcId = this.lineTmcId;
            data.areaTmcId = this.areaTmcId;
            data.juncLoccode = this.juncLoccode;
            data.neighbourBound = this.neighbourBound;
            data.neighbourTable = this.neighbourTable;
            data.urban = this.urban;
            data.interuptRoad = this.interuptRoad;
            data.geometry = this.geometry;
            data.editFlag = this.editFlag;
            data.names = [];
            for (var i = 0; i < this.names.length; i++) {
                data.names.push(this.names[i].getIntegrate());
            }
            data.uRecord = this.uRecord;
            data.uFields = this.uFields;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.tmcId = this.tmcId;
            data.loctableId = this.loctableId;
            data.cid = this.cid;
            data.locCode = this.locCode;
            data.typeCode = this.typeCode;
            data.inPos = this.inPos;
            data.inNeg = this.inNeg;
            data.outNeg = this.outNeg;
            data.outPos = this.outPos;
            data.presentPos = this.presentPos;
            data.presentNeg = this.presentNeg;
            data.locoffPos = this.locoffPos;
            data.locoffNeg = this.locoffNeg;
            data.lineTmcId = this.lineTmcId;
            data.areaTmcId = this.areaTmcId;
            data.juncLoccode = this.juncLoccode;
            data.neighbourBound = this.neighbourBound;
            data.neighbourTable = this.neighbourTable;
            data.urban = this.urban;
            data.interuptRoad = this.interuptRoad;
            data.geometry = this.geometry;
            data.editFlag = this.editFlag;
            data.names = [];
            for (var i = 0; i < this.names.length; i++) {
                data.names.push(this.names[i].getIntegrate());
            }
            data.uRecord = this.uRecord;
            data.uFields = this.uFields;
            data.rowId = this.rowId;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return TmcPoint;
}(_Feature3.default);

exports.default = TmcPoint;

/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * TmcPoint名称
 */
var TmcPointName = function (_Feature) {
    _inherits(TmcPointName, _Feature);

    function TmcPointName() {
        _classCallCheck(this, TmcPointName);

        return _possibleConstructorReturn(this, (TmcPointName.__proto__ || Object.getPrototypeOf(TmcPointName)).apply(this, arguments));
    }

    _createClass(TmcPointName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TMCPOINTTRANSLATENAME';
            this.tmcId = data.tmcId;
            this.nameFlag = data.nameFlag;
            this.transLang = data.transLang;
            this.translateName = data.translateName;
            this.phonetic = data.phonetic;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.tmcId = this.tmcId;
            data.nameFlag = this.nameFlag;
            data.transLang = this.transLang;
            data.translateName = this.translateName;
            data.phonetic = this.phonetic;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.tmcId = this.tmcId;
            data.nameFlag = this.nameFlag;
            data.transLang = this.transLang;
            data.translateName = this.translateName;
            data.phonetic = this.phonetic;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return TmcPointName;
}(_Feature3.default);

exports.default = TmcPointName;

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * zoneFace
 */
var ZoneFace = function (_Feature) {
    _inherits(ZoneFace, _Feature);

    function ZoneFace() {
        _classCallCheck(this, ZoneFace);

        return _possibleConstructorReturn(this, (ZoneFace.__proto__ || Object.getPrototypeOf(ZoneFace)).apply(this, arguments));
    }

    _createClass(ZoneFace, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'ZONEFACE';
            this.pid = data.pid;
            this.regionId = data.regionId;
            this.geometry = data.geometry;
            this.area = data.area || 0;
            this.perimeter = data.perimeter || 0;
            this.meshId = data.meshId || 0;
            this.rowId = data.rowId || null;
            this.faceTopos = data.faceTopos || [];
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.regionId = this.regionId;
            data.geometry = this.geometry;
            data.area = this.area;
            data.perimeter = this.perimeter;
            data.meshId = this.meshId;
            data.faceTopos = this.faceTopos;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.facePid = this.facePid;
            data.regionId = this.regionId;
            data.geometry = this.geometry;
            data.area = this.area;
            data.perimeter = this.perimeter;
            data.meshId = this.meshId;
            data.faceTopos = this.faceTopos;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return ZoneFace;
}(_Feature3.default);

exports.default = ZoneFace;

/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ZoneLink
 */
var ZoneLink = function (_Feature) {
    _inherits(ZoneLink, _Feature);

    function ZoneLink() {
        _classCallCheck(this, ZoneLink);

        return _possibleConstructorReturn(this, (ZoneLink.__proto__ || Object.getPrototypeOf(ZoneLink)).apply(this, arguments));
    }

    _createClass(ZoneLink, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'ZONELINK';
            this.pid = data.pid;
            this.rowId = data.rowId || null;
            this.sNodePid = data.sNodePid;
            this.eNodePid = data.eNodePid;
            this.kinds = [];
            if (data.kinds) {
                for (var i = 0, len = data.kinds.length; i < len; i++) {
                    this.kinds.push(new FM.dataApi.ZoneLinkKind(data.kinds[i]));
                }
            }
            this.geometry = data.geometry;
            this.length = data.length || 0;
            this.scale = data.scale || 0;
            this.editFlag = data.editFlag || 1;
            var str = [];
            for (var j = 0; j < data.meshes.length; j++) {
                str.push(data.meshes[j].meshId);
            }
            this.meshId = str.join(',');
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            data.kinds = [];
            // data.geoLiveType = this.geoLiveType;
            if (this.kinds) {
                for (var i = 0, len = this.kinds.length; i < len; i++) {
                    data.kinds.push(this.kinds[i].getIntegrate());
                }
            }
            data.geometry = this.geometry;
            data.length = this.length;
            data.scale = this.scale;
            data.editFlag = this.editFlag;
            data.meshId = this.meshId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.rowId = this.rowId;
            data.sNodePid = this.sNodePid;
            data.eNodePid = this.eNodePid;
            data.kinds = [];
            if (this.kinds) {
                for (var i = 0, len = this.kinds.length; i < len; i++) {
                    data.kinds.push(this.kinds[i].getIntegrate());
                }
            }
            data.geometry = this.geometry;
            data.length = this.length;
            data.scale = this.scale;
            data.editFlag = this.editFlag;
            data.meshId = this.meshId;
            return data;
        }
    }]);

    return ZoneLink;
}(_Feature3.default);

exports.default = ZoneLink;

/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ZoneLink种别
 */
var ZoneLinkKind = function (_Feature) {
    _inherits(ZoneLinkKind, _Feature);

    function ZoneLinkKind() {
        _classCallCheck(this, ZoneLinkKind);

        return _possibleConstructorReturn(this, (ZoneLinkKind.__proto__ || Object.getPrototypeOf(ZoneLinkKind)).apply(this, arguments));
    }

    _createClass(ZoneLinkKind, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'ZONELINKKIND';
            this.rowId = data.rowId || null;
            this.linkPid = data.linkPid;
            if (typeof data.kind !== 'undefined') {
                this.kind = data.kind;
            } else {
                this.kind = 1;
            }
            if (typeof data.form !== 'undefined') {
                this.form = data.form;
            } else {
                this.form = 1;
            }
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.rowId = this.rowId;
            data.linkPid = this.linkPid;
            data.kind = this.kind;
            data.form = this.form;
            return data;
        }
    }]);

    return ZoneLinkKind;
}(_Feature3.default);

exports.default = ZoneLinkKind;

/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ZoneNode
 */
var ZoneNode = function (_Feature) {
    _inherits(ZoneNode, _Feature);

    function ZoneNode() {
        _classCallCheck(this, ZoneNode);

        return _possibleConstructorReturn(this, (ZoneNode.__proto__ || Object.getPrototypeOf(ZoneNode)).apply(this, arguments));
    }

    _createClass(ZoneNode, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'ZONENODE';
            this.pid = data.pid;
            this.kind = data.kind;
            this.form = data.form;
            this.geometry = data.geometry;
            this.meshes = data.meshes;
            var str = [];
            for (var i = 0; i < data.meshes.length; i++) {
                str.push(data.meshes[i].meshId);
            }
            this.meshId = str.join(',');
            this.links = data.links || [];
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.pid = this.pid;
            data.kind = this.kind;
            data.form = this.form;
            data.meshId = this.meshId;
            // data.geometry = this.geometry;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.pid = this.pid;
            data.kind = this.kind;
            data.form = this.form;
            data.meshId = this.meshId;
            data.geometry = this.geometry;
            data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return ZoneNode;
}(_Feature3.default);

exports.default = ZoneNode;

/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _IxCheckResult = __webpack_require__(436);

Object.defineProperty(exports, 'IxCheckResult', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxCheckResult).default;
  }
});

var _IxOutput = __webpack_require__(437);

Object.defineProperty(exports, 'IxOutput', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxOutput).default;
  }
});

var _IxPoi = __webpack_require__(438);

Object.defineProperty(exports, 'IxPoi', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoi).default;
  }
});

var _IxPoiAddress = __webpack_require__(439);

Object.defineProperty(exports, 'IxPoiAddress', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiAddress).default;
  }
});

var _IxPoiBuilding = __webpack_require__(440);

Object.defineProperty(exports, 'IxPoiBuilding', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiBuilding).default;
  }
});

var _IxPoiBusinesstime = __webpack_require__(441);

Object.defineProperty(exports, 'IxPoiBusinesstime', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiBusinesstime).default;
  }
});

var _IxPoiCarRental = __webpack_require__(442);

Object.defineProperty(exports, 'IxPoiCarRental', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiCarRental).default;
  }
});

var _IxPoiChargingplot = __webpack_require__(443);

Object.defineProperty(exports, 'IxPoiChargingplot', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiChargingplot).default;
  }
});

var _IxPoiChargingstation = __webpack_require__(444);

Object.defineProperty(exports, 'IxPoiChargingstation', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiChargingstation).default;
  }
});

var _IxPoiChildren = __webpack_require__(445);

Object.defineProperty(exports, 'IxPoiChildren', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiChildren).default;
  }
});

var _IxPoiContact = __webpack_require__(446);

Object.defineProperty(exports, 'IxPoiContact', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiContact).default;
  }
});

var _IxPoiDetail = __webpack_require__(447);

Object.defineProperty(exports, 'IxPoiDetail', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiDetail).default;
  }
});

var _IxPoiGasstation = __webpack_require__(448);

Object.defineProperty(exports, 'IxPoiGasstation', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiGasstation).default;
  }
});

var _IxPoiHotel = __webpack_require__(449);

Object.defineProperty(exports, 'IxPoiHotel', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiHotel).default;
  }
});

var _IxPoiName = __webpack_require__(450);

Object.defineProperty(exports, 'IxPoiName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiName).default;
  }
});

var _IxPoiOilstation = __webpack_require__(451);

Object.defineProperty(exports, 'IxPoiOilstation', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiOilstation).default;
  }
});

var _IxPoiParent = __webpack_require__(452);

Object.defineProperty(exports, 'IxPoiParent', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiParent).default;
  }
});

var _IxPoiParking = __webpack_require__(453);

Object.defineProperty(exports, 'IxPoiParking', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiParking).default;
  }
});

var _IxPoiPhoto = __webpack_require__(454);

Object.defineProperty(exports, 'IxPoiPhoto', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiPhoto).default;
  }
});

var _IxPoiRestaurant = __webpack_require__(455);

Object.defineProperty(exports, 'IxPoiRestaurant', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiRestaurant).default;
  }
});

var _IxPoiSnapShot = __webpack_require__(456);

Object.defineProperty(exports, 'IxPoiSnapShot', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiSnapShot).default;
  }
});

var _IxSamePoi = __webpack_require__(457);

Object.defineProperty(exports, 'IxSamePoi', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxSamePoi).default;
  }
});

var _IxSamePoiPart = __webpack_require__(458);

Object.defineProperty(exports, 'IxSamePoiPart', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxSamePoiPart).default;
  }
});

var _IxSearchResult = __webpack_require__(459);

Object.defineProperty(exports, 'IxSearchResult', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxSearchResult).default;
  }
});

var _IxPointAddress = __webpack_require__(460);

Object.defineProperty(exports, 'IxPointAddress', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPointAddress).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI检查规则 的前端数据模型
 */
var IxCheckResult = function (_DataModel) {
    _inherits(IxCheckResult, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxCheckResult(data, options) {
        _classCallCheck(this, IxCheckResult);

        var _this = _possibleConstructorReturn(this, (IxCheckResult.__proto__ || Object.getPrototypeOf(IxCheckResult)).call(this, data, options));

        _this.dataModelType = 'IX_CHECK_RESULT';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxCheckResult, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.id;
            this.ruleId = data.ruleid || '';
            this.geometry = data.geometry;
            this.information = data.information || '';
            this.rank = data.rank;
            this.targetsText = data.targets || '';
            this.targets = [];
            if (data.targets && data.targets.split(';').length > 0) {
                var list = data.targets.split(';');
                var temp = void 0;
                for (var i = 0; i < list.length; i++) {
                    temp = list[i].replace(/\[|]/g, '').split(',');
                    this.targets.push({
                        featType: temp[0].split('_').join(''),
                        pid: temp[1]
                    });
                }
            }
            this.worker = data.worker;
            this.createDate = data.create_date;
            this.updateDate = data.update_date;
            this.status = data.status;
            this.qaStatus = data.qa_status;
            this.qaWorker = data.qa_worker;
            this.refFeatures = data.refFeatures || []; // poi检查结果预留
            this.jobId = data.jobId;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.create_date = this.createDate;
            ret.geometry = this.geometry;
            ret.id = this.pid;
            ret.information = this.information;
            ret.rank = this.rank;
            ret.ruleid = this.ruleId;
            ret.targets = this.targetsText;
            ret.worker = this.worker;
            return ret;
        }
    }]);

    return IxCheckResult;
}(_DataModel3.default);

exports.default = IxCheckResult;

/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI信息输出 的前端数据模型
 */
var IxOutput = function (_DataModel) {
    _inherits(IxOutput, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxOutput(data, options) {
        _classCallCheck(this, IxOutput);

        var _this = _possibleConstructorReturn(this, (IxOutput.__proto__ || Object.getPrototypeOf(IxOutput)).call(this, data, options));

        _this.dataModelType = 'IX_OUTPUT';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxOutput, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.type = data.type;
            this.pid = data.pid;
            this.childPid = data.childPid;
            this.op = data.op;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.type = this.type;
            ret.pid = this.pid;
            ret.childPid = this.childPid;
            ret.op = this.op;
            return ret;
        }
    }]);

    return IxOutput;
}(_DataModel3.default);

exports.default = IxOutput;

/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI的前端数据模型
 */
var IxPoi = function (_Feature) {
    _inherits(IxPoi, _Feature);

    function IxPoi() {
        _classCallCheck(this, IxPoi);

        return _possibleConstructorReturn(this, (IxPoi.__proto__ || Object.getPrototypeOf(IxPoi)).apply(this, arguments));
    }

    _createClass(IxPoi, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'IXPOI';
            this.pid = data.pid || 0;
            this.rowId = data.rowId || '';
            this.kindCode = data.kindCode || '0';
            this.xGuide = data.xGuide || 0;
            this.yGuide = data.yGuide || 0;
            this.linkPid = data.linkPid || 0;
            this.side = data.side || 0;
            this.nameGroupid = data.nameGroupid || 0;
            this.roadFlag = data.roadFlag || 0;
            this.pmeshId = data.pmeshId || 0;
            this.importance = data.importance || 0;
            this.chain = data.chain || null;
            this.airportCode = data.airportCode || null;
            this.accessFlag = data.accessFlag || 0;
            this.open24h = data.open24h || 2;
            this.meshId5K = data.meshId5K || null;
            this.meshId = data.meshId || 0;
            this.regionId = data.regionId || 0;
            this.postCode = data.postCode || null;
            this.difGroupid = data.difGroupid || null;
            this.editFlag = data.editFlag || 1;
            this.state = data.state || 0;
            this.fieldState = data.fieldState || null;
            var sportsVenueArr = data.sportsVenue ? data.sportsVenue.split('|') : [];
            this.sportsVenue = {};
            var obj = void 0,
                i = void 0,
                len = void 0;
            for (i = 0; i < sportsVenueArr.length; i++) {
                this.sportsVenue[sportsVenueArr[i]] = true;
            }
            this.type = data.type || 0;
            this.addressFlag = data.addressFlag || 0;
            this.exPriority = data.exPriority || null;
            this.editionFlag = data.editionFlag || null;
            this.poiMemo = data.poiMemo || null;
            this.oldBlockcoed = data.oldBlockcoed || null;
            this.oldName = data.oldName || null;
            this.oldAddress = data.oldAddress || null;
            this.oldKind = data.oldKind || null;
            this.poiNum = data.poiNum || null;
            this.log = data.log || null;
            this.taskId = data.taskId || 0;
            this.dataVersion = data.dataVersion || null;
            this.fieldTaskid = data.fieldTaskid || 0;
            this.verifiedFlag = data.verifiedFlag || 9;
            this.collectTime = data.collectTime || null;
            this.geoAdjustFlag = data.geoAdjustFlag || 9;
            this.fullAttrFlag = data.fullAttrFlag || 9;
            this.truckFlag = data.truckFlag || 0;
            this.level = data.level;
            this.indoor = data.indoor || 0;
            this.freshnessVefication = data.freshVerified;
            this.status = data.status || 0;
            this.icons = [].concat(data.icons || []); // 基本类型数组复制
            if (data.icons.length) {
                this.poi3DIcon = true;
            } else {
                this.poi3DIcon = false;
            }
            this.poiRmbIcon = false;
            this.poiCarIcon = false;
            this.poiIcon = false;
            this.vipFlag = data.vipFlag;
            this.rawFields = data.rawFields ? data.rawFields.split('|') : [];

            if (data.vipFlag) {
                var vFlag = data.vipFlag.split('|');
                if (vFlag.length > 1) {
                    for (var j = 0, vipLen = vFlag.length - 1; j < vipLen; j++) {
                        if (vFlag[j] == 1) {
                            this.poiRmbIcon = true;
                        } else if (vFlag[j] == 2) {
                            this.poiCarIcon = true;
                        } else if (vFlag[j] == 3) {
                            this.poiIcon = true;
                        }
                    }
                }
            }
            this.guide = {
                type: 'Point',
                coordinates: [data.xGuide, data.yGuide]
            };
            this.guideLink = {
                type: 'LineString',
                coordinates: [[data.xGuide, data.yGuide], data.geometry.coordinates]
            };
            this.kindFormat = [];
            this.name = {}; // 主名称
            this.names = [];
            if (data.names) {
                for (var p = 0; p < data.names.length; p++) {
                    obj = new FM.dataApi.IxPoiName(data.names[p]);
                    this.names.push(obj);
                }
            }
            this.address = {}; // 主地址
            this.addresses = [];
            if (data.addresses) {
                for (var q = 0, qLen = data.addresses.length; q < qLen; q++) {
                    obj = new FM.dataApi.IxPoiAddress(data.addresses[q]);
                    this.addresses.push(obj);
                }
            }
            this.contactParts = null; // 存放手机和座机
            this.contacts = [];
            if (data.contacts) {
                for (i = 0, len = data.contacts.length; i < len; i++) {
                    this.contacts.push(new FM.dataApi.IxPoiContact(data.contacts[i]));
                }
            }
            this.photos = [];
            if (data.photos) {
                for (i = 0, len = data.photos.length; i < len; i++) {
                    this.photos.push(new FM.dataApi.IxPoiPhoto(data.photos[i]));
                }
            }
            this.children = [];
            if (data.children) {
                for (i = 0, len = data.children.length; i < len; i++) {
                    this.children.push(new FM.dataApi.IxPoiChildren(data.children[i]));
                }
            }
            this.parents = [];
            if (data.parents) {
                for (i = 0, len = data.parents.length; i < len; i++) {
                    this.parents.push(new FM.dataApi.IxPoiParent(data.parents[i]));
                }
            }
            this.buildings = [];
            if (data.buildings) {
                for (i = 0, len = data.buildings.length; i < len; i++) {
                    this.buildings.push(new FM.dataApi.IxPoiBuilding(data.buildings[i]));
                }
            }
            this.businesstimes = [];
            if (data.businesstimes) {
                for (i = 0, len = data.businesstimes.length; i < len; i++) {
                    this.businesstimes.push(new FM.dataApi.IxPoiBusinesstime(data.businesstimes[i]));
                }
            }
            this.carrentals = [];
            if (data.carrentals) {
                for (i = 0, len = data.carrentals.length; i < len; i++) {
                    this.carrentals.push(new FM.dataApi.IxPoiCarRental(data.carrentals[i]));
                }
            }
            this.details = [];
            if (data.details) {
                for (i = 0, len = data.details.length; i < len; i++) {
                    this.details.push(new FM.dataApi.IxPoiDetail(data.details[i]));
                }
            }
            this.gasstations = [];
            this.oilstations = [];
            if (data.gasstations) {
                for (i = 0, len = data.gasstations.length; i < len; i++) {
                    if (data.kindCode == '230215') {
                        // 加油站
                        this.oilstations.push(new FM.dataApi.IxPoiOilstation(data.gasstations[i]));
                    } else {
                        // 加气站
                        this.gasstations.push(new FM.dataApi.IxPoiGasstation(data.gasstations[i]));
                    }
                }
            }
            this.hotels = [];
            if (data.hotels) {
                for (i = 0, len = data.hotels.length; i < len; i++) {
                    this.hotels.push(new FM.dataApi.IxPoiHotel(data.hotels[i]));
                }
            }
            this.restaurants = [];
            if (data.restaurants) {
                for (i = 0, len = data.restaurants.length; i < len; i++) {
                    this.restaurants.push(new FM.dataApi.IxPoiRestaurant(data.restaurants[i]));
                }
            }
            this.parkings = [];
            if (data.parkings) {
                for (i = 0, len = data.parkings.length; i < len; i++) {
                    this.parkings.push(new FM.dataApi.IxPoiParking(data.parkings[i]));
                }
            }
            this.chargingstations = [];
            if (data.chargingstations) {
                for (i = 0, len = data.chargingstations.length; i < len; i++) {
                    this.chargingstations.push(new FM.dataApi.IxPoiChargingstation(data.chargingstations[i]));
                }
            }
            this.chargingplots = [];
            if (data.chargingplots) {
                for (i = 0, len = data.chargingplots.length; i < len; i++) {
                    this.chargingplots.push(new FM.dataApi.IxPoiChargingplot(data.chargingplots[i]));
                }
            }
            this.samePois = [];
            if (data.samePois) {
                for (i = 0, len = data.samePois.length; i < len; i++) {
                    this.samePois.push(new FM.dataApi.IxSamePoi(data.samePois[i]));
                }
            }
            this.samepoiParts = [];
            if (data.samepoiParts) {
                for (i = 0, len = data.samepoiParts.length; i < len; i++) {
                    this.samepoiParts.push(new FM.dataApi.IxSamePoiPart(data.samepoiParts[i]));
                }
            }
            // 深度信息增加省市区字段显示，不可编辑
            this.provinceCityCounty = data.provinceCityCounty || '';
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            this._clearDeepInfo();
            this._formatNameAndAddress();
            // this._clearEmptyContacts();
            this._formatContacts();
            var ret = {};
            ret.pid = this.pid;
            ret.rowId = this.rowId;
            ret.kindCode = this.kindCode == '0' ? '' : this.kindCode;
            ret.side = this.side;
            ret.geometry = FM.Util.clone(this.geometry);
            ret.xGuide = this.guide.coordinates[0];
            ret.yGuide = this.guide.coordinates[1];
            ret.nameGroupid = this.nameGroupid;
            ret.roadFlag = this.roadFlag;
            ret.pmeshId = this.pmeshId;
            ret.importance = this.importance;
            ret.chain = this.chain ? this.chain : '';
            ret.airportCode = this.airportCode;
            ret.accessFlag = this.accessFlag;
            ret.open24h = this.open24h;
            ret.meshId5K = this.meshId5K;
            ret.meshId = this.meshId;
            ret.regionId = this.regionId;
            ret.postCode = this.postCode;
            ret.difGroupid = this.difGroupid;
            ret.editFlag = this.editFlag;
            ret.state = this.state;
            ret.fieldState = this.fieldState;
            ret.icons = this.icons.slice(); // 基本类型数组复制
            var sportsVenueArr = [];
            for (var key in this.sportsVenue) {
                if (this.sportsVenue[key]) {
                    sportsVenueArr.push(key);
                }
            }
            ret.sportsVenue = sportsVenueArr.join('|').substr(0, 3);
            ret.type = this.type;
            ret.addressFlag = this.addressFlag;
            ret.exPriority = this.exPriority;
            ret.editionFlag = this.editionFlag;
            ret.poiMemo = this.poiMemo;
            ret.oldBlockcoed = this.oldBlockcoed;
            ret.oldName = this.oldName;
            ret.oldAddress = this.oldAddress;
            ret.oldKind = this.oldKind;
            ret.poiNum = this.poiNum;
            ret.log = this.log;
            ret.taskId = this.taskId;
            ret.dataVersion = this.dataVersion;
            ret.fieldTaskid = this.fieldTaskid;
            ret.verifiedFlag = this.verifiedFlag;
            ret.collectTime = this.collectTime;
            ret.geoAdjustFlag = this.geoAdjustFlag;
            ret.fullAttrFlag = this.fullAttrFlag;
            ret.truckFlag = this.truckFlag;
            ret.level = this.level;
            ret.indoor = this.indoor;
            ret.vipFlag = this.vipFlag;
            ret.freshnessVefication = this.freshnessVefication;
            ret.status = this.status;
            this._attrToDBC();
            ret.names = [];
            var i = void 0,
                len = void 0;
            if (this.names) {
                for (i = 0, len = this.names.length; i < len; i++) {
                    ret.names.push(this.names[i].getIntegrate());
                }
            }
            ret.addresses = [];
            if (this.addresses) {
                for (i = 0, len = this.addresses.length; i < len; i++) {
                    ret.addresses.push(this.addresses[i].getIntegrate());
                }
            }
            ret.contacts = [];
            if (this.contacts) {
                for (i = 0, len = this.contacts.length; i < len; i++) {
                    ret.contacts.push(this.contacts[i].getIntegrate());
                }
            }
            ret.photos = [];
            if (this.photos) {
                for (i = 0, len = this.photos.length; i < len; i++) {
                    ret.photos.push(this.photos[i].getIntegrate());
                }
            }
            ret.children = [];
            if (this.children) {
                for (i = 0, len = this.children.length; i < len; i++) {
                    ret.children.push(this.children[i].getIntegrate());
                }
            }
            ret.parents = [];
            if (this.parents) {
                for (i = 0, len = this.parents.length; i < len; i++) {
                    ret.parents.push(this.parents[i].getIntegrate());
                }
            }
            ret.buildings = [];
            if (this.buildings) {
                for (i = 0, len = this.buildings.length; i < len; i++) {
                    ret.buildings.push(this.buildings[i].getIntegrate());
                }
            }
            ret.businesstimes = [];
            if (this.businesstimes) {
                for (i = 0, len = this.businesstimes.length; i < len; i++) {
                    ret.businesstimes.push(this.businesstimes[i].getIntegrate());
                }
            }
            ret.carrentals = [];
            if (this.carrentals) {
                for (i = 0, len = this.carrentals.length; i < len; i++) {
                    ret.carrentals.push(this.carrentals[i].getIntegrate());
                }
            }
            ret.details = [];
            if (this.details) {
                for (i = 0, len = this.details.length; i < len; i++) {
                    ret.details.push(this.details[i].getIntegrate());
                }
            }
            ret.gasstations = [];
            if (this.kindCode == '230215' && this.oilstations) {
                // 加油站
                for (i = 0, len = this.oilstations.length; i < len; i++) {
                    ret.gasstations.push(this.oilstations[i].getIntegrate());
                }
            } else if (this.kindCode == '230216' && this.gasstations) {
                // 加气站
                for (i = 0, len = this.gasstations.length; i < len; i++) {
                    ret.gasstations.push(this.gasstations[i].getIntegrate());
                }
            }
            ret.hotels = [];
            if (this.hotels) {
                for (i = 0, len = this.hotels.length; i < len; i++) {
                    ret.hotels.push(this.hotels[i].getIntegrate());
                }
            }
            ret.restaurants = [];
            if (this.restaurants) {
                for (i = 0, len = this.restaurants.length; i < len; i++) {
                    ret.restaurants.push(this.restaurants[i].getIntegrate());
                }
            }
            ret.parkings = [];
            if (this.parkings) {
                for (i = 0, len = this.parkings.length; i < len; i++) {
                    ret.parkings.push(this.parkings[i].getIntegrate());
                }
            }
            ret.chargingstations = [];
            if (this.chargingstations) {
                for (i = 0, len = this.chargingstations.length; i < len; i++) {
                    ret.chargingstations.push(this.chargingstations[i].getIntegrate());
                }
            }
            ret.chargingplots = [];
            if (this.chargingplots) {
                for (i = 0, len = this.chargingplots.length; i < len; i++) {
                    ret.chargingplots.push(this.chargingplots[i].getIntegrate());
                }
            }
            ret.samePois = [];
            if (this.samePois) {
                for (i = 0, len = this.samePois.length; i < len; i++) {
                    ret.samePois.push(this.samePois[i].getIntegrate());
                }
            }
            ret.samepoiParts = [];
            if (this.samepoiParts) {
                for (i = 0, len = this.samepoiParts.length; i < len; i++) {
                    ret.samepoiParts.push(this.samepoiParts[i].getIntegrate());
                }
            }
            // ret.geoLiveType = this.geoLiveType;
            return ret;
        }
        /**
         * 部分属性转全角
         * @return {undefined}
         */

    }, {
        key: '_attrToDBC',
        value: function _attrToDBC() {
            if (this.name.name) {
                this.name.name = FM.Util.ToDBC(this.name.name);
            }
            if (this.address.fullname) {
                this.address.fullname = FM.Util.ToDBC(this.address.fullname);
            }
        }
        /**
         * 判断对象为空或者属性的值都是false
         * @param  {object} obj 对象
         * @return {boolean} flag
         */

    }, {
        key: '_emptyOrAllFalse',
        value: function _emptyOrAllFalse(obj) {
            var flag = true;
            if (FM.Util.isEmptyObject(obj)) {
                return flag;
            }
            for (var o in obj) {
                if (obj.hasOwnProperty(o)) {
                    if (obj[o]) {
                        flag = false;
                        break;
                    }
                }
            }
            return flag;
        }
        /**
         * 重写的基类的方法
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {
            if (this.address.fullname && this.address.fullname.length == 1) {
                this._pushError('name', '地址的长度不能为1！');
            }
            if (['230210', '230213', '230214'].indexOf(this.kindCode) > -1) {
                // 停车场、换乘停车场、货车专用停车场
                if (this.parkings[0].totalNum == undefined) {
                    this._pushError('totalNum', '车位数有误，请检查！');
                }
                if (!this.parkings[0].parkingType) {
                    // 值域 1-4
                    this._pushError('parkingType', '深度信息"类型"为必填项!');
                }
            }
            if (this.kindCode === '230215') {
                // 加油站 IxPoiOilstation
                if (this._emptyOrAllFalse(this.oilstations[0].oilType) && this._emptyOrAllFalse(this.oilstations[0].egType) && this._emptyOrAllFalse(this.oilstations[0].mgType) && this._emptyOrAllFalse(this.oilstations[0].fuelType)) {
                    this._pushError('type', '"汽油、甲醇汽油、乙醇汽油、燃料类型"至少填一项!');
                }
            }
            if (this.kindCode === '230216' && this.options.region === 'ml') {
                // 加气站
                if (this._emptyOrAllFalse(this.gasstations[0].fuelType)) {
                    this._pushError('type', '"燃料类型"为必填项!');
                }
            }
            if (this.kindCode === '230218') {
                // 充电站
                if (!this.chargingstations[0].chargingType) {
                    this.chargingstations[0].chargingType = 3; // 特殊需求，保存时如果充电站类型字段没有赋值，则默认赋值3
                }
            }
            if (this.kindCode === '230227') {
                // 充电桩
                if (this.chargingplots.length === 2 && this.chargingplots[0].acdc == this.chargingplots[1].acdc) {
                    this._pushError('acdc', '两条深度信息的电流类型相同!');
                }
            }
            if (['180104', '180106', '180101', '180102', '180111'].indexOf(this.kindCode) > -1) {
                if (this._emptyOrAllFalse(this.sportsVenue)) {
                    this._pushError('type', '深度信息"场馆类型"为必填项!');
                }
            } else {
                this.sportsVenue = {};
            }

            for (var i = this.carrentals.length - 1; i >= 0; i--) {
                if (this.carrentals[i].address.length === 0) {
                    this._pushError('address', '地址描述字段不能为空！');
                    break;
                }
            }
        }
        /**
         * 清空深度信息
         * @return {undefined}
         */

    }, {
        key: '_clearDeepInfo',
        value: function _clearDeepInfo() {
            var kindCode = this.kindCode;
            var data = this.kindFormat[kindCode];
            if (data) {
                switch (data.extend) {
                    case 1:
                        // 停车场
                        this.gasstations = [];
                        this.oilstations = [];
                        this.hotels = [];
                        this.restaurants = [];
                        this.chargingstations = [];
                        this.chargingplots = [];
                        break;
                    case 2:
                        // 加油站
                        this.parkings = [];
                        this.hotels = [];
                        this.restaurants = [];
                        this.chargingstations = [];
                        this.chargingplots = [];
                        this.gasstations = [];
                        break;
                    case 3:
                        // 充电站
                        this.parkings = [];
                        this.gasstations = [];
                        this.oilstations = [];
                        this.hotels = [];
                        this.restaurants = [];
                        this.chargingplots = [];
                        break;
                    case 4:
                        // 宾馆酒店
                        this.parkings = [];
                        this.gasstations = [];
                        this.oilstations = [];
                        this.restaurants = [];
                        this.chargingstations = [];
                        this.chargingplots = [];
                        break;
                    case 5:
                        // 运动场馆 由于运动场馆深度信息没有子表，使用的是poi的label字段，所以需要和default一样的处理方式
                        this.parkings = [];
                        this.gasstations = [];
                        this.oilstations = [];
                        this.hotels = [];
                        this.restaurants = [];
                        this.chargingstations = [];
                        this.chargingplots = [];
                        break;
                    case 6:
                        // 餐馆
                        this.parkings = [];
                        this.gasstations = [];
                        this.oilstations = [];
                        this.hotels = [];
                        this.chargingstations = [];
                        this.chargingplots = [];
                        break;
                    case 7:
                        // 加气站
                        this.parkings = [];
                        this.hotels = [];
                        this.restaurants = [];
                        this.chargingstations = [];
                        this.chargingplots = [];
                        this.oilstations = [];
                        break;
                    case 9:
                        // 充电桩
                        this.parkings = [];
                        this.gasstations = [];
                        this.oilstations = [];
                        this.hotels = [];
                        this.restaurants = [];
                        this.chargingstations = [];
                        break;
                    default:
                        this.parkings = [];
                        this.gasstations = [];
                        this.oilstations = [];
                        this.hotels = [];
                        this.restaurants = [];
                        this.chargingstations = [];
                        this.chargingplots = [];
                        break;
                }
            }

            // 需求--当分类为加油站，并且open14h为1时，需要将gasstations中的openHour字段赋值为“00:00-24:00”
            if (this.kindCode == '230215' && this.open24h == 1) {
                if (this.oilstations && this.oilstations.length > 0) {
                    this.oilstations[0].openHour = FM.Util.ToDBC('00:00-24:00');
                }
            }
        }
        /**
         * 格式化名称和地址
         * @return {undefined}
         */

    }, {
        key: '_formatNameAndAddress',
        value: function _formatNameAndAddress() {
            // 21CHI为空时,增加名称的控制
            var flag = true;
            var i = void 0,
                len = void 0;
            if (!FM.Util.isEmptyObject(this.name)) {
                for (i = 0, len = this.names.length; i < len; i++) {
                    if (this.name.langCode == this.names[i].langCode && this.name.nameClass == this.names[i].nameClass && this.name.nameType == this.names[i].nameType) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    this.names.unshift(this.name);
                }
            }
            // 增加对CHI地址为空的控制
            flag = true;
            if (!FM.Util.isEmptyObject(this.name)) {
                var addIndex = -1;
                for (i = 0; i < this.addresses.length; i++) {
                    if (this.address.langCode == this.addresses[i].langCode) {
                        flag = false;
                        addIndex = i;
                        break;
                    }
                }
                if (flag) {
                    if (this.address.fullname) {
                        // 当fullname不为空时在增加地址对象
                        this.addresses.unshift(this.address);
                    }
                } else if (!this.address.fullname) {
                    // 当从编辑页面把fullname字段删除后，需要清除address对象
                    this.addresses.splice(addIndex, 1);
                }
            }
        }
        /**
         * 用编辑的手机和座机替换原有的手机和座机
         * @return {undefined}
         */

    }, {
        key: '_formatContacts',
        value: function _formatContacts() {
            if (this.contactParts) {
                for (var i = this.contacts.length - 1; i >= 0; i--) {
                    if (this.contacts[i].contactType == 1 || this.contacts[i].contactType == 2) {
                        this.contacts.splice(i, 1);
                    }
                }
                for (var j = 0; j < this.contactParts.length; j++) {
                    if (this.contactParts[j].contact) {
                        this.contacts.push(this.contactParts[j]);
                    }
                }
            }
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            // 这样写的原因是为了返回的UI对象
            return new FM.dataApi.IxPoiSnapShot(this.getIntegrate());
        }
    }]);

    return IxPoi;
}(_Feature3.default);

exports.default = IxPoi;

/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 地址表 的前端数据模型
 */
var IxPoiAddress = function (_DataModel) {
    _inherits(IxPoiAddress, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiAddress(data, options) {
        _classCallCheck(this, IxPoiAddress);

        var _this = _possibleConstructorReturn(this, (IxPoiAddress.__proto__ || Object.getPrototypeOf(IxPoiAddress)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_ADDRESS';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiAddress, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid;
            // this.nameId = data['nameId'] || 0;
            this.poiPid = data.poiPid || 0;
            this.nameGroupid = data.nameGroupid || 1;
            this.langCode = data.langCode;
            this.srcFlag = data.srcFlag;
            this.fullname = data.fullname;
            this.roadname = data.roadname;
            this.addrname = data.addrname;
            this.province = data.province;
            this.city = data.city;
            this.county = data.county;
            this.town = data.town;
            this.place = data.place;
            this.street = data.street;
            this.landmark = data.landmark;
            this.prefix = data.prefix;
            this.housenum = data.housenum;
            this.type = data.type;
            this.subnum = data.subnum;
            this.surfix = data.surfix;
            this.estab = data.estab;
            this.building = data.building;
            this.floor = data.floor;
            this.unit = data.unit;
            this.room = data.room;
            this.addons = data.addons;
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.pid = this.pid;
            ret.audataId = this.audataId;
            // ret['nameId'] = this.nameId;
            ret.nameGroupid = this.nameGroupid;
            ret.poiPid = this.poiPid;
            ret.langCode = this.langCode;
            ret.srcFlag = this.srcFlag;
            ret.fullname = this.fullname;
            ret.roadname = this.roadname;
            ret.addrname = this.addrname;
            ret.province = this.province;
            ret.city = this.city;
            ret.county = this.county;
            ret.town = this.town;
            ret.place = this.place;
            ret.street = this.street;
            ret.landmark = this.landmark;
            ret.prefix = this.prefix;
            ret.housenum = this.housenum;
            ret.type = this.type;
            ret.subnum = this.subnum;
            ret.surfix = this.surfix;
            ret.estab = this.estab;
            ret.building = this.building;
            ret.floor = this.floor;
            ret.unit = this.unit;
            ret.room = this.room;
            ret.addons = this.addons;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiAddress;
}(_DataModel3.default);

exports.default = IxPoiAddress;

/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 深度信息(建筑物和租户的楼层信息) 的前端数据模型
 */
var IxPoiBuilding = function (_DataModel) {
    _inherits(IxPoiBuilding, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiBuilding(data, options) {
        _classCallCheck(this, IxPoiBuilding);

        var _this = _possibleConstructorReturn(this, (IxPoiBuilding.__proto__ || Object.getPrototypeOf(IxPoiBuilding)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_BUILDING';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiBuilding, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.poiPid = data.poiPid || 0;
            this.floorUsed = data.floorUsed;
            this.floorEmpty = data.floorEmpty;
            this.memo = data.memo;
            this.rowId = data.rowId;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.poiPid = this.poiPid;
            ret.floorUsed = this.floorUsed;
            ret.floorEmpty = this.floorEmpty;
            ret.memo = this.memo;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiBuilding;
}(_DataModel3.default);

exports.default = IxPoiBuilding;

/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 深度信息(开放或营业时间) 的前端数据模型
 */
var IxPoiBusinesstime = function (_DataModel) {
    _inherits(IxPoiBusinesstime, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiBusinesstime(data, options) {
        _classCallCheck(this, IxPoiBusinesstime);

        var _this = _possibleConstructorReturn(this, (IxPoiBusinesstime.__proto__ || Object.getPrototypeOf(IxPoiBusinesstime)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_BUSINESSTIME';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiBusinesstime, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid || 0;
            this.monSrt = data.monSrt || '';
            this.monEnd = data.monEnd || '';
            this.weekInYearSrt = data.weekInYearSrt || '';
            this.weekInYearEnd = data.weekInYearEnd || '';
            this.weekInMonthSrt = data.weekInMonthSrt || '';
            this.weekInMonthEnd = data.weekInMonthEnd || '';
            this.validWeek = data.validWeek || '';
            this.daySrt = data.daySrt || '';
            this.dayEnd = data.dayEnd || '';
            this.timeSrt = data.timeSrt || '';
            this.timeDur = data.timeDur || '';
            this.reserved = data.reserved || '';
            this.memo = data.memo || '';
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.pid = this.pid;
            ret.monSrt = this.monSrt;
            ret.monEnd = this.monEnd;
            ret.weekInYearSrt = this.weekInYearSrt;
            ret.weekInYearEnd = this.weekInYearEnd;
            ret.weekInMonthSrt = this.weekInMonthSrt;
            ret.weekInMonthEnd = this.weekInMonthEnd;
            ret.validWeek = this.validWeek;
            ret.daySrt = this.daySrt;
            ret.dayEnd = this.dayEnd;
            ret.timeSrt = this.timeSrt;
            ret.timeDur = this.timeDur;
            ret.reserved = this.reserved;
            ret.memo = this.memo;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiBusinesstime;
}(_DataModel3.default);

exports.default = IxPoiBusinesstime;

/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 深度信息(汽车租赁) 的前端数据模型
 */
var IxPoiCarRental = function (_DataModel) {
    _inherits(IxPoiCarRental, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiCarRental(data, options) {
        _classCallCheck(this, IxPoiCarRental);

        var _this = _possibleConstructorReturn(this, (IxPoiCarRental.__proto__ || Object.getPrototypeOf(IxPoiCarRental)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_CARRENTAL';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiCarRental, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            // this._flag_ = data._flag_ || false; // 深度信息特殊字段,用于控制深度信息的保存
            this.poiPid = data.poiPid || 0;
            this.openHour = data.openHour || '';
            this.address = data.address || '';
            this.howToGo = data.howToGo || '';
            this.phone400 = data.phone400 || '';
            this.webSite = data.webSite || '';
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            // ret._flag_ = this._flag_;
            ret.poiPid = this.poiPid;
            ret.openHour = this.openHour;
            ret.address = this.address;
            ret.howToGo = this.howToGo;
            ret.phone400 = this.phone400;
            ret.webSite = this.webSite;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiCarRental;
}(_DataModel3.default);

exports.default = IxPoiCarRental;

/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 深度信息(充电桩类) 的前端数据模型
 */
var IxPoiChargingplot = function (_DataModel) {
    _inherits(IxPoiChargingplot, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiChargingplot(data, options) {
        _classCallCheck(this, IxPoiChargingplot);

        var _this = _possibleConstructorReturn(this, (IxPoiChargingplot.__proto__ || Object.getPrototypeOf(IxPoiChargingplot)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_CHARGINGPLOT';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiChargingplot, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            var openTypeArr = void 0,
                plugTypeArr = void 0,
                i = void 0;
            this.poiPid = data.poiPid || 0;
            this.groupId = data.groupId || 0; // 服务在批处理时对于新增的数据groupId等于1时会存在问题，所以改成0
            this.count = data.count || 1;
            this.acdc = data.acdc || 0;
            plugTypeArr = data.plugType ? data.plugType.split('|') : ['9'];
            this.plugType = {};
            for (i = 0; i < plugTypeArr.length; i++) {
                this.plugType[plugTypeArr[i]] = true;
            }
            this.power = data.power || '';
            this.voltage = data.voltage || '';
            this.current = data.current || '';
            this.mode = data.mode || 0;
            this.memo = data.memo;
            this.plugNum = data.plugNum || 1;
            this.prices = data.prices || '';
            openTypeArr = data.openType ? data.openType.split('|') : ['1'];
            this.openType = {};
            this.selectedChain = '';
            this.isBrandOpen = false;
            for (i = 0; i < openTypeArr.length; i++) {
                if (openTypeArr[i].length === 4) {
                    // 品牌的编码长度是4位
                    this.selectedChain = openTypeArr[i];
                    this.isBrandOpen = true;
                } else {
                    this.openType[openTypeArr[i]] = true;
                }
            }
            this.availableState = data.availableState || 0;
            this.manufacturer = data.manufacturer || '';
            this.factoryNum = data.factoryNum || '';
            this.plotNum = data.plotNum || '';
            this.productNum = data.productNum || '';
            this.parkingNum = data.parkingNum || '';
            this.floor = data.floor || 1;
            this.locationType = data.locationType || 0;
            var paymentArr = data.payment ? data.payment.split('|') : ['4'];
            this.payment = {};

            for (i = 0; i < paymentArr.length; i++) {
                this.payment[paymentArr[i]] = true;
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            var key = void 0;
            this.toCDB(); // 部分属性转半角
            ret.groupId = this.groupId;
            ret.poiPid = this.poiPid;
            ret.count = this.count;
            ret.acdc = parseInt(this.acdc, 10);
            var plugTypeArr = [];
            for (key in this.plugType) {
                if (this.plugType[key] == true) {
                    plugTypeArr.push(key);
                }
            }
            ret.plugType = plugTypeArr.join('|');
            ret.power = this.power;
            ret.voltage = this.voltage;
            ret.current = this.current;
            ret.mode = parseInt(this.mode, 10);
            ret.memo = this.memo;
            ret.plugNum = this.plugNum;
            ret.prices = this.prices;
            var openTypeArr = [];
            for (key in this.openType) {
                if (this.openType[key] === true) {
                    openTypeArr.push(key);
                }
            }
            if (this.isBrandOpen && this.selectedChain) {
                openTypeArr.push(this.selectedChain);
            }
            ret.openType = openTypeArr.join('|');
            if (ret.openType === '') {
                ret.openType = '1';
            }
            ret.availableState = parseInt(this.availableState, 10);
            ret.manufacturer = this.manufacturer;
            ret.factoryNum = this.factoryNum;
            ret.plotNum = this.plotNum;

            ret.productNum = this.productNum;
            ret.parkingNum = this.parkingNum;
            ret.floor = this.floor || 1;
            ret.locationType = parseInt(this.locationType, 10);
            var paymentArr = [];
            for (key in this.payment) {
                if (this.payment[key] == true) {
                    paymentArr.push(key);
                }
            }
            ret.payment = paymentArr.join('|');
            ret.rowId = this.rowId;
            return ret;
        }
        /**
         * 全角转半角
         * @return {undefined}
         */

    }, {
        key: 'toCDB',
        value: function toCDB() {
            if (this.power) {
                this.power = FM.Util.ToCDB(this.power);
            }
            if (this.voltage) {
                this.voltage = FM.Util.ToCDB(this.voltage);
            }
            if (this.current) {
                this.current = FM.Util.ToCDB(this.current);
            }
            if (this.prices) {
                this.prices = FM.Util.ToCDB(this.prices);
            }
            if (this.manufacturer) {
                this.manufacturer = FM.Util.ToCDB(this.manufacturer);
            }
            if (this.factoryNum) {
                this.factoryNum = FM.Util.ToCDB(this.factoryNum);
            }
            if (this.plotNum) {
                this.plotNum = FM.Util.ToCDB(this.plotNum);
            }
            if (this.productNum) {
                this.productNum = FM.Util.ToCDB(this.productNum);
            }
            if (this.parkingNum) {
                this.parkingNum = FM.Util.ToCDB(this.parkingNum);
            }
        }
    }]);

    return IxPoiChargingplot;
}(_DataModel3.default);

exports.default = IxPoiChargingplot;

/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 深度信息(充电站类) 的前端数据模型
 */
var IxPoiChargingstation = function (_DataModel) {
    _inherits(IxPoiChargingstation, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiChargingstation(data, options) {
        _classCallCheck(this, IxPoiChargingstation);

        var _this = _possibleConstructorReturn(this, (IxPoiChargingstation.__proto__ || Object.getPrototypeOf(IxPoiChargingstation)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_CHARGINGSTATION';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiChargingstation, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            // this.chargingId = data['chargingId'] || 0;
            this.pid = data.pid || 0;
            this.poiPid = data.poiPid || 0;
            this.audataId = data.audataId;
            this.chargingType = data.chargingType || 0; // 特殊需求，如果没有值，界面默认显示请选择
            this.changeBrands = data.changeBrands ? data.changeBrands.split('|') : [];
            var changeOpenTypeArr = data.changeOpenType ? data.changeOpenType.split('|') : [1];
            this.changeOpenType = {};
            for (var i = 0; i < changeOpenTypeArr.length; i++) {
                this.changeOpenType[changeOpenTypeArr[i]] = true;
            }
            this.chargingNum = data.chargingNum || 0;
            this.exchangeNum = data.exchangeNum;
            this.payment = data.payment;
            this.serviceProv = data.serviceProv || '0';
            this.memo = data.memo;
            this.photoName = data.photoName;
            this.openHour = data.openHour;
            this.parkingFees = data.parkingFees || 0;
            this.parkingInfo = data.parkingInfo;
            this.availableState = data.availableState || 0;
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.pid = this.pid;
            ret.poiPid = this.poiPid;
            ret.audataId = this.audataId;
            ret.chargingType = this.chargingType;
            ret.changeBrands = this.changeBrands.join('|');
            var checkedChangeOpenTypeArr = [];
            for (var key in this.changeOpenType) {
                if (this.changeOpenType[key] == true) {
                    checkedChangeOpenTypeArr.push(key);
                }
            }
            ret.changeOpenType = checkedChangeOpenTypeArr.join('|');
            ret.chargingNum = this.chargingNum;
            ret.exchangeNum = this.exchangeNum;
            ret.payment = this.payment;
            ret.serviceProv = this.serviceProv;
            ret.memo = this.memo;
            ret.photoName = this.photoName;
            ret.openHour = this.openHour;
            ret.parkingFees = parseInt(this.parkingFees, 10);
            ret.parkingInfo = this.parkingInfo;
            ret.availableState = this.availableState;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiChargingstation;
}(_DataModel3.default);

exports.default = IxPoiChargingstation;

/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 父子关系 的前端数据模型
 */
var IxPoiChildren = function (_DataModel) {
    _inherits(IxPoiChildren, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiChildren(data, options) {
        _classCallCheck(this, IxPoiChildren);

        var _this = _possibleConstructorReturn(this, (IxPoiChildren.__proto__ || Object.getPrototypeOf(IxPoiChildren)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_CHILDREN';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiChildren, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.groupId = data.groupId;
            this.childPoiPid = data.childPoiPid;
            this.relationType = data.relationType || 0;
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.groupId = this.groupId;
            ret.childPoiPid = this.childPoiPid;
            ret.relationType = this.relationType;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiChildren;
}(_DataModel3.default);

exports.default = IxPoiChildren;

/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 联系方式 的前端数据模型
 */
var IxPoiContact = function (_DataModel) {
    _inherits(IxPoiContact, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiContact(data, options) {
        _classCallCheck(this, IxPoiContact);

        var _this = _possibleConstructorReturn(this, (IxPoiContact.__proto__ || Object.getPrototypeOf(IxPoiContact)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_CONTACT';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiContact, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.poiPid = data.poiPid || 0;
            this.contactType = data.contactType || 1;
            this.contact = data.contact || null;
            this.contactDepart = data.contactDepart || 0;
            this.priority = data.priority || 1;
            this.code = data.code || '';
            if ((this.contactType == 1 || this.contactType == 11) && this.contact && this.contact.indexOf('-') > -1) {
                var tmep = this.contact.split('-');
                this.code = tmep[0];
                this.contact = tmep[1];
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.contactType = this.contactType;
            ret.contact = this.contact;
            ret.contactDepart = this.contactDepart;
            ret.priority = this.priority;
            if (this.contactType == 1 || this.contactType == 11) {
                ret.contact = this.code + '-' + this.contact;
            }
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiContact;
}(_DataModel3.default);

exports.default = IxPoiContact;

/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 深度信息(开放或营业时间) 的前端数据模型
 */
var IxPoiDetail = function (_DataModel) {
    _inherits(IxPoiDetail, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiDetail(data, options) {
        _classCallCheck(this, IxPoiDetail);

        var _this = _possibleConstructorReturn(this, (IxPoiDetail.__proto__ || Object.getPrototypeOf(IxPoiDetail)).call(this, data, options));

        _this.dataModelType = 'IX_POI_DETAIL';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiDetail, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid || 0;
            this.webSite = data.webSite || '';

            // 通用传真电话显示从fax中获取，fax中传真电话格式为"010-12121212|010-232323"
            this.fax = data.fax || '';
            var tempArr = [];
            if (this.fax) {
                tempArr = this.fax.split('|');
            }
            this.faxArr = [];
            if (tempArr.length) {
                for (var i = 0; i < tempArr.length; i++) {
                    var temp = tempArr[i].split('-');
                    this.faxArr.push({
                        code: temp[0],
                        contact: temp[1]
                    });
                }
            }

            this.starHotel = data.starHotel || '';
            this.briefDesc = data.briefDesc || '';
            this.adverFlag = data.adverFlag || 0;
            this.photoName = data.photoName || '';
            this.reserved = data.reserved || '';
            this.memo = data.memo || '';
            this.hwEntryexit = data.hwEntryexit || 0;
            this.paycard = data.paycard || 0;
            this.cardtype = [];
            if (data.cardtype !== undefined) {
                var cardtype = data.cardtype.split('|');
                for (var j = 0; j < cardtype.length; j++) {
                    this.cardtype.push(cardtype[j]);
                }
            }
            this.hospitalClass = data.hospitalClass || 0;
            this.services = data.services || 1;
            if (typeof data.michelinStar !== 'undefined') {
                this.michelinStar = data.michelinStar;
            } else {
                this.michelinStar = 9;
            }
            if (typeof data.establishment !== 'undefined') {
                this.establishment = data.establishment;
            } else {
                this.establishment = 99;
            }
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.pid = this.pid;
            ret.webSite = this.webSite;

            ret.fax = '';
            var temArr = [];
            if (this.faxArr.length) {
                for (var j = 0; j < this.faxArr.length; j++) {
                    temArr.push(this.faxArr[j].code + '-' + this.faxArr[j].contact);
                }
            }
            if (temArr.length) {
                ret.fax = temArr.join('|');
            }

            ret.starHotel = this.starHotel;
            ret.briefDesc = this.briefDesc;
            ret.adverFlag = this.adverFlag;
            ret.photoName = this.photoName;
            ret.reserved = this.reserved;
            ret.memo = this.memo;
            ret.hwEntryexit = this.hwEntryexit;
            ret.paycard = this.paycard;
            ret.cardtype = [];
            if (this.cardtype !== undefined) {
                for (var p = 0; p < this.cardtype.length; p++) {
                    ret.cardtype.push(this.cardtype[p]);
                }
            }
            ret.hospitalClass = this.hospitalClass;
            ret.services = this.services;
            ret.michelinStar = this.michelinStar;
            ret.establishment = this.establishment;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiDetail;
}(_DataModel3.default);

exports.default = IxPoiDetail;

/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 深度信息(加油站类) 的前端数据模型
 */
var IxPoiGasstation = function (_DataModel) {
    _inherits(IxPoiGasstation, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiGasstation(data, options) {
        _classCallCheck(this, IxPoiGasstation);

        var _this = _possibleConstructorReturn(this, (IxPoiGasstation.__proto__ || Object.getPrototypeOf(IxPoiGasstation)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_GASSTATION';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiGasstation, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid || 0;
            // this._flag_ = data._flag_ || false; // 深度信息特殊字段,用于控制深度信息的保存
            this.poiPid = data.poiPid;
            this.serviceProv = data.serviceProv;
            var fuelTypeArr = data.fuelType ? data.fuelType.split('|') : [];
            this.fuelType = {};
            for (var i = 0; i < fuelTypeArr.length; i++) {
                this.fuelType[fuelTypeArr[i]] = true;
            }
            var oilTypeArr = data.oilType ? data.oilType.split('|') : [];
            this.oilType = {};
            for (var j = 0; j < oilTypeArr.length; j++) {
                this.oilType[oilTypeArr[j]] = true;
            }
            var egTypeArr = data.egType ? data.egType.split('|') : [];
            this.egType = {};
            for (var h = 0; h < egTypeArr.length; h++) {
                this.egType[egTypeArr[h]] = true;
            }
            var mgTypeArr = data.mgType ? data.mgType.split('|') : [];
            this.mgType = {};
            for (var k = 0; k < mgTypeArr.length; k++) {
                this.mgType[mgTypeArr[k]] = true;
            }

            var paymentArr = data.payment ? data.payment.split('|') : [];
            this.payment = {};
            for (var l = 0; l < paymentArr.length; l++) {
                this.payment[paymentArr[l]] = true;
            }
            var serviceArr = data.service ? data.service.split('|') : [];
            this.service = {};
            for (var p = 0; p < serviceArr.length; p++) {
                this.service[serviceArr[p]] = true;
            }
            this.memo = data.memo;
            this.openHour = data.openHour;
            this.photoName = data.photoName;
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            // ret._flag_ = this._flag_;
            ret.pid = this.pid;
            ret.poiPid = this.poiPid;
            ret.serviceProv = this.serviceProv;
            var checkedFuelTypeArr = [];
            for (var k in this.fuelType) {
                if (this.fuelType[k]) {
                    checkedFuelTypeArr.push(k);
                }
            }
            ret.fuelType = checkedFuelTypeArr.join('|');
            var checkedOilTypeArr = [];
            for (var i in this.oilType) {
                if (this.oilType[i]) {
                    checkedOilTypeArr.push(i);
                }
            }
            ret.oilType = checkedOilTypeArr.join('|');
            var checkedEgTypeArr = [];
            for (var j in this.egType) {
                if (this.egType[j]) {
                    checkedEgTypeArr.push(j);
                }
            }
            ret.egType = checkedEgTypeArr.join('|');
            var checkedMgTypeArr = [];
            for (var o in this.mgType) {
                if (this.mgType[o]) {
                    checkedMgTypeArr.push(o);
                }
            }
            ret.mgType = checkedMgTypeArr.join('|');
            var checkedPaymentArr = [];
            for (var p in this.payment) {
                if (this.payment[p]) {
                    checkedPaymentArr.push(p);
                }
            }
            ret.payment = checkedPaymentArr.join('|');
            var checkedServiceArr = [];
            for (var r in this.service) {
                if (this.service[r]) {
                    checkedServiceArr.push(r);
                }
            }
            ret.service = checkedServiceArr.join('|');
            ret.memo = this.memo;
            ret.openHour = this.openHour;
            if (ret.openHour) {
                ret.openHour = FM.Util.ToDBC(ret.openHour);
            }
            ret.photoName = this.photoName;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiGasstation;
}(_DataModel3.default);

exports.default = IxPoiGasstation;

/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 深度信息(住宿酒店类) 的前端数据模型
 */
var IxPoiHotel = function (_DataModel) {
    _inherits(IxPoiHotel, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiHotel(data, options) {
        _classCallCheck(this, IxPoiHotel);

        var _this = _possibleConstructorReturn(this, (IxPoiHotel.__proto__ || Object.getPrototypeOf(IxPoiHotel)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_HOTEL';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiHotel, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid || 0;
            // this._flag_ = data._flag_ || false; // 深度信息特殊字段,用于控制深度信息的保存
            this.poiPid = data.poiPid || 0;
            this.creditCard = data.creditCard;

            this.rating = data.rating || 1;

            this.checkinTime = data.checkinTime || '14:00';
            this.checkoutTime = data.checkoutTime || '12:00';
            this.roomCount = data.roomCount || 0;
            this.roomType = data.roomType;
            this.roomPrice = data.roomPrice;
            this.breakfast = data.breakfast || 0;
            this.service = data.service;
            this.parking = data.parking || 0;
            this.longDescription = data.longDescription;
            this.longDescriptionEng = data.longDescriptionEng;
            this.openHour = data.openHour;
            this.openHourEng = data.openHourEng;
            this.telephone = data.telephone;
            this.address = data.address;
            this.city = data.city;
            this.photoName = data.photoName;
            this.travelguideFlag = data.travelguideFlag || 0;
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            // ret._flag_ = this._flag_;
            ret.pid = this.pid;
            // ret['hotelId'] = this.hotelId;
            ret.poiPid = this.poiPid;
            ret.creditCard = this.creditCard;
            ret.rating = parseInt(this.rating, 10);
            ret.checkinTime = this.checkinTime;
            ret.checkoutTime = this.checkoutTime;
            ret.roomCount = this.roomCount;
            ret.roomType = this.roomType;
            ret.roomPrice = this.roomPrice;
            ret.breakfast = this.breakfast;
            ret.service = this.service;
            ret.parking = this.parking;
            ret.longDescription = this.longDescription;
            ret.longDescriptionEng = this.longDescriptionEng;
            ret.openHour = this.openHour;
            ret.openHourEng = this.openHourEng;
            ret.telephone = this.telephone;
            ret.address = this.address;
            ret.city = this.city;
            ret.photoName = this.photoName;
            ret.travelguideFlag = this.travelguideFlag;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiHotel;
}(_DataModel3.default);

exports.default = IxPoiHotel;

/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 名称 的前端数据模型
 */
var IxPoiName = function (_DataModel) {
    _inherits(IxPoiName, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiName(data, options) {
        _classCallCheck(this, IxPoiName);

        var _this = _possibleConstructorReturn(this, (IxPoiName.__proto__ || Object.getPrototypeOf(IxPoiName)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_NAME';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiName, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            // this.nameId = data['nameId'] || 0;
            this.pid = data.pid || 0;
            this.poiPid = data.poiPid || 0;
            this.nameGroupid = data.nameGroupid || 1;
            this.langCode = data.langCode;
            this.nameClass = data.nameClass || 1;
            this.nameType = data.nameType || 1;
            this.name = data.name || '';
            this.shortInfo = this.name;
            if (this.name.length > 10) {
                this.shortInfo = this.name.substring(0, 10) + '...';
            }
            this.namePhonetic = data.namePhonetic || '';
            this.keywords = data.keywords || '';
            this.nidbPid = data.nidbPid || '';
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            // ret["nameId"] = this.nameId;
            ret.pid = this.pid;
            ret.poiPid = this.poiPid;
            ret.nameGroupid = this.nameGroupid;
            ret.langCode = this.langCode;
            ret.nameClass = this.nameClass;
            ret.nameType = this.nameType;
            ret.name = this.name;
            ret.namePhonetic = this.namePhonetic;
            ret.keywords = this.keywords;
            ret.nidbPid = this.nidbPid;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiName;
}(_DataModel3.default);

exports.default = IxPoiName;

/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 前端数据模型
 * 设计的数据模型中，加油站和加气站对应一个表（ixpoi_gasstaion）,此模型为前端增加的一个模型，用于区分加油站和加气站；
 */
var IxPoiOilstation = function (_DataModel) {
    _inherits(IxPoiOilstation, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiOilstation(data, options) {
        _classCallCheck(this, IxPoiOilstation);

        var _this = _possibleConstructorReturn(this, (IxPoiOilstation.__proto__ || Object.getPrototypeOf(IxPoiOilstation)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_OILSTATION';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiOilstation, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid || 0;
            // this._flag_ = data._flag_ || false; // 深度信息特殊字段,用于控制深度信息的保存
            this.poiPid = data.poiPid;
            this.serviceProv = data.serviceProv;
            var fuelTypeArr = data.fuelType ? data.fuelType.split('|') : [];
            this.fuelType = {};
            for (var i = 0; i < fuelTypeArr.length; i++) {
                this.fuelType[fuelTypeArr[i]] = true;
            }
            var oilTypeArr = data.oilType ? data.oilType.split('|') : [];
            this.oilType = {};
            for (var j = 0; j < oilTypeArr.length; j++) {
                this.oilType[oilTypeArr[j]] = true;
            }
            var egTypeArr = data.egType ? data.egType.split('|') : [];
            this.egType = {};
            for (var h = 0; h < egTypeArr.length; h++) {
                this.egType[egTypeArr[h]] = true;
            }
            var mgTypeArr = data.mgType ? data.mgType.split('|') : [];
            this.mgType = {};
            for (var k = 0; k < mgTypeArr.length; k++) {
                this.mgType[mgTypeArr[k]] = true;
            }

            var paymentArr = data.payment ? data.payment.split('|') : [];
            this.payment = {};
            for (var l = 0; l < paymentArr.length; l++) {
                this.payment[paymentArr[l]] = true;
            }
            var serviceArr = data.service ? data.service.split('|') : [];
            this.service = {};
            for (var p = 0; p < serviceArr.length; p++) {
                this.service[serviceArr[p]] = true;
            }
            this.memo = data.memo;
            this.openHour = data.openHour;
            this.photoName = data.photoName;
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            // ret._flag_ = this._flag_;
            ret.pid = this.pid;
            ret.poiPid = this.poiPid;
            ret.serviceProv = this.serviceProv;
            var checkedFuelTypeArr = [];
            for (var k in this.fuelType) {
                if (this.fuelType[k]) {
                    checkedFuelTypeArr.push(k);
                }
            }
            ret.fuelType = checkedFuelTypeArr.join('|');
            var checkedOilTypeArr = [];
            for (var i in this.oilType) {
                if (this.oilType[i]) {
                    checkedOilTypeArr.push(i);
                }
            }
            ret.oilType = checkedOilTypeArr.join('|');
            var checkedEgTypeArr = [];
            for (var j in this.egType) {
                if (this.egType[j]) {
                    checkedEgTypeArr.push(j);
                }
            }
            ret.egType = checkedEgTypeArr.join('|');
            var checkedMgTypeArr = [];
            for (var o in this.mgType) {
                if (this.mgType[o]) {
                    checkedMgTypeArr.push(o);
                }
            }
            ret.mgType = checkedMgTypeArr.join('|');
            var checkedPaymentArr = [];
            for (var p in this.payment) {
                if (this.payment[p]) {
                    checkedPaymentArr.push(p);
                }
            }
            ret.payment = checkedPaymentArr.join('|');
            var checkedServiceArr = [];
            for (var r in this.service) {
                if (this.service[r]) {
                    checkedServiceArr.push(r);
                }
            }
            ret.service = checkedServiceArr.join('|');
            ret.memo = this.memo;
            ret.openHour = this.openHour;
            if (ret.openHour) {
                ret.openHour = FM.Util.ToDBC(ret.openHour);
            }
            ret.photoName = this.photoName;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiOilstation;
}(_DataModel3.default);

exports.default = IxPoiOilstation;

/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 父子关系父 的前端数据模型
 */
var IxPoiParent = function (_DataModel) {
    _inherits(IxPoiParent, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiParent(data, options) {
        _classCallCheck(this, IxPoiParent);

        var _this = _possibleConstructorReturn(this, (IxPoiParent.__proto__ || Object.getPrototypeOf(IxPoiParent)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_PARENT';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiParent, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid;
            this.parentPoiPid = data.parentPoiPid;
            this.tenantFlag = data.tenantFlag || 0;
            this.memo = data.memo || null;
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.pid = this.pid;
            ret.parentPoiPid = this.parentPoiPid;
            ret.tenantFlag = this.tenantFlag;
            ret.memo = this.memo;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiParent;
}(_DataModel3.default);

exports.default = IxPoiParent;

/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 深度信息(停车场类) 的前端数据模型
 */
var IxPoiParking = function (_DataModel) {
    _inherits(IxPoiParking, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiParking(data, options) {
        _classCallCheck(this, IxPoiParking);

        var _this = _possibleConstructorReturn(this, (IxPoiParking.__proto__ || Object.getPrototypeOf(IxPoiParking)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_PARKING';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiParking, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            // this._flag_ = data._flag_ || false; // 深度信息特殊字段,用于控制深度信息的保存
            this.pid = data.pid || 0;
            this.parkingType = data.parkingType;
            var tollStdArr = data.tollStd ? data.tollStd.split('|') : [];
            this.tollStd = {};
            for (var i = 0; i < tollStdArr.length; i++) {
                this.tollStd[tollStdArr[i]] = true;
            }
            this.tollDes = data.tollDes;
            var tollWayArr = data.tollWay ? data.tollWay.split('|') : [];
            this.tollWay = {};
            for (var j = 0; j < tollWayArr.length; j++) {
                this.tollWay[tollWayArr[j]] = true;
            }

            var paymentArr = data.payment ? data.payment.split('|') : [];
            this.payment = {};
            for (var p = 0; p < paymentArr.length; p++) {
                this.payment[paymentArr[p]] = true;
            }

            var remarkArr = data.remark ? data.remark.split('|') : [];
            this.remark = {};
            for (var q = 0; q < remarkArr.length; q++) {
                this.remark[remarkArr[q]] = true;
            }
            this.source = data.source;
            this.openTiime = data.openTiime;
            this.totalNum = data.totalNum || 0;
            this.workTime = data.workTime;
            this.resHigh = data.resHigh || 0;
            this.resWidth = data.resWidth || 0;
            this.resWeigh = data.resWeigh || 0;
            this.certificate = data.certificate || 0;
            this.vehicle = data.vehicle || 0;
            this.photoName = data.photoName;
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            // ret._flag_ = this._flag_;
            ret.pid = this.pid;
            ret.parkingType = this.parkingType;
            var checkedTollStdArr = [];
            for (var k in this.tollStd) {
                if (this.tollStd[k] == true) {
                    checkedTollStdArr.push(k);
                }
            }
            ret.tollStd = checkedTollStdArr.join('|');
            ret.tollDes = this.tollDes;
            var checkedTollWayArr = [];
            for (var p in this.tollWay) {
                if (this.tollWay[p] == true) {
                    checkedTollWayArr.push(p);
                }
            }
            ret.tollWay = checkedTollWayArr.join('|');
            var checkedPayment = [];
            for (var q in this.payment) {
                if (this.payment[q]) {
                    checkedPayment.push(q);
                }
            }
            ret.payment = checkedPayment.join('|');

            var checkedRemark = [];
            for (var r in this.remark) {
                if (this.remark[r]) {
                    checkedRemark.push(r);
                }
            }
            ret.remark = checkedRemark.join('|');
            ret.source = this.source;
            ret.openTiime = this.openTiime;
            ret.totalNum = this.totalNum;
            ret.workTime = this.workTime;
            ret.resHigh = this.resHigh;
            ret.resWidth = this.resWidth;
            ret.resWeigh = this.resWeigh;
            ret.certificate = this.certificate;
            ret.vehicle = this.vehicle;
            ret.photoName = this.photoName;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiParking;
}(_DataModel3.default);

exports.default = IxPoiParking;

/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 与照片关系 的前端数据模型
 */
var IxPoiPhoto = function (_DataModel) {
    _inherits(IxPoiPhoto, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiPhoto(data, options) {
        _classCallCheck(this, IxPoiPhoto);

        var _this = _possibleConstructorReturn(this, (IxPoiPhoto.__proto__ || Object.getPrototypeOf(IxPoiPhoto)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_PHOTO';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiPhoto, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.poiPid = data.poiPid;
            this.photoId = data.photoId || 0;
            // this.pid = data['pid'] || ""; //由于此处的PID是一个有意义的字段，所以修改成了fccPid
            this.fccPid = data.fccPid || '';
            this.status = data.status || '';
            this.tag = data.tag || 1;
            this.memo = data.memo || '';
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.poiPid = this.poiPid;
            ret.fccPid = this.fccPid;
            ret.tag = this.tag;
            ret.photoId = this.photoId;
            ret.status = this.status;
            ret.memo = this.memo;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiPhoto;
}(_DataModel3.default);

exports.default = IxPoiPhoto;

/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 深度信息(餐饮类) 的前端数据模型
 */
var IxPoiRestaurant = function (_DataModel) {
    _inherits(IxPoiRestaurant, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiRestaurant(data, options) {
        _classCallCheck(this, IxPoiRestaurant);

        var _this = _possibleConstructorReturn(this, (IxPoiRestaurant.__proto__ || Object.getPrototypeOf(IxPoiRestaurant)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_RESTAURANT';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiRestaurant, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid || 0;
            this.poiPid = data.poiPid || 0;
            this.foodTypeArr = data.foodType ? data.foodType.split('|') : [];
            this.foodType1 = {};
            this.foodType2 = {};
            var creditCardArr = data.creditCard ? data.creditCard.split('|') : [];
            this.creditCard = {};
            for (var i = 0; i < creditCardArr.length; i++) {
                this.creditCard[creditCardArr[i]] = true;
            }
            this.avgCost = data.avgCost || 0;
            this.parking = data.parking || 0;
            this.longDescription = data.longDescription;
            this.longDescriptionEng = data.longDescriptionEng;
            this.openHour = data.openHour;
            this.openHourEng = data.openHourEng;
            this.telephone = data.telephone;
            this.address = data.address;
            this.city = data.city;
            this.photoName = data.photoName;
            this.travelguideFlag = data.travelguideFlag || 0;
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.pid = this.pid;
            ret.poiPid = this.poiPid;
            var foodType1Code = '';
            var foodType2Code = '';
            for (var k in this.foodType1) {
                if (this.foodType1[k] == true) {
                    foodType1Code = k;
                }
            }
            for (var p in this.foodType2) {
                if (this.foodType2[p] == true) {
                    foodType2Code = p;
                }
            }
            if (foodType2Code.length > 0 && foodType1Code.length > 0) {
                ret.foodType = foodType2Code + '|' + foodType1Code;
            } else if (foodType2Code.length > 0) {
                ret.foodType = foodType2Code;
            } else if (foodType1Code.length > 0) {
                ret.foodType = foodType1Code;
            } else {
                ret.foodType = this.foodTypeArr.join('|');
            }
            var checkedCreditCardArr = [];
            for (var q in this.creditCard) {
                if (this.creditCard[q] == true) {
                    checkedCreditCardArr.push(q);
                }
            }
            ret.creditCard = checkedCreditCardArr.join('|');
            ret.avgCost = this.avgCost;
            ret.parking = this.parking;
            ret.longDescription = this.longDescription;
            ret.longDescriptionEng = this.longDescriptionEng;
            ret.openHour = this.openHour;
            ret.openHourEng = this.openHourEng;
            ret.telephone = this.telephone;
            ret.address = this.address;
            ret.city = this.city;
            ret.photoName = this.photoName;
            ret.travelguideFlag = this.travelguideFlag;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxPoiRestaurant;
}(_DataModel3.default);

exports.default = IxPoiRestaurant;

/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 获取poi概要属性信息 的前端数据模型
 */
var IxPoiSnapShot = function (_Feature) {
    _inherits(IxPoiSnapShot, _Feature);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiSnapShot(data, options) {
        _classCallCheck(this, IxPoiSnapShot);

        var _this = _possibleConstructorReturn(this, (IxPoiSnapShot.__proto__ || Object.getPrototypeOf(IxPoiSnapShot)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_SNAP_SHOT';
        return _this;
    }

    /**
     * 将前端数据模型还原为接口数据模型
     * @return {Object} 接口数据模型
     */


    _createClass(IxPoiSnapShot, [{
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.fid = this.fid;
            ret.pid = this.pid;
            ret.lifecycle = this.lifecycle;
            ret.name = this.name;
            ret.kindCode = this.kindCode;
            ret.auditStatus = this.auditStatus;
            ret.checkResultNum = this.checkResultNum;
            ret.checkResults = this.checkResults;
            ret.rawFields = this.rawFields;
            ret.attachmentsPhoto = this.attachmentsPhoto;
            ret.attachmentsRemark = this.attachmentsRemark;
            ret.evaluateComment = this.evaluateComment;
            ret.location = this.location;
            ret.guide = this.guide;
            return ret;
        }
        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */

    }, {
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.fid = data.fid;
            this.pid = data.pid;
            this.lifecycle = data.lifecycle;
            this.name = data.name;
            this.kindCode = data.kindCode;
            this.auditStatus = data.auditStatus;
            this.checkResultNum = 0;
            if (data.checkResults && data.checkResults.length > 0) {
                this.checkResultNum = data.checkResults.length;
            }
            this.checkResults = data.checkResults;
            this.rawFields = data.rawFields;
            this.attachmentsPhoto = 0;
            this.attachmentsRemark = '无';
            if (data.attachments) {
                var photo = 0;
                for (var i = 0, len = data.attachments; i < len; i++) {
                    if (data.attachments[i].type == 1) {
                        photo++;
                    } else if (data.attachments[i].type == 4) {
                        this.attachmentsRemark = '有';
                    }
                }
                this.attachmentsPhoto = photo;
            }
            this.evaluateComment = 0;
            if (data.evaluateComment) {
                this.evaluateComment = data.evaluateComment.length;
            }
            this.location = data.location;
            this.guide = data.guide;
        }
    }]);

    return IxPoiSnapShot;
}(_Feature3.default);

exports.default = IxPoiSnapShot;

/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 同一关系 的前端数据模型
 */
var IxSamePoi = function (_DataModel) {
    _inherits(IxSamePoi, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxSamePoi(data, options) {
        _classCallCheck(this, IxSamePoi);

        var _this = _possibleConstructorReturn(this, (IxSamePoi.__proto__ || Object.getPrototypeOf(IxSamePoi)).call(this, data, options));

        _this.geoLiveType = 'IX_SAMEPOI';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxSamePoi, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid || 0;
            this.relationType = data.relationType || 1;
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.pid = this.pid;
            ret.relationType = this.relationType;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxSamePoi;
}(_DataModel3.default);

exports.default = IxSamePoi;

/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI 同一关系组成 的前端数据模型
 */
var IxSamePoiPart = function (_DataModel) {
    _inherits(IxSamePoiPart, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxSamePoiPart(data, options) {
        _classCallCheck(this, IxSamePoiPart);

        var _this = _possibleConstructorReturn(this, (IxSamePoiPart.__proto__ || Object.getPrototypeOf(IxSamePoiPart)).call(this, data, options));

        _this.geoLiveType = 'IX_SAMEPOI_PART';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxSamePoiPart, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.groupId = data.groupId || 0;
            this.poiPid = data.poiPid || 0;
            this.rowId = data.rowId || null;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.groupId = this.groupId;
            ret.poiPid = this.poiPid;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return IxSamePoiPart;
}(_DataModel3.default);

exports.default = IxSamePoiPart;

/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 搜索结果 的前端数据模型
 */
var IxSearchResult = function (_DataModel) {
    _inherits(IxSearchResult, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxSearchResult(data, options) {
        _classCallCheck(this, IxSearchResult);

        var _this = _possibleConstructorReturn(this, (IxSearchResult.__proto__ || Object.getPrototypeOf(IxSearchResult)).call(this, data, options));

        _this.geoLiveType = 'IX_SEARCH_RESULT';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxSearchResult, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid;
            this.name = data.name;
            this.type = data.type;
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.pid = this.pid;
            ret.name = this.name;
            ret.type = this.type;
            return ret;
        }
    }]);

    return IxSearchResult;
}(_DataModel3.default);

exports.default = IxSearchResult;

/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 点门牌的前端数据模型
 */
var IxPointAddress = function (_Feature) {
    _inherits(IxPointAddress, _Feature);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPointAddress(data, options) {
        _classCallCheck(this, IxPointAddress);

        var _this = _possibleConstructorReturn(this, (IxPointAddress.__proto__ || Object.getPrototypeOf(IxPointAddress)).call(this, data, options));

        _this.geoLiveType = 'IXPOINTADDRESS';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPointAddress, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid || 0;
            this.geometry = data.geometry;
            this.xGuide = data.xGuide || 0;
            this.yGuide = data.yGuide || 0;
            this.guideLinkPid = data.guideLinkPid || 0;
            this.locateLinkPid = data.locateLinkPid | 0;
            this.locateNameGroupid = data.locateNameGroupid || 0;
            this.guideLinkSide = data.guideLinkSide || 0;
            this.locateLinkSide = data.locateLinkSide || 0;
            this.srcPid = data.srcPid || 0;
            this.regionId = data.regionId || 0;
            this.meshId = data.meshaId || 0;
            // this.editFlag = data.editFlag || 1;
            if (typeof data.editFlag !== 'undefined') {
                this.editFlag = data.editFlag;
            } else {
                this.editFlag = 1;
            }
            this.idcode = data.idcode || '';
            this.dprName = data.dprName || '';
            this.dpName = data.dpName || '';
            this.operator = data.operator || '';
            this.memoire = data.memoire || '';
            this.dpfName = data.dpfName || '';
            this.posterId = data.posterId || '';
            this.addressFlag = data.addressFlag || 0;
            this.verifed = data.verifed;
            this.state = data.state || 0;
            this.log = data.log || '';
            this.memo = data.memo || '';
            this.reserved = data.reserved || '';
            this.taskId = data.taskId || 0;
            this.srcType = data.srcType || '';
            this.dataVersion = data.dataVersion;
            this.fieldTaskId = data.fieldTaskId;
            this.status = data.status || 0;
            this.guide = {
                type: 'Point',
                coordinates: [data.xGuide, data.yGuide]
            };
            this.guideLink = {
                type: 'LineString',
                coordinates: [[data.xGuide, data.yGuide], data.geometry.coordinates]
            };
            this.textInfo = {
                content: this.dprName + this.dpName,
                geometry: data.geometry
            };
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.pid = this.pid;
            ret.geometry = this.geometry;
            ret.xGuide = this.xGuide;
            ret.yGuide = this.yGuide;
            ret.guideLinkPid = this.guideLinkPid;
            ret.locateLinkPid = this.locateLinkPid;
            ret.locateNameGroupid = this.locateNameGroupid;
            ret.guideLinkSide = this.guideLinkSide;
            ret.locateLinkSide = this.locateLinkSide;
            ret.srcPid = this.srcPid;
            ret.regionId = this.regionId;
            ret.meshId = this.meshId;
            ret.editFlag = this.editFlag;
            ret.idcode = this.idcode;
            // 保存时需要转全角的字段
            ret.dprName = FM.Util.ToDBC(this.dprName);
            ret.dpName = FM.Util.ToDBC(this.dpName);

            ret.operator = this.operator;
            ret.memoire = this.memoire;
            ret.dpfName = this.dpfName;
            ret.posterId = this.posterId;
            ret.addressFlag = this.addressFlag;
            ret.verifed = this.verifed;
            ret.state = this.state;
            ret.log = this.log;
            ret.memo = this.memo;
            ret.reserved = this.reserved;
            ret.taskId = this.taskId;
            ret.srcType = this.srcType;
            ret.dataVersion = this.dataVersion;
            ret.fieldTaskId = this.fieldTaskId;
            ret.status = this.status;
            return ret;
        }
    }]);

    return IxPointAddress;
}(_Feature3.default);

exports.default = IxPointAddress;

/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CheckRule = __webpack_require__(462);

Object.defineProperty(exports, 'CheckRule', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_CheckRule).default;
  }
});

var _IxPoiBrand = __webpack_require__(463);

Object.defineProperty(exports, 'IxPoiBrand', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiBrand).default;
  }
});

var _IxPoiKind = __webpack_require__(464);

Object.defineProperty(exports, 'IxPoiKind', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiKind).default;
  }
});

var _IxPoiMediumKind = __webpack_require__(465);

Object.defineProperty(exports, 'IxPoiMediumKind', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiMediumKind).default;
  }
});

var _IxPoiTopKind = __webpack_require__(466);

Object.defineProperty(exports, 'IxPoiTopKind', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_IxPoiTopKind).default;
  }
});

var _RoadName = __webpack_require__(467);

Object.defineProperty(exports, 'RoadName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RoadName).default;
  }
});

var _ScModelMatchG = __webpack_require__(468);

Object.defineProperty(exports, 'ScModelMatchG', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ScModelMatchG).default;
  }
});

var _ScRoadNameHwInfo = __webpack_require__(469);

Object.defineProperty(exports, 'ScRoadNameHwInfo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ScRoadNameHwInfo).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 检查规则模型
 */
var CheckRule = function (_DataModel) {
    _inherits(CheckRule, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function CheckRule(data, options) {
        _classCallCheck(this, CheckRule);

        var _this = _possibleConstructorReturn(this, (CheckRule.__proto__ || Object.getPrototypeOf(CheckRule)).call(this, data, options));

        _this.dataModelType = 'CHECK_RULE';
        return _this;
    }

    /**
     * 模型转换主函数
     * @return {undefined}
     */


    _createClass(CheckRule, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.severity = data.severity;
            this.ruleType = data.ruleType;
            this.ruleDesc = data.ruleDesc;
            this.ruleId = data.ruleId;
        }
        /**
         * 格式化检查结果
         * @return {object} ret 格式化后的检查结果
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.severity = this.severity;
            ret.ruleType = this.ruleTyep;
            ret.ruleDesc = this.ruleDesc;
            ret.ruleId = this.ruleId;
            return ret;
        }
    }]);

    return CheckRule;
}(_DataModel3.default);

exports.default = CheckRule;

/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * poi品牌
 */
var IxPoiBrand = function (_DataModel) {
    _inherits(IxPoiBrand, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiBrand(data, options) {
        _classCallCheck(this, IxPoiBrand);

        var _this = _possibleConstructorReturn(this, (IxPoiBrand.__proto__ || Object.getPrototypeOf(IxPoiBrand)).call(this, data, options));

        _this.dataModelType = 'IX_POIBRAND';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiBrand, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.category = data.category || 0;
            this.chainCode = data.chainCode || null;
            this.chainName = data.chainName || null;
            this.weight = data.weight || 0;
            this.level = data.level;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.category = this.category;
            ret.chainCode = this.chainCode;
            ret.chainName = this.chainName;
            ret.weight = this.weight;
            ret.level = this.level;
            return ret;
        }
    }]);

    return IxPoiBrand;
}(_DataModel3.default);

exports.default = IxPoiBrand;

/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * poi种别
 */
var IxPoiKind = function (_DataModel) {
    _inherits(IxPoiKind, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiKind(data, options) {
        _classCallCheck(this, IxPoiKind);

        var _this = _possibleConstructorReturn(this, (IxPoiKind.__proto__ || Object.getPrototypeOf(IxPoiKind)).call(this, data, options));

        _this.dataModelType = 'IX_POI_KIND';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiKind, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.id = data.id;
            this.mediumId = data.mediumId;
            this.kindName = data.kindName;
            this.kindCode = data.kindCode;
            this.dispOnLink = data.dispOnLink;
            this.chainFlag = data.chainFlag;
            this.level = data.level;
            this.extend = data.extend;
            this.parent = data.parent;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.id = this.id;
            ret.mediumId = this.mediumId;
            ret.kindName = this.kindName;
            ret.kindCode = this.kindCode;
            ret.dispOnLink = this.dispOnLink;
            ret.chainFlag = this.chainFlag;
            ret.level = this.level;
            ret.extend = this.extend;
            ret.parent = this.parent;
            return ret;
        }
    }]);

    return IxPoiKind;
}(_DataModel3.default);

exports.default = IxPoiKind;

/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * poi中分类
 */
var IxPoiMediumKind = function (_DataModel) {
    _inherits(IxPoiMediumKind, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiMediumKind(data, options) {
        _classCallCheck(this, IxPoiMediumKind);

        var _this = _possibleConstructorReturn(this, (IxPoiMediumKind.__proto__ || Object.getPrototypeOf(IxPoiMediumKind)).call(this, data, options));

        _this.dataModelType = 'IX_POI_MEDIUM_KIND';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiMediumKind, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.id = data.id;
            this.code = data.code;
            this.name = data.name;
            this.topId = data.topId;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.id = this.id;
            ret.code = this.code;
            ret.name = this.name;
            ret.topId = this.topId;
            return ret;
        }
    }]);

    return IxPoiMediumKind;
}(_DataModel3.default);

exports.default = IxPoiMediumKind;

/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * poi大分类
 */
var IxPoiTopKind = function (_DataModel) {
    _inherits(IxPoiTopKind, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function IxPoiTopKind(data, options) {
        _classCallCheck(this, IxPoiTopKind);

        var _this = _possibleConstructorReturn(this, (IxPoiTopKind.__proto__ || Object.getPrototypeOf(IxPoiTopKind)).call(this, data, options));

        _this.dataModelType = 'IX_POI_TOP_KIND';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxPoiTopKind, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.id = data.id;
            this.code = data.code || 0;
            this.name = data.name;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret - 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.id = this.id;
            ret.code = this.code;
            ret.name = this.name;
            return ret;
        }
    }]);

    return IxPoiTopKind;
}(_DataModel3.default);

exports.default = IxPoiTopKind;

/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 道路名
 */
var RoadName = function (_Feature) {
    _inherits(RoadName, _Feature);

    function RoadName() {
        _classCallCheck(this, RoadName);

        return _possibleConstructorReturn(this, (RoadName.__proto__ || Object.getPrototypeOf(RoadName)).apply(this, arguments));
    }

    _createClass(RoadName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'ROADNAME';
            this.pid = data.pid || null;
            this.nameId = data.nameId || null;
            this.nameGroupid = data.nameGroupid || null;
            this.langCode = data.langCode || 'CHI';
            this.name = data.name || '';
            this.type = data.type || '';
            this.base = data.base || '';
            this.prefix = data.prefix || '';
            this.infix = data.infix || '';
            this.suffix = data.suffix || '';
            this.namePhonetic = data.namePhonetic || '';
            this.typePhonetic = data.typePhonetic || '';
            this.basePhonetic = data.basePhonetic || '';
            this.prefixPhonetic = data.prefixPhonetic || '';
            this.infixPhonetic = data.infixPhonetic || '';
            this.suffixPhonetic = data.suffixPhonetic || '';
            this.srcFlag = data.srcFlag === undefined || data.srcFlag === '' ? 0 : data.srcFlag;
            this.roadType = data.roadType === undefined || data.roadType === '' ? 0 : data.roadType;
            this.adminId = data.adminId || null;
            this.codeType = data.codeType === undefined || data.codeType === '' ? 0 : data.codeType;
            this.voiceFile = data.voiceFile || '';
            this.srcResume = data.srcResume || '';
            this.paRegionId = data.paRegionId || null;
            this.splitFlag = data.splitFlag === undefined || data.splitFlag === '' ? 0 : data.splitFlag;
            this.memo = data.memo || '';
            this.routeId = data.routeId === undefined || data.routeId === '' ? 0 : data.routeId;
            this.uRecord = data.uRecord || null;
            this.uFields = data.uFields || '';
            this.city = data.city || '';
            this.adminName = data.adminName || '';
            this.hwInfoFlag = null;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.nameId = this.nameId;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.name = this.name;
            data.type = this.type;
            data.base = this.base;
            data.prefix = this.prefix;
            data.infix = this.infix;
            data.suffix = this.suffix;
            data.namePhonetic = this.namePhonetic;
            data.typePhonetic = this.typePhonetic;
            data.basePhonetic = this.basePhonetic;
            data.prefixPhonetic = this.prefixPhonetic;
            data.infixPhonetic = this.infixPhonetic;
            data.suffixPhonetic = this.suffixPhonetic;
            data.srcFlag = this.srcFlag;
            data.roadType = this.roadType;
            data.adminId = this.adminId;
            data.codeType = this.codeType;
            data.voiceFile = this.voiceFile;
            data.srcResume = this.srcResume;
            data.paRegionId = this.paRegionId;
            data.splitFlag = this.splitFlag;
            data.memo = this.memo;
            data.routeId = this.routeId;
            data.uRecord = this.uRecord;
            data.uFields = this.uFields;
            data.city = this.city;
            data.adminName = this.adminName;
            data.hwInfoFlag = this.hwInfoFlag;
            // data.geoLiveType = this.geoLiveType;
            data.rowId = this.rowId;
            return data;
        }
        /**
         * 模型转换函数，获取的数据可能是片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.nameId = this.nameId;
            data.nameGroupid = this.nameGroupid;
            data.langCode = this.langCode;
            data.name = this.name;
            data.type = this.type || '';
            data.base = this.base || '';
            data.prefix = this.prefix;
            data.infix = this.infix;
            data.suffix = this.suffix;
            data.namePhonetic = this.namePhonetic;
            data.typePhonetic = this.typePhonetic;
            data.basePhonetic = this.basePhonetic;
            data.prefixPhonetic = this.prefixPhonetic;
            data.infixPhonetic = this.infixPhonetic;
            data.suffixPhonetic = this.suffixPhonetic;
            data.srcFlag = this.srcFlag;
            data.roadType = this.roadType;
            data.adminId = this.adminId || '';
            data.codeType = this.codeType;
            data.voiceFile = this.voiceFile;
            data.srcResume = this.srcResume;
            data.paRegionId = this.paRegionId;
            data.splitFlag = this.splitFlag;
            data.memo = this.memo;
            data.routeId = this.routeId;
            data.uRecord = this.uRecord;
            data.uFields = this.uFields;
            data.city = this.city;
            data.adminName = this.adminName;
            data.geoLiveType = this.geoLiveType;
            data.hwInfoFlag = this.hwInfoFlag;
            data.rowId = this.rowId;
            return data;
        }
    }]);

    return RoadName;
}(_Feature3.default);

exports.default = RoadName;

/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 模式匹配图
 */
var ScModelMatchG = function (_Feature) {
    _inherits(ScModelMatchG, _Feature);

    function ScModelMatchG() {
        _classCallCheck(this, ScModelMatchG);

        return _possibleConstructorReturn(this, (ScModelMatchG.__proto__ || Object.getPrototypeOf(ScModelMatchG)).apply(this, arguments));
    }

    _createClass(ScModelMatchG, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'SCMODELMATCHG';
            this.pid = data.pid || null;
            this.fileId = data.fileId || null;
            this.productLine = data.productLine || '';
            this.version = data.version || '';
            this.projectNm = data.projectNm || '';
            this.specification = data.specification || '';
            this.bType = data.bType || '';
            this.mType = data.mType || '';
            this.sType = data.sType || '';
            this.fileName = data.fileName || '';
            this.size = data.size || '';
            this.format = data.format || '';
            this.impWorker = data.impWorker || '';
            this.impDate = data.impDate || null;
            this.urlDb = data.urlDb || '';
            this.urlFile = data.urlFile || '';
            this.memo = data.memo || '';
            this.fileContent = data.fileContent || null;
            this.updateTime = data.updateTime || '';
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.fileId = this.fileId;
            data.productLine = this.productLine;
            data.version = this.version;
            data.projectNm = this.projectNm;
            data.specification = this.specification;
            data.bType = this.bType;
            data.mType = this.mType;
            data.sType = this.sType;
            data.fileName = this.fileName;
            data.size = this.size;
            data.format = this.format;
            data.impWorker = this.impWorker;
            data.impDate = this.impDate;
            data.urlDb = this.urlDb;
            data.urlFile = this.urlFile;
            data.memo = this.memo;
            data.fileContent = this.fileContent;
            data.updateTime = this.updateTime;
            return data;
        }
        /**
         * 模型转换函数，获取的数据可能是片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.fileId = this.fileId;
            data.productLine = this.productLine;
            data.version = this.version;
            data.projectNm = this.projectNm;
            data.specification = this.specification;
            data.bType = this.bType;
            data.mType = this.mType;
            data.sType = this.sType;
            data.fileName = this.fileName;
            data.size = this.size;
            data.format = this.format;
            data.impWorker = this.impWorker;
            data.impDate = this.impDate;
            data.urlDb = this.urlDb;
            data.urlFile = this.urlFile;
            data.memo = this.memo;
            data.fileContent = this.fileContent;
            data.updateTime = this.updateTime;
            return data;
        }
    }]);

    return ScModelMatchG;
}(_Feature3.default);

exports.default = ScModelMatchG;

/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 高速道路名
 */
var ScRoadNameHwInfo = function (_Feature) {
    _inherits(ScRoadNameHwInfo, _Feature);

    function ScRoadNameHwInfo() {
        _classCallCheck(this, ScRoadNameHwInfo);

        return _possibleConstructorReturn(this, (ScRoadNameHwInfo.__proto__ || Object.getPrototypeOf(ScRoadNameHwInfo)).apply(this, arguments));
    }

    _createClass(ScRoadNameHwInfo, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data - 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'SCROADNAMEHWINFO';
            this.pid = data.pid || null;
            this.hwPidUp = data.hwPidUp || null;
            this.hwPidDw = data.hwPidDw || null;
            this.nameGroupid = data.nameGroupid || '';
            this.memo = data.memo || '';
            this.uRecord = data.uRecord || 0;
            this.uFields = data.uFields || '';
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.hwPidUp = this.hwPidUp;
            data.hwPidDw = this.hwPidDw;
            data.nameGroupid = this.nameGroupid;
            data.memo = this.memo;
            data.uRecord = this.uRecord;
            data.uFields = this.uFields;
            return data;
        }
        /**
         * 模型转换函数，获取的数据可能是片段
         * @return {object} 格式化后的片段数据
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.hwPidUp = this.hwPidUp;
            data.hwPidDw = this.hwPidDw;
            data.nameGroupid = this.nameGroupid;
            data.memo = this.memo;
            data.uRecord = this.uRecord;
            data.uFields = this.uFields;
            return data;
        }
    }]);

    return ScRoadNameHwInfo;
}(_Feature3.default);

exports.default = ScRoadNameHwInfo;

/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ColPoi = __webpack_require__(471);

Object.defineProperty(exports, 'ColPoi', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ColPoi).default;
  }
});

var _ColPoiAddress = __webpack_require__(472);

Object.defineProperty(exports, 'ColPoiAddress', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ColPoiAddress).default;
  }
});

var _ColPoiList = __webpack_require__(473);

Object.defineProperty(exports, 'ColPoiList', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ColPoiList).default;
  }
});

var _ColPoiName = __webpack_require__(474);

Object.defineProperty(exports, 'ColPoiName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ColPoiName).default;
  }
});

var _ColPoiNameFlag = __webpack_require__(475);

Object.defineProperty(exports, 'ColPoiNameFlag', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ColPoiNameFlag).default;
  }
});

var _ColPoiPhoto = __webpack_require__(476);

Object.defineProperty(exports, 'ColPoiPhoto', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ColPoiPhoto).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GeoDataModel2 = __webpack_require__(59);

var _GeoDataModel3 = _interopRequireDefault(_GeoDataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 一体化编辑平台poi数据模型
 */
var ColPoi = function (_GeoDataModel) {
    _inherits(ColPoi, _GeoDataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function ColPoi(data, options) {
        _classCallCheck(this, ColPoi);

        var _this = _possibleConstructorReturn(this, (ColPoi.__proto__ || Object.getPrototypeOf(ColPoi)).call(this, data, options));

        _this.geoLiveType = 'COL_POI';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(ColPoi, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid;
            this.rowId = data.rowId || '';
            this.kindCode = data.kindCode || null;
            this.classifyRules = data.classifyRules;
            this.refMsg = data.refMsg;
            this.brandName = data.brandName || null;
            this.addressList = data.addressList;
            // this.nameFlag = data.nameFlag || '';
            // this.photos = data.photos;
            this.photos = [];
            if (data.photos) {
                if (data.photos) {
                    for (var m = 0, plen = data.photos.length; m < plen; m++) {
                        var photo = new FM.dataApi.ColPoiPhoto(data.photos[m]);
                        this.photos.push(photo);
                    }
                }
            }

            this.meshId = data.meshId;
            this.detailArea = data.detailArea;
            this.parentName = data.parentName || '';
            this.kindName = data.kindName || '';
            this.chainName = data.chainName || '';
            this.parentGroupId = data.parentGroupId;
            this.childrenGroupId = data.childrenGroupId;
            this.nameList = data.nameList || [];
            this.ckRules = data.ckRules;
            this.namerefMsg = data.namerefMsg; // 名称的参考信息
            this.chiNameList = data.chiNameList; // 名称统一、简称作业、别名作业的参考信息
            this.whole = data.whole; // 地域
            this.poiNum = data.poiNum;
            this.isProblem = data.isProblem; // 0 不显示 1 未查看 2 已查看 由于名称拼音存在多项，有pyIsproblem和isProblem，所以用一个公用字段标识质检问题状态
            if (data.isProblem) {
                // 便于精编质检排序，增加isQuality字段，此字段不作编辑
                this.isQuality = data.isProblem.other;
            }

            this.oldOriginalEngName = data.oldOriginalEngName;
            this.newOriginalEngName = data.newOriginalEngName;
            this.oldStandardEngName = data.oldStandardEngName;
            this.newStandardEngName = data.newStandardEngName;
            this.oldOriginalEngAddress = data.oldOriginalEngAddress || ''; // 修改前原始英文地址，
            this.newOriginalEngAddress = data.newOriginalEngAddress || ''; // 预处理英文地址
            this.namesTemp = data.names; // 用于增加names数组时判断namegroupId的控制

            this.addressChi = {}; // 大陆地址
            this.addressEng = {}; // 英文地址
            this.addressCht = {}; // 港澳地址
            this.addressPor = {}; // 葡文地址
            if (data.addresses) {
                for (var i = 0, len = data.addresses.length; i < len; i++) {
                    var objAdress = new FM.dataApi.ColPoiAddress(data.addresses[i]);
                    if (objAdress.langCode == 'CHI') {
                        this.addressChi = objAdress;
                    } else if (objAdress.langCode == 'ENG') {
                        this.addressEng = objAdress;
                    } else if (objAdress.langCode == 'CHT') {
                        this.addressCht = objAdress;
                    } else if (objAdress.langCode == 'POR') {
                        this.addressPor = objAdress;
                    }
                }
            }
            // 官方标准
            this.name11Chi = {};
            this.name11Eng = {};
            this.name11Cht = {};
            this.name11Por = {};
            // 官方原始
            this.name12Chi = {};
            this.name12Eng = {};
            this.name12Cht = {};
            this.name12Por = {};

            // 标准化简称
            this.name51ChiArr = [];
            this.name51Chi = {};
            this.name51Eng = {};
            this.name51Cht = {};
            this.name51Por = {};
            // 用于存储所有的有多音字的名称
            this.namePinyin = {};

            // 标准化别名
            this.name31ChiArr = []; // 中文(多个)
            this.name31EngArr = []; // 英文(多个)
            this.name31Chi = {};
            this.name31Eng = {};
            this.name31Cht = {};
            this.name31Por = {};

            // 原始别名
            this.name32ChiArr = []; // 中文(多个)
            this.name32EngArr = []; // 英文(多个)
            this.name32Chi = {};
            this.name32Eng = {};

            // 标准化曾用名
            this.name61ChiArr = [];
            this.name61Chi = {};
            this.name61Eng = {};
            this.name61Cht = {};
            this.name61Por = {};

            if (data.names) {
                for (var j = 0, nameLen = data.names.length; j < nameLen; j++) {
                    var obj = new FM.dataApi.ColPoiName(data.names[j]);
                    var flag = obj.nameClass + '' + obj.nameType + '' + obj.langCode;
                    if (flag == '11CHI') {
                        this.name11Chi = obj;
                    } else if (flag === '11ENG') {
                        this.name11Eng = obj;
                    } else if (flag === '11CHT') {
                        this.name11Cht = obj;
                    } else if (flag === '11POR') {
                        this.name11Por = obj;
                    } else if (flag === '12CHI') {
                        this.name12Chi = obj;
                    } else if (flag === '12ENG') {
                        this.name12Eng = obj;
                    } else if (flag === '12CHT') {
                        this.name12Cht = obj;
                    } else if (flag === '12POR') {
                        this.name12Por = obj;
                    } else if (flag === '51CHI') {
                        this.name51Chi = obj;
                        this.name51ChiArr.push(obj);
                    } else if (flag === '51ENG') {
                        this.name51Eng = obj;
                    } else if (flag === '51CHT') {
                        this.name51Cht = obj;
                    } else if (flag === '51POR') {
                        this.name51Por = obj;
                    } else if (flag === '31CHI') {
                        this.name31Chi = obj;
                        this.name31ChiArr.push(obj);
                    } else if (flag === '31ENG') {
                        this.name31Eng = obj;
                        this.name31EngArr.push(obj);
                    } else if (flag === '32CHI') {
                        this.name32Chi = obj;
                        this.name32ChiArr.push(obj);
                    } else if (flag === '32ENG') {
                        this.name32Eng = obj;
                        this.name32EngArr.push(obj);
                    } else if (flag === '61CHI') {
                        this.name61Chi = obj;
                        this.name61ChiArr.push(obj);
                    } else if (flag === 'AAA') {
                        // 对拼音的特殊处理,不会存在覆盖的情况，因为每一行只有一个拼音
                        this.namePinyin = obj;
                        if (data.isProblem && data.isProblem.py) {
                            this.isQuality = data.isProblem.py[this.namePinyin.pid];
                        }
                    }
                }
            }
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            var i = 0;
            var len = 0;
            ret.pid = this.pid;
            ret.rowId = this.rowId;
            ret.kindCode = this.kindCode;
            ret.classifyRules = this.classifyRules;
            ret.refMsg = this.refMsg;
            // ret.addressList = this.addressList;
            // ret.nameFlag = this.nameFlag;
            ret.attachments = this.attachments;
            ret.meshId = this.meshId;
            ret.detailArea = this.detailArea;
            ret.parentName = this.parentName;
            ret.kindName = this.kindName;
            ret.chainName = this.chainName;
            ret.parentGroupId = this.parentGroupId;
            ret.childrenGroupId = this.childrenGroupId;
            ret.brandName = this.brandName;
            // ret.ckRules = this.ckRules;
            // ret.namerefMsg = this.namerefMsg;

            ret.addresses = [];
            if (!FM.Util.isEmptyObject(this.addressChi)) {
                ret.addresses.push(this.addressChi.getIntegrate());
            }
            if (!FM.Util.isEmptyObject(this.addressEng)) {
                ret.addresses.push(this.addressEng.getIntegrate());
            }
            if (!FM.Util.isEmptyObject(this.addressCht)) {
                ret.addresses.push(this.addressCht.getIntegrate());
            }
            if (!FM.Util.isEmptyObject(this.addressPor)) {
                ret.addresses.push(this.addressPor.getIntegrate());
            }

            ret.names = [];
            if (!FM.Util.isEmptyObject(this.name11Chi)) {
                ret.names.push(this.name11Chi.getIntegrate());
            }
            if (!FM.Util.isEmptyObject(this.name11Eng)) {
                ret.names.push(this.name11Eng.getIntegrate());
            }
            if (!FM.Util.isEmptyObject(this.name12Eng)) {
                ret.names.push(this.name12Eng.getIntegrate());
            }
            if (!FM.Util.isEmptyObject(this.name12Chi)) {
                ret.names.push(this.name12Chi.getIntegrate());
            }
            if (!FM.Util.isEmptyObject(this.namePinyin)) {
                ret.names.push(this.namePinyin.getIntegrate());
            }
            // 名称多个进行拆分
            if (this.name51ChiArr.length > 0) {
                for (i = 0, len = this.name51ChiArr.length; i < len; i++) {
                    if (this.name51ChiArr[i].rowId === '' && this.name51ChiArr[i].pid === 0) {
                        ret.names.unshift(this.name51ChiArr[i].getIntegrate());
                    } else {
                        ret.names.push(this.name51ChiArr[i].getIntegrate());
                    }
                }
            }
            if (this.name31ChiArr.length > 0) {
                for (i = 0, len = this.name31ChiArr.length; i < len; i++) {
                    if (this.name31ChiArr[i].rowId === '' && this.name31ChiArr[i].pid === 0) {
                        ret.names.unshift(this.name31ChiArr[i].getIntegrate());
                    } else {
                        ret.names.push(this.name31ChiArr[i].getIntegrate());
                    }
                }
            }
            if (this.name32ChiArr.length > 0) {
                for (i = 0, len = this.name32ChiArr.length; i < len; i++) {
                    if (this.name32ChiArr[i].rowId === '' && this.name32ChiArr[i].pid === 0) {
                        ret.names.unshift(this.name32ChiArr[i].getIntegrate());
                    } else {
                        ret.names.push(this.name32ChiArr[i].getIntegrate());
                    }
                }
            }
            if (this.name61ChiArr.length > 0) {
                for (i = 0, len = this.name61ChiArr.length; i < len; i++) {
                    if (this.name61ChiArr[i].rowId === '' && this.name61ChiArr[i].pid === 0) {
                        ret.names.unshift(this.name61ChiArr[i].getIntegrate());
                    } else {
                        ret.names.push(this.name61ChiArr[i].getIntegrate());
                    }
                }
            }
            if (this.name31EngArr.length > 0) {
                for (i = 0, len = this.name31EngArr.length; i < len; i++) {
                    if (this.name31EngArr[i].rowId === '' && this.name31EngArr[i].pid === 0) {
                        ret.names.unshift(this.name31EngArr[i].getIntegrate());
                    } else {
                        ret.names.push(this.name31EngArr[i].getIntegrate());
                    }
                }
            }
            if (this.name32EngArr.length > 0) {
                for (i = 0, len = this.name32EngArr.length; i < len; i++) {
                    if (this.name32EngArr[i].rowId === '' && this.name32EngArr[i].pid === 0) {
                        ret.names.unshift(this.name32EngArr[i].getIntegrate());
                    } else {
                        ret.names.push(this.name32EngArr[i].getIntegrate());
                    }
                }
            }
            // ret.geoLiveType = this.geoLiveType;
            return ret;
        }
        /**
         * 模型转换函数，中文名称转全角
         * @return {undefined}
         */

    }, {
        key: '_chiNameToDBC',
        value: function _chiNameToDBC() {
            var i = void 0,
                j = void 0;
            var names = ['name11Chi', 'name12Chi', 'name31Chi', 'name32Chi'];
            var nameArrs = ['name51ChiArr', 'name31ChiArr', 'name32ChiArr', 'name61ChiArr'];
            var keys = Object.getOwnPropertyNames(this);
            for (i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (names.indexOf(key) > -1 && this[key].name) {
                    this[key].name = FM.Util.ToDBC(this[key].name);
                }
                if (nameArrs.indexOf(key) > -1) {
                    for (j = 0; j < this[key].length; j++) {
                        if (this[key][j].name) {
                            this[key][j].name = FM.Util.ToDBC(this[key][j].name);
                        }
                    }
                }
            }
        }
        /**
         * 模型转换函数，英文名称转半角
         * @return {undefined}
         */

    }, {
        key: '_engNameToCDB',
        value: function _engNameToCDB() {
            var i = void 0;
            if (this.name12Eng && this.name12Eng.name) {
                this.name12Eng.name = FM.Util.ToCDB(this.name12Eng.name);
            }
            if (this.name11Eng && this.name11Eng.name) {
                this.name11Eng.name = FM.Util.ToCDB(this.name11Eng.name);
            }
            if (this.name32EngArr.length > 0) {
                for (i = 0; i < this.name32EngArr.length; i++) {
                    if (this.name32EngArr[i].name) {
                        this.name32EngArr[i].name = FM.Util.ToCDB(this.name32EngArr[i].name);
                    }
                }
            }
            if (this.name31EngArr.length > 0) {
                for (i = 0; i < this.name31EngArr.length; i++) {
                    if (this.name31EngArr[i].name) {
                        this.name31EngArr[i].name = FM.Util.ToCDB(this.name31EngArr[i].name);
                    }
                }
            }
        }
        /**
         * 模型转换函数，对中文地址的18个字段转全角
         * @return {undefined}
         */

    }, {
        key: '_chiAddressToDBC',
        value: function _chiAddressToDBC() {
            var i = void 0;
            var addArr = ['province', 'city', 'county', 'town', 'place', 'street', 'landmark', 'prefix', 'housenum', 'type', 'subnum', 'surfix', 'estab', 'building', 'floor', 'unit', 'room', 'addons'];
            var keys = Object.getOwnPropertyNames(this.addressChi);
            for (i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (addArr.indexOf(key) > -1) {
                    if (this.addressChi[key]) {
                        this.addressChi[key] = FM.Util.ToDBC(this.addressChi[key]);
                    }
                }
            }
        }
        /**
         * 模型转换函数，对英文地址的18个字段转半角
         * @return {undefined}
         */

    }, {
        key: '_engAddressToCDB',
        value: function _engAddressToCDB() {
            if (this.addressEng && this.addressEng.fullname) {
                this.addressEng.fullname = FM.Util.ToCDB(this.addressEng.fullname);
            }
        }
    }]);

    return ColPoi;
}(_GeoDataModel3.default);

exports.default = ColPoi;

/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
        value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 一体化编辑平台poi地址数据模型
 */
var ColPoiAddress = function (_DataModel) {
        _inherits(ColPoiAddress, _DataModel);

        /**
         * 对象初始化
         * @param  {object} data 接口返回的数据
         * @param  {object} options 附加配置
         * @return {undefined}
         */
        function ColPoiAddress(data, options) {
                _classCallCheck(this, ColPoiAddress);

                var _this = _possibleConstructorReturn(this, (ColPoiAddress.__proto__ || Object.getPrototypeOf(ColPoiAddress)).call(this, data, options));

                _this.dataModelType = 'COL_POI_ADDRESS';
                return _this;
        }

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */


        _createClass(ColPoiAddress, [{
                key: 'setAttributes',
                value: function setAttributes(data) {
                        this.pid = data.pid;
                        this.poiPid = data.poiPid || 0;
                        this.nameGroupid = data.nameGroupid || 1;
                        this.langCode = data.langCode;
                        this.srcFlag = data.srcFlag;
                        this.fullname = data.fullname;
                        this.fullnamePhonetic = data.fullnamePhonetic;
                        this.roadname = data.roadname;
                        this.roadnamePhonetic = data.roadnamePhonetic;
                        this.addrname = data.addrname;
                        this.addrnamePhonetic = data.addrnamePhonetic;
                        this.province = data.province;
                        this.city = data.city;
                        this.county = data.county;
                        this.town = data.town;
                        this.place = data.place;
                        this.street = data.street;
                        this.landmark = data.landmark;
                        this.prefix = data.prefix;
                        this.housenum = data.housenum;
                        this.type = data.type;
                        this.subnum = data.subnum;
                        this.surfix = data.surfix;
                        this.estab = data.estab;
                        this.building = data.building;
                        this.floor = data.floor;
                        this.unit = data.unit;
                        this.room = data.room;
                        this.addons = data.addons;
                        this.provPhonetic = data.provPhonetic;
                        this.cityPhonetic = data.cityPhonetic;
                        this.countyPhonetic = data.countyPhonetic;
                        this.townPhonetic = data.townPhonetic;
                        this.placePhonetic = data.placePhonetic;
                        this.streetPhonetic = data.streetPhonetic;
                        this.landmarkPhonetic = data.landmarkPhonetic;
                        this.prefixPhonetic = data.prefixPhonetic;
                        this.housenumPhonetic = data.housenumPhonetic;
                        this.typePhonetic = data.typePhonetic;
                        this.subnumPhonetic = data.subnumPhonetic;
                        this.surfixPhonetic = data.surfixPhonetic;
                        this.estabPhonetic = data.estabPhonetic;
                        this.buildingPhonetic = data.buildingPhonetic;
                        this.unitPhonetic = data.unitPhonetic;
                        this.floorPhonetic = data.floorPhonetic;
                        this.roomPhonetic = data.roomPhonetic;
                        this.addonsPhonetic = data.addonsPhonetic;

                        this.addrrefMsg = data.addrrefMsg;

                        // 拼音
                        this.addrnameStr = data.addrnameStr || ''; // 前端编辑拼音时使用（实际来源是后台将PROVINCE、CITY、COUNTY、TOWN、PLACE、STREET字段用竖线分割拼接起来的）
                        this.roadnameStr = data.roadnameStr || ''; // 前端编辑拼音时使用（实际来源是后台将LANDMARK、PREFIX、HOUSENUM、TYPE、SUBNUM、SURFIX、ESTAB、BUILDING、UNIT、FLOOR、ROOM、ADDONS字段用竖线分割拼接起来的）
                        this.addrnamePhoneticStr = data.addrnamePhoneticStr || '';
                        this.roadnamePhoneticStr = data.roadnamePhoneticStr || '';
                        this.roadNameMultiPinyin = data.roadNameMultiPinyin;
                        this.addrNameMultiPinyin = data.addrNameMultiPinyin;

                        this.rowId = data.rowId;

                        // 额外的属性
                        this.shortNameExtra = '';
                }
                /**
                 * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
                 * @return {object} ret 前端传递给服务的参数数据
                 */

        }, {
                key: 'getIntegrate',
                value: function getIntegrate() {
                        var ret = {};
                        ret.pid = this.pid;
                        ret.nameGroupid = this.nameGroupid;
                        ret.poiPid = this.poiPid;
                        ret.langCode = this.langCode;
                        ret.srcFlag = this.srcFlag;
                        ret.fullname = this.fullname;
                        ret.fullnamePhonetic = this.fullnamePhonetic;
                        ret.roadname = this.roadname;
                        ret.roadnamePhonetic = this.roadnamePhonetic;
                        ret.addrname = this.addrname;
                        ret.addrnamePhonetic = this.addrnamePhonetic;
                        ret.province = this.province;
                        ret.city = this.city;
                        ret.county = this.county;
                        ret.town = this.town;
                        ret.place = this.place;
                        ret.street = this.street;
                        ret.landmark = this.landmark;
                        ret.prefix = this.prefix;
                        ret.housenum = this.housenum;
                        ret.type = this.type;
                        ret.subnum = this.subnum;
                        ret.surfix = this.surfix;
                        ret.estab = this.estab;
                        ret.building = this.building;
                        ret.floor = this.floor;
                        ret.unit = this.unit;
                        ret.room = this.room;
                        ret.addons = this.addons;
                        ret.provPhonetic = this.provPhonetic;
                        ret.cityPhonetic = this.cityPhonetic;
                        ret.countyPhonetic = this.countyPhonetic;
                        ret.townPhonetic = this.townPhonetic;
                        ret.placePhonetic = this.placePhonetic;
                        ret.streetPhonetic = this.streetPhonetic;
                        ret.landmarkPhonetic = this.landmarkPhonetic;
                        ret.prefixPhonetic = this.prefixPhonetic;
                        ret.housenumPhonetic = this.housenumPhonetic;
                        ret.typePhonetic = this.typePhonetic;
                        ret.subnumPhonetic = this.subnumPhonetic;
                        ret.surfixPhonetic = this.surfixPhonetic;
                        ret.estabPhonetic = this.estabPhonetic;
                        ret.buildingPhonetic = this.buildingPhonetic;
                        ret.floorPhonetic = this.floorPhonetic;
                        ret.unitPhonetic = this.unitPhonetic;
                        ret.roomPhonetic = this.roomPhonetic;
                        ret.addonsPhonetic = this.addonsPhonetic;

                        ret.addrrefMsg = this.addrrefMsg;

                        // 拼音
                        // ret.fullNameMultiPinyin = this.fullNameMultiPinyin;
                        // ret.roadNameMultiPinyin = this.roadNameMultiPinyin;
                        // ret.fullNamePinyin = this.fullNamePinyin;
                        // ret.roadNamePinyin = this.roadNamePinyin;
                        // ret.addrNamePinyin = this.addrNamePinyin;
                        // ret.addrNameMultiPinyin = this.addrNameMultiPinyin;

                        ret.rowId = this.rowId;

                        return ret;
                }
        }]);

        return ColPoiAddress;
}(_DataModel3.default);

exports.default = ColPoiAddress;

/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GeoDataModel2 = __webpack_require__(59);

var _GeoDataModel3 = _interopRequireDefault(_GeoDataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 一体化编辑平台poi列表数据模型
 */
var ColPoiList = function (_GeoDataModel) {
    _inherits(ColPoiList, _GeoDataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function ColPoiList(data, options) {
        _classCallCheck(this, ColPoiList);

        var _this = _possibleConstructorReturn(this, (ColPoiList.__proto__ || Object.getPrototypeOf(ColPoiList)).call(this, data, options));

        _this.geoLiveType = 'COL_POI_LIST';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {Object[]} dataArr - 接口返回的poi列表
     * @return {undefined}
     */


    _createClass(ColPoiList, [{
        key: 'setAttributes',
        value: function setAttributes(dataArr) {
            // 参数是数组
            this.dataList = [];
            if (dataArr && dataArr.length > 0) {
                for (var i = 0, len = dataArr.length; i < len; i++) {
                    var obj = new FM.dataApi.ColPoi(dataArr[i]);
                    this.dataList.push(obj);
                }
            }
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {Object[]} ret 前端传递给服务的poi列表
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = [];
            if (this.dataList && this.dataList.length > 0) {
                for (var i = 0, len = this.dataList.length; i < len; i++) {
                    ret.push(this.dataList[i].getIntegrate());
                }
            }
            // ret["geoLiveType"] = this.geoLiveType;
            return ret;
        }
    }]);

    return ColPoiList;
}(_GeoDataModel3.default);

exports.default = ColPoiList;

/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 一体化编辑平台poi名称数据模型
 */
var ColPoiName = function (_DataModel) {
    _inherits(ColPoiName, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function ColPoiName(data, options) {
        _classCallCheck(this, ColPoiName);

        var _this = _possibleConstructorReturn(this, (ColPoiName.__proto__ || Object.getPrototypeOf(ColPoiName)).call(this, data, options));

        _this.dataModelType = 'COL_POI_NAME';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(ColPoiName, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid || 0;
            this.poiPid = data.poiPid || 0;
            this.nameGroupid = data.nameGroupid || 1;
            this.langCode = data.langCode;
            this.nameClass = data.nameClass || 1;
            this.nameType = data.nameType || 1;
            this.name = data.name || '';

            this.namePhonetic = data.namePhonetic || '';
            this.nameStrPinyin = data.nameStrPinyin || '';
            this.multiPinyin = data.multiPinyin || '';
            this.nameFlags = {};

            this.nameFlags = [];
            if (data.nameFlags && data.nameFlags.length > 0) {
                for (var p = 0; p < data.nameFlags.length; p++) {
                    var obj = new FM.dataApi.ColPoiNameFlag(data.nameFlags[p]);
                    this.nameFlags.push(obj);
                }
            } else {
                // this.nameFlags.push(new FM.dataApi.ColPoiNameFlag({ nameId: this.pid }));
            }

            this.rowId = data.rowId || '';
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.pid = this.pid;
            ret.poiPid = this.poiPid;
            ret.nameGroupid = this.nameGroupid;
            ret.langCode = this.langCode;
            ret.nameClass = this.nameClass;
            ret.nameType = this.nameType;
            ret.name = this.name;
            ret.nameFlags = [];
            for (var i = 0; i < this.nameFlags.length; i++) {
                ret.nameFlags.push(this.nameFlags[i].getIntegrate());
            }
            ret.namePhonetic = this.namePhonetic;
            // ret.nameStrPinyin = this.nameStrPinyin;
            // ret.multiPinyin = this.multiPinyin;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return ColPoiName;
}(_DataModel3.default);

exports.default = ColPoiName;

/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 一体化编辑平台poi名称标识数据模型
 */
var ColPoiNameFlag = function (_DataModel) {
    _inherits(ColPoiNameFlag, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function ColPoiNameFlag(data, options) {
        _classCallCheck(this, ColPoiNameFlag);

        var _this = _possibleConstructorReturn(this, (ColPoiNameFlag.__proto__ || Object.getPrototypeOf(ColPoiNameFlag)).call(this, data, options));

        _this.dataModelType = 'COL_POI_NAME_Flag';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(ColPoiNameFlag, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.nameId = data.nameId || 0;
            this.flagCode = data.flagCode || '';
            this.rowId = data.rowId || '';
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.nameId = this.nameId;
            ret.flagCode = this.flagCode;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return ColPoiNameFlag;
}(_DataModel3.default);

exports.default = ColPoiNameFlag;

/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GeoDataModel2 = __webpack_require__(59);

var _GeoDataModel3 = _interopRequireDefault(_GeoDataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 一体化编辑平台poi照片数据模型
 */
var ColPoiPhoto = function (_GeoDataModel) {
    _inherits(ColPoiPhoto, _GeoDataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function ColPoiPhoto(data, options) {
        _classCallCheck(this, ColPoiPhoto);

        var _this = _possibleConstructorReturn(this, (ColPoiPhoto.__proto__ || Object.getPrototypeOf(ColPoiPhoto)).call(this, data, options));

        _this.geoLiveType = 'IX_POI_PHOTO';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(ColPoiPhoto, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.poiPid = data.poiPid;
            this.photoId = data.photoId || 0;
            // this.pid = data['pid'] || ""; //由于此处的PID是一个有意义的字段，所以修改成了fccPid
            this.fccPid = data.fccPid || '';
            this.status = data.status || '';
            this.tag = data.tag || 1;
            this.memo = data.memo || '';
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.poiPid = this.poiPid;
            ret.fccPid = this.fccPid;
            ret.tag = this.tag;
            ret.photoId = this.photoId;
            ret.status = this.status;
            ret.memo = this.memo;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return ColPoiPhoto;
}(_GeoDataModel3.default);

exports.default = ColPoiPhoto;

/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _AgentPoi = __webpack_require__(478);

Object.defineProperty(exports, 'AgentPoi', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_AgentPoi).default;
  }
});

var _AgentPoiAddress = __webpack_require__(479);

Object.defineProperty(exports, 'AgentPoiAddress', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_AgentPoiAddress).default;
  }
});

var _AgentPoiContact = __webpack_require__(480);

Object.defineProperty(exports, 'AgentPoiContact', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_AgentPoiContact).default;
  }
});

var _AgentPoiName = __webpack_require__(481);

Object.defineProperty(exports, 'AgentPoiName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_AgentPoiName).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Feature2 = __webpack_require__(1);

var _Feature3 = _interopRequireDefault(_Feature2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 代理点平台poi数据模型的基类
 */
var AgentPoi = function (_Feature) {
    _inherits(AgentPoi, _Feature);

    function AgentPoi() {
        _classCallCheck(this, AgentPoi);

        return _possibleConstructorReturn(this, (AgentPoi.__proto__ || Object.getPrototypeOf(AgentPoi)).apply(this, arguments));
    }

    _createClass(AgentPoi, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'AGENT_POI';
            this.pid = data.pid || 0;
            this.rowId = data.rowId || '';
            this.poiNum = data.poiNum || null;
            this.kindCode = data.kindCode || '0';
            this.chain = data.chain || '';
            this.level = data.level || '';
            this.postCode = data.postCode || '';
            this.open24h = data.open24h || 2;
            this.xGuide = data.xGuide || 0;
            this.yGuide = data.yGuide || 0;
            this.regionId = data.regionId || 0;
            this.meshId = data.meshId || 0;
            this.status = data.status;

            var obj = void 0;
            this.names = [];
            if (data.names) {
                for (var p = 0; p < data.names.length; p++) {
                    obj = new FM.dataApi.AgentPoiName(data.names[p]);
                    this.names.push(obj);
                }
            }
            // 官方标准中文名
            this.name = {};
            // 简称
            this.nameShort = {};

            // 地址
            this.address = {};
            this.addresses = [];
            if (data.addresses) {
                for (var q = 0, qLen = data.addresses.length; q < qLen; q++) {
                    obj = new FM.dataApi.AgentPoiAddress(data.addresses[q]);
                    this.addresses.push(obj);
                }
            }
            this.contacts = [];
            if (data.contacts) {
                for (var i = 0, len = data.contacts.length; i < len; i++) {
                    this.contacts.push(new FM.dataApi.AgentPoiContact(data.contacts[i]));
                }
            }
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            this._attrToDBC();
            this._formatNameAndAddress();
            var ret = {};
            ret.pid = this.pid;
            ret.rowId = this.rowId;
            ret.poiNum = this.poiNum;
            ret.kindCode = this.kindCode == '0' ? '' : this.kindCode;
            ret.chain = this.chain;
            ret.level = this.level;
            ret.postCode = this.postCode;
            ret.open24h = this.open24h;
            // ret.geometry = this.geometry;
            ret.geometry = {
                type: this.geometry.type,
                coordinates: [this.geometry.coordinates[0], this.geometry.coordinates[1]]
            };
            ret.xGuide = this.xGuide;
            ret.yGuide = this.yGuide;
            ret.regionId = this.regionId;
            ret.meshId = this.meshId;
            ret.status = this.status;

            ret.names = [];
            var i = void 0,
                len = void 0;
            if (this.names) {
                for (i = 0, len = this.names.length; i < len; i++) {
                    ret.names.push(this.names[i].getIntegrate());
                }
            }
            ret.addresses = [];
            if (this.addresses) {
                for (i = 0, len = this.addresses.length; i < len; i++) {
                    ret.addresses.push(this.addresses[i].getIntegrate());
                }
            }
            ret.contacts = [];
            if (this.contacts) {
                for (i = 0, len = this.contacts.length; i < len; i++) {
                    ret.contacts.push(this.contacts[i].getIntegrate());
                }
            }

            // ret.geoLiveType = this.geoLiveType;
            return ret;
        }
        /**
         * 模型转换函数，将部分属性由半角转全角
         * @return {undefined}
         */

    }, {
        key: '_attrToDBC',
        value: function _attrToDBC() {
            if (this.name.name) {
                this.name.name = FM.Util.ToDBC(this.name.name);
            }
            if (this.nameShort.name) {
                this.nameShort.name = FM.Util.ToDBC(this.nameShort.name);
            }
            if (this.address.fullname) {
                this.address.fullname = FM.Util.ToDBC(this.address.fullname);
            }
        }
        /**
         * 前端输入校验方法
         * @return {undefined}
         */

    }, {
        key: '_doValidate',
        value: function _doValidate() {}
        // if (this.address.fullname && this.address.fullname.length == 1) {
        //     this._pushError('name', '地址的长度不能为1！');
        // }

        /**
         * 名称地址格式化方法
         * @return {undefined}
         */

    }, {
        key: '_formatNameAndAddress',
        value: function _formatNameAndAddress() {
            var flag = true;
            var i = void 0,
                len = void 0;
            // 官方标准中文名
            if (!FM.Util.isEmptyObject(this.name)) {
                for (i = 0, len = this.names.length; i < len; i++) {
                    if (this.name.langCode == this.names[i].langCode && this.name.nameClass == this.names[i].nameClass && this.name.nameType == this.names[i].nameType) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    this.names.unshift(this.name);
                }
            }
            // 简称
            flag = true;
            if (!FM.Util.isEmptyObject(this.nameShort)) {
                var nameShortIndex = -1;
                for (i = 0, len = this.names.length; i < len; i++) {
                    if (this.nameShort.langCode == this.names[i].langCode && this.nameShort.nameClass == this.names[i].nameClass && this.nameShort.nameType == this.names[i].nameType) {
                        flag = false;
                        nameShortIndex = i;
                        break;
                    }
                }
                if (flag) {
                    if (this.nameShort.name) {
                        this.names.unshift(this.nameShort);
                    }
                } else {
                    if (!this.nameShort.name) {
                        this.names.splice(nameShortIndex, 1);
                    }
                }
            }
            // 增加对CHI地址为空的控制
            flag = true;
            if (!FM.Util.isEmptyObject(this.address)) {
                var addIndex = -1;
                for (i = 0; i < this.addresses.length; i++) {
                    if (this.address.langCode == this.addresses[i].langCode) {
                        flag = false;
                        addIndex = i;
                        break;
                    }
                }
                if (flag) {
                    if (this.address.fullname) {
                        // 当fullname不为空时在增加地址对象
                        this.addresses.unshift(this.address);
                    }
                } else if (!this.address.fullname) {
                    // 当从编辑页面把fullname字段删除后，需要清除address对象
                    this.addresses.splice(addIndex, 1);
                }
            }
        }
        /**
         * 重写父类的比较方法，主要是为了解决新增时不传递pid，rowid，poipid等字段
         * @param  {object} newJson - 数据修改后的数据对象
         * @param  {object} oldJson - 数据修改前的数据对象
         * @return {object} 数据修改后改变的参数
         */

    }, {
        key: '_compareJson',
        value: function _compareJson(newJson, oldJson) {
            var changed = {};
            var newVal = void 0,
                oldVal = void 0,
                tempObj = void 0,
                tempArray = void 0;
            var k = void 0,
                i = void 0,
                j = void 0,
                delFlag = void 0;
            // 新增
            if (newJson && !oldJson) {
                for (k in newJson) {
                    if (newJson.hasOwnProperty(k) && k !== 'geometry') {
                        newVal = newJson[k];
                        if ((typeof newVal === 'undefined' ? 'undefined' : _typeof(newVal)) === 'object') {
                            if (FM.Util.isObject(newVal)) {
                                tempObj = this._compareJson(newVal, null);
                                if (tempObj) {
                                    changed[k] = tempObj;
                                }
                            } else if (FM.Util.isArray(newVal)) {
                                tempArray = [];
                                for (i = 0; i < newVal.length; i++) {
                                    tempObj = this._compareJson(newVal[i], null);
                                    if (tempObj) {
                                        tempArray.push(tempObj);
                                    }
                                }
                                if (tempArray.length > 0) {
                                    changed[k] = tempArray;
                                }
                            }
                        } else {
                            changed[k] = newVal;
                        }
                    }
                }
                delete changed.pid;
                delete changed.poiPid;
                delete changed.rowId;
                changed.objStatus = 'INSERT';
            } else if (!newJson && oldJson) {
                // 删除
                for (k in oldJson) {
                    if (oldJson.hasOwnProperty(k) && k !== 'geometry') {
                        oldVal = oldJson[k];
                        if ((typeof oldVal === 'undefined' ? 'undefined' : _typeof(oldVal)) === 'object') {
                            if (FM.Util.isObject(oldVal)) {
                                tempObj = this._compareJson(null, oldVal);
                                if (tempObj) {
                                    changed[k] = tempObj;
                                }
                            } else if (FM.Util.isArray(oldVal)) {
                                tempArray = [];
                                for (i = 0; i < oldVal.length; i++) {
                                    tempObj = this._compareJson(null, oldVal[i]);
                                    if (tempObj) {
                                        tempArray.push(tempObj);
                                    }
                                }
                                if (tempArray.length > 0) {
                                    changed[k] = tempArray;
                                }
                            }
                        } else if (k === 'rowId' || k === 'pid' || k === 'linkPid' || k === 'nodePid' || k === 'formOfWay') {
                            changed[k] = oldJson[k];
                        }
                    }
                }
                changed.objStatus = 'DELETE';
            } else {
                // 修改
                for (k in newJson) {
                    // 不比较几何坐标
                    if (newJson.hasOwnProperty(k) && k !== 'geometry') {
                        newVal = newJson[k];
                        oldVal = oldJson[k];
                        if ((typeof newVal === 'undefined' ? 'undefined' : _typeof(newVal)) === 'object') {
                            if (FM.Util.isObject(newVal) && FM.Util.isObject(oldVal)) {
                                tempObj = this._compareJson(newVal, oldVal);
                                if (tempObj) {
                                    changed[k] = tempObj;
                                }
                            } else if (FM.Util.isArray(newVal) && FM.Util.isArray(oldVal)) {
                                tempArray = [];
                                for (i = 0; i < newVal.length; i++) {
                                    tempObj = null;
                                    if (newVal[i].hasOwnProperty('rowId') && newVal[i].rowId) {
                                        // 修改
                                        for (j = 0; j < oldVal.length; j++) {
                                            if (newVal[i].rowId === oldVal[j].rowId) {
                                                tempObj = this._compareJson(newVal[i], oldVal[j]);
                                                // 增加返回optins属性，主要为了批量编辑
                                                if (newVal[i].options && newVal[i].options.correspondingArr && tempObj) {
                                                    tempObj.options = oldVal[j].options;
                                                }
                                                break;
                                            }
                                        }
                                    } else {
                                        // 新增
                                        tempObj = this._compareJson(newVal[i], null);
                                    }
                                    if (tempObj) {
                                        tempArray.push(tempObj);
                                    }
                                }
                                // 删除
                                for (i = 0; i < oldVal.length; i++) {
                                    delFlag = true;
                                    for (j = 0; j < newVal.length; j++) {
                                        if (newVal[j].rowId === oldVal[i].rowId) {
                                            delFlag = false;
                                            break;
                                        }
                                    }
                                    if (delFlag) {
                                        tempObj = this._compareJson(null, oldVal[i]);
                                        if (tempObj) {
                                            tempArray.push(tempObj);
                                        }
                                    }
                                }
                                if (tempArray.length > 0) {
                                    changed[k] = tempArray;
                                }
                            }
                        } else if (newVal !== oldVal) {
                            changed[k] = newVal;
                        }
                    }
                }
                if (!FM.Util.isEmptyObject(changed)) {
                    if (newJson.hasOwnProperty('rowId')) {
                        changed.rowId = newJson.rowId;
                    }
                    if (newJson.hasOwnProperty('pid') && !changed.hasOwnProperty('pid')) {
                        changed.pid = newJson.pid;
                    }
                    if (newJson.hasOwnProperty('linkPid') && !changed.hasOwnProperty('linkPid')) {
                        changed.linkPid = newJson.linkPid;
                    }
                    changed.objStatus = 'UPDATE';
                }
            }
            if (FM.Util.isEmptyObject(changed)) {
                // 如果没有任何变化，则返回null
                return null;
            }
            return changed;
        }
    }]);

    return AgentPoi;
}(_Feature3.default);

exports.default = AgentPoi;

/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 代理点平台地址数据模型的基类
 */
var AgentPoiAddress = function (_DataModel) {
    _inherits(AgentPoiAddress, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function AgentPoiAddress(data, options) {
        _classCallCheck(this, AgentPoiAddress);

        var _this = _possibleConstructorReturn(this, (AgentPoiAddress.__proto__ || Object.getPrototypeOf(AgentPoiAddress)).call(this, data, options));

        _this.geoLiveType = 'AGENT_ADDRESS';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(AgentPoiAddress, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid;
            this.poiPid = data.poiPid || 0;
            this.nameGroupid = data.nameGroupid || 1;
            this.langCode = data.langCode;
            this.srcFlag = data.srcFlag;
            this.fullname = data.fullname;
            this.roadname = data.roadname;
            this.addrname = data.addrname;
            this.province = data.province;
            this.city = data.city;
            this.county = data.county;
            this.town = data.town;
            this.place = data.place;
            this.street = data.street;
            this.landmark = data.landmark;
            this.prefix = data.prefix;
            this.housenum = data.housenum;
            this.type = data.type;
            this.subnum = data.subnum;
            this.surfix = data.surfix;
            this.estab = data.estab;
            this.building = data.building;
            this.floor = data.floor;
            this.unit = data.unit;
            this.room = data.room;
            this.addons = data.addons;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.pid = this.pid;
            ret.audataId = this.audataId;
            ret.nameGroupid = this.nameGroupid;
            ret.poiPid = this.poiPid;
            ret.langCode = this.langCode;
            ret.srcFlag = this.srcFlag;
            ret.fullname = this.fullname;
            ret.roadname = this.roadname;
            ret.addrname = this.addrname;
            ret.province = this.province;
            ret.city = this.city;
            ret.county = this.county;
            ret.town = this.town;
            ret.place = this.place;
            ret.street = this.street;
            ret.landmark = this.landmark;
            ret.prefix = this.prefix;
            ret.housenum = this.housenum;
            ret.type = this.type;
            ret.subnum = this.subnum;
            ret.surfix = this.surfix;
            ret.estab = this.estab;
            ret.building = this.building;
            ret.floor = this.floor;
            ret.unit = this.unit;
            ret.room = this.room;
            ret.addons = this.addons;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return AgentPoiAddress;
}(_DataModel3.default);

exports.default = AgentPoiAddress;

/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 代理点平台联系方式数据模型的基类
 */
var AgentPoiContact = function (_DataModel) {
    _inherits(AgentPoiContact, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function AgentPoiContact(data, options) {
        _classCallCheck(this, AgentPoiContact);

        var _this = _possibleConstructorReturn(this, (AgentPoiContact.__proto__ || Object.getPrototypeOf(AgentPoiContact)).call(this, data, options));

        _this.geoLiveType = 'AGENT_CONTACT';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(AgentPoiContact, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.poiPid = data.poiPid || 0;
            this.contactType = data.contactType || 1;
            this.contact = data.contact || null;
            this.contactDepart = data.contactDepart || 0;
            this.priority = data.priority || 1;
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.poiPid = this.poiPid;
            ret.contactType = this.contactType;
            ret.contact = this.contact;
            ret.contactDepart = this.contactDepart;
            ret.priority = this.priority;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return AgentPoiContact;
}(_DataModel3.default);

exports.default = AgentPoiContact;

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 代理点平台poi名称数据模型的基类
 */
var AgentPoiName = function (_DataModel) {
    _inherits(AgentPoiName, _DataModel);

    /**
     * 对象初始化
     * @param  {object} data 接口返回的数据
     * @param  {object} options 附加配置
     * @return {undefined}
     */
    function AgentPoiName(data, options) {
        _classCallCheck(this, AgentPoiName);

        var _this = _possibleConstructorReturn(this, (AgentPoiName.__proto__ || Object.getPrototypeOf(AgentPoiName)).call(this, data, options));

        _this.geoLiveType = 'AGENT_NAME';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(AgentPoiName, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.pid;
            this.poiPid = data.poiPid || 0;
            this.nameGroupid = data.nameGroupid || 1;
            this.langCode = data.langCode;
            this.nameClass = data.nameClass || 1;
            this.nameType = data.nameType || 1;
            this.name = data.name || '';
            this.namePhonetic = data.namePhonetic || '';
            this.keywords = data.keywords || '';
            this.nidbPid = data.nidbPid || '';
            this.rowId = data.rowId || null;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.pid = this.pid;
            ret.poiPid = this.poiPid;
            ret.nameGroupid = this.nameGroupid;
            ret.langCode = this.langCode;
            ret.nameClass = this.nameClass;
            ret.nameType = this.nameType;
            ret.name = this.name;
            ret.namePhonetic = this.namePhonetic;
            ret.keywords = this.keywords;
            ret.nidbPid = this.nidbPid;
            ret.rowId = this.rowId;
            return ret;
        }
    }]);

    return AgentPoiName;
}(_DataModel3.default);

exports.default = AgentPoiName;

/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IxCheckResult = exports.CheckRule = undefined;

var _CheckRule = __webpack_require__(483);

var _CheckRule2 = _interopRequireDefault(_CheckRule);

var _IxCheckResult = __webpack_require__(484);

var _IxCheckResult2 = _interopRequireDefault(_IxCheckResult);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.CheckRule = _CheckRule2.default;
exports.IxCheckResult = _IxCheckResult2.default;

/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 检察规则模型
 */
var CheckRule = function (_DataModel) {
    _inherits(CheckRule, _DataModel);

    function CheckRule(data, options) {
        _classCallCheck(this, CheckRule);

        var _this = _possibleConstructorReturn(this, (CheckRule.__proto__ || Object.getPrototypeOf(CheckRule)).call(this, data, options));

        _this.dataModelType = 'CHECK_RULE';
        return _this;
    }
    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(CheckRule, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.severity = data.severity;
            this.ruleType = data.ruleType;
            this.ruleDesc = data.ruleDesc;
            this.ruleId = data.ruleId;
        }
        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.severity = this.severity;
            ret.ruleType = this.ruleTyep;
            ret.ruleDesc = this.ruleDesc;
            ret.ruleId = this.ruleId;
            return ret;
        }
    }]);

    return CheckRule;
}(_DataModel3.default);

exports.default = CheckRule;

/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataModel2 = __webpack_require__(11);

var _DataModel3 = _interopRequireDefault(_DataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI检查结果模型
 */
var IxCheckResult = function (_DataModel) {
    _inherits(IxCheckResult, _DataModel);

    function IxCheckResult(data, options) {
        _classCallCheck(this, IxCheckResult);

        var _this = _possibleConstructorReturn(this, (IxCheckResult.__proto__ || Object.getPrototypeOf(IxCheckResult)).call(this, data, options));

        _this.dataModelType = 'IX_CHECK_RESULT';
        return _this;
    }

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */


    _createClass(IxCheckResult, [{
        key: 'setAttributes',
        value: function setAttributes(data) {
            this.pid = data.id;
            this.ruleId = data.ruleid || '';
            this.geometry = data.geometry;
            this.information = data.information || '';
            this.rank = data.rank;
            this.targetsText = data.targets || '';
            this.targets = [];
            if (data.targets && data.targets.split(';').length > 0) {
                var list = data.targets.split(';');
                var temp = void 0;
                for (var i = 0; i < list.length; i++) {
                    temp = list[i].replace(/\[|]/g, '').split(',');
                    this.targets.push({
                        featType: temp[0].split('_').join(''),
                        pid: temp[1]
                    });
                }
            }
            this.worker = data.worker;
            this.createDate = data.create_date;
            this.updateDate = data.update_date;
            this.status = data.status;
            this.qaStatus = data.qa_status;
            this.qaWorker = data.qa_worker;
            // poi检查结果预留
            this.refFeatures = data.refFeatures || [];
            this.jobId = data.jobId;
        }

        /**
         * 模型转换函数，将前端数据模型转化为服务需要的数据库模型
         * @return {object} ret 前端传递给服务的参数数据
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var ret = {};
            ret.create_date = this.createDate;
            ret.geometry = this.geometry;
            ret.id = this.pid;
            ret.information = this.information;
            ret.rank = this.rank;
            ret.ruleid = this.ruleId;
            ret.targets = this.targetsText;
            ret.worker = this.worker;
            return ret;
        }
    }]);

    return IxCheckResult;
}(_DataModel3.default);

exports.default = IxCheckResult;

/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _PreTipFC = __webpack_require__(486);

Object.defineProperty(exports, 'PreTipFC', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_PreTipFC).default;
  }
});

var _Tip3DBranch = __webpack_require__(487);

Object.defineProperty(exports, 'Tip3DBranch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Tip3DBranch).default;
  }
});

var _TipADASLink = __webpack_require__(488);

Object.defineProperty(exports, 'TipADASLink', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipADASLink).default;
  }
});

var _TipADASNode = __webpack_require__(489);

Object.defineProperty(exports, 'TipADASNode', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipADASNode).default;
  }
});

var _TipAirPortFace = __webpack_require__(490);

Object.defineProperty(exports, 'TipAirPortFace', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipAirPortFace).default;
  }
});

var _TipAOIFace = __webpack_require__(491);

Object.defineProperty(exports, 'TipAOIFace', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipAOIFace).default;
  }
});

var _TipAOINode = __webpack_require__(492);

Object.defineProperty(exports, 'TipAOINode', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipAOINode).default;
  }
});

var _TipBanTrucksIn = __webpack_require__(493);

Object.defineProperty(exports, 'TipBanTrucksIn', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipBanTrucksIn).default;
  }
});

var _TipBorder = __webpack_require__(494);

Object.defineProperty(exports, 'TipBorder', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipBorder).default;
  }
});

var _TipBridge = __webpack_require__(495);

Object.defineProperty(exports, 'TipBridge', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipBridge).default;
  }
});

var _TipBUAFace = __webpack_require__(496);

Object.defineProperty(exports, 'TipBUAFace', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipBUAFace).default;
  }
});

var _TipBuildTimeChange = __webpack_require__(497);

Object.defineProperty(exports, 'TipBuildTimeChange', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipBuildTimeChange).default;
  }
});

var _TipBusDriveway = __webpack_require__(498);

Object.defineProperty(exports, 'TipBusDriveway', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipBusDriveway).default;
  }
});

var _TipBusLane = __webpack_require__(499);

Object.defineProperty(exports, 'TipBusLane', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipBusLane).default;
  }
});

var _TipBypath = __webpack_require__(500);

Object.defineProperty(exports, 'TipBypath', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipBypath).default;
  }
});

var _TipChargeOpenRoad = __webpack_require__(501);

Object.defineProperty(exports, 'TipChargeOpenRoad', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipChargeOpenRoad).default;
  }
});

var _TipConnect = __webpack_require__(502);

Object.defineProperty(exports, 'TipConnect', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipConnect).default;
  }
});

var _TipCrossLineOverpass = __webpack_require__(503);

Object.defineProperty(exports, 'TipCrossLineOverpass', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipCrossLineOverpass).default;
  }
});

var _TipCrossVoiceGuide = __webpack_require__(504);

Object.defineProperty(exports, 'TipCrossVoiceGuide', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipCrossVoiceGuide).default;
  }
});

var _TipDeletePropertyInProgress = __webpack_require__(505);

Object.defineProperty(exports, 'TipDeletePropertyInProgress', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipDeletePropertyInProgress).default;
  }
});

var _TipDeleteTag = __webpack_require__(506);

Object.defineProperty(exports, 'TipDeleteTag', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipDeleteTag).default;
  }
});

var _TipDirect = __webpack_require__(507);

Object.defineProperty(exports, 'TipDirect', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipDirect).default;
  }
});

var _TipDrivewayLimit = __webpack_require__(508);

Object.defineProperty(exports, 'TipDrivewayLimit', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipDrivewayLimit).default;
  }
});

var _TipDrivewayMount = __webpack_require__(509);

Object.defineProperty(exports, 'TipDrivewayMount', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipDrivewayMount).default;
  }
});

var _TipElectroniceye = __webpack_require__(510);

Object.defineProperty(exports, 'TipElectroniceye', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipElectroniceye).default;
  }
});

var _TipElevatedRoad = __webpack_require__(511);

Object.defineProperty(exports, 'TipElevatedRoad', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipElevatedRoad).default;
  }
});

var _TipGate = __webpack_require__(512);

Object.defineProperty(exports, 'TipGate', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipGate).default;
  }
});

var _TipGeneral = __webpack_require__(513);

Object.defineProperty(exports, 'TipGeneral', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipGeneral).default;
  }
});

var _TipGPSDot = __webpack_require__(514);

Object.defineProperty(exports, 'TipGPSDot', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipGPSDot).default;
  }
});

var _TipGSBranch = __webpack_require__(515);

Object.defineProperty(exports, 'TipGSBranch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipGSBranch).default;
  }
});

var _TipGSC = __webpack_require__(516);

Object.defineProperty(exports, 'TipGSC', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipGSC).default;
  }
});

var _TipHighSpeedEntrance = __webpack_require__(517);

Object.defineProperty(exports, 'TipHighSpeedEntrance', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipHighSpeedEntrance).default;
  }
});

var _TipHighway = __webpack_require__(518);

Object.defineProperty(exports, 'TipHighway', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipHighway).default;
  }
});

var _TipHighWayConnect = __webpack_require__(519);

Object.defineProperty(exports, 'TipHighWayConnect', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipHighWayConnect).default;
  }
});

var _TipICJCT = __webpack_require__(520);

Object.defineProperty(exports, 'TipICJCT', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipICJCT).default;
  }
});

var _TipJVCBranch = __webpack_require__(521);

Object.defineProperty(exports, 'TipJVCBranch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipJVCBranch).default;
  }
});

var _TipLaneChangePoint = __webpack_require__(522);

Object.defineProperty(exports, 'TipLaneChangePoint', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipLaneChangePoint).default;
  }
});

var _TipLaneConnexity = __webpack_require__(523);

Object.defineProperty(exports, 'TipLaneConnexity', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipLaneConnexity).default;
  }
});

var _TipLaneLimitWidthHeight = __webpack_require__(524);

Object.defineProperty(exports, 'TipLaneLimitWidthHeight', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipLaneLimitWidthHeight).default;
  }
});

var _TipLeftToRight = __webpack_require__(525);

Object.defineProperty(exports, 'TipLeftToRight', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipLeftToRight).default;
  }
});

var _TipLinks = __webpack_require__(526);

Object.defineProperty(exports, 'TipLinks', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipLinks).default;
  }
});

var _TipMaintenance = __webpack_require__(527);

Object.defineProperty(exports, 'TipMaintenance', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipMaintenance).default;
  }
});

var _TipMileagePeg = __webpack_require__(528);

Object.defineProperty(exports, 'TipMileagePeg', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipMileagePeg).default;
  }
});

var _TipMultiDigitized = __webpack_require__(529);

Object.defineProperty(exports, 'TipMultiDigitized', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipMultiDigitized).default;
  }
});

var _TipNarrowChannel = __webpack_require__(530);

Object.defineProperty(exports, 'TipNarrowChannel', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipNarrowChannel).default;
  }
});

var _TipNoCrossing = __webpack_require__(531);

Object.defineProperty(exports, 'TipNoCrossing', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipNoCrossing).default;
  }
});

var _TipNodeShift = __webpack_require__(532);

Object.defineProperty(exports, 'TipNodeShift', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipNodeShift).default;
  }
});

var _TipNoEntry = __webpack_require__(533);

Object.defineProperty(exports, 'TipNoEntry', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipNoEntry).default;
  }
});

var _TipNomalRestriction = __webpack_require__(534);

Object.defineProperty(exports, 'TipNomalRestriction', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipNomalRestriction).default;
  }
});

var _TipNormalCross = __webpack_require__(535);

Object.defineProperty(exports, 'TipNormalCross', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipNormalCross).default;
  }
});

var _TipNormalRoadSide = __webpack_require__(536);

Object.defineProperty(exports, 'TipNormalRoadSide', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipNormalRoadSide).default;
  }
});

var _TipObstacle = __webpack_require__(537);

Object.defineProperty(exports, 'TipObstacle', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipObstacle).default;
  }
});

var _TipOrientation = __webpack_require__(538);

Object.defineProperty(exports, 'TipOrientation', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipOrientation).default;
  }
});

var _TipOverBridge = __webpack_require__(539);

Object.defineProperty(exports, 'TipOverBridge', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipOverBridge).default;
  }
});

var _TipOverpass = __webpack_require__(540);

Object.defineProperty(exports, 'TipOverpass', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipOverpass).default;
  }
});

var _TipOverpassName = __webpack_require__(541);

Object.defineProperty(exports, 'TipOverpassName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipOverpassName).default;
  }
});

var _TipParkinglot = __webpack_require__(542);

Object.defineProperty(exports, 'TipParkinglot', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipParkinglot).default;
  }
});

var _TipPavementCover = __webpack_require__(543);

Object.defineProperty(exports, 'TipPavementCover', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipPavementCover).default;
  }
});

var _TipPedestrianStreet = __webpack_require__(544);

Object.defineProperty(exports, 'TipPedestrianStreet', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipPedestrianStreet).default;
  }
});

var _TipPOIRoad = __webpack_require__(545);

Object.defineProperty(exports, 'TipPOIRoad', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipPOIRoad).default;
  }
});

var _TipRailWay = __webpack_require__(546);

Object.defineProperty(exports, 'TipRailWay', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRailWay).default;
  }
});

var _TipRailwayCrossing = __webpack_require__(547);

Object.defineProperty(exports, 'TipRailwayCrossing', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRailwayCrossing).default;
  }
});

var _TipRamp = __webpack_require__(548);

Object.defineProperty(exports, 'TipRamp', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRamp).default;
  }
});

var _TipRealSign = __webpack_require__(549);

Object.defineProperty(exports, 'TipRealSign', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRealSign).default;
  }
});

var _TipRegionRoad = __webpack_require__(550);

Object.defineProperty(exports, 'TipRegionRoad', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRegionRoad).default;
  }
});

var _TipRepair = __webpack_require__(551);

Object.defineProperty(exports, 'TipRepair', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRepair).default;
  }
});

var _TipRestriction = __webpack_require__(552);

Object.defineProperty(exports, 'TipRestriction', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRestriction).default;
  }
});

var _TipReversibleLane = __webpack_require__(553);

Object.defineProperty(exports, 'TipReversibleLane', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipReversibleLane).default;
  }
});

var _TipRoadCross = __webpack_require__(554);

Object.defineProperty(exports, 'TipRoadCross', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRoadCross).default;
  }
});

var _TipRoadCrossProm = __webpack_require__(555);

Object.defineProperty(exports, 'TipRoadCrossProm', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRoadCrossProm).default;
  }
});

var _TipRoadDirection = __webpack_require__(556);

Object.defineProperty(exports, 'TipRoadDirection', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRoadDirection).default;
  }
});

var _TipRoadName = __webpack_require__(557);

Object.defineProperty(exports, 'TipRoadName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRoadName).default;
  }
});

var _TipRoadPA = __webpack_require__(558);

Object.defineProperty(exports, 'TipRoadPA', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRoadPA).default;
  }
});

var _TipRoadSA = __webpack_require__(559);

Object.defineProperty(exports, 'TipRoadSA', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRoadSA).default;
  }
});

var _TipRoadType = __webpack_require__(560);

Object.defineProperty(exports, 'TipRoadType', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRoadType).default;
  }
});

var _TipRoundabout = __webpack_require__(561);

Object.defineProperty(exports, 'TipRoundabout', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRoundabout).default;
  }
});

var _TipRoute = __webpack_require__(562);

Object.defineProperty(exports, 'TipRoute', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipRoute).default;
  }
});

var _TipScenicRoute = __webpack_require__(563);

Object.defineProperty(exports, 'TipScenicRoute', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipScenicRoute).default;
  }
});

var _TipSeasonalRoad = __webpack_require__(564);

Object.defineProperty(exports, 'TipSeasonalRoad', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipSeasonalRoad).default;
  }
});

var _TipSideRoad = __webpack_require__(565);

Object.defineProperty(exports, 'TipSideRoad', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipSideRoad).default;
  }
});

var _TipSketch = __webpack_require__(566);

Object.defineProperty(exports, 'TipSketch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipSketch).default;
  }
});

var _TipSlope = __webpack_require__(567);

Object.defineProperty(exports, 'TipSlope', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipSlope).default;
  }
});

var _TipNatureVoiceGuide = __webpack_require__(568);

Object.defineProperty(exports, 'TipNatureVoiceGuide', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipNatureVoiceGuide).default;
  }
});

var _TipSpecialTrafficType = __webpack_require__(569);

Object.defineProperty(exports, 'TipSpecialTrafficType', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipSpecialTrafficType).default;
  }
});

var _TipSpeedBump = __webpack_require__(570);

Object.defineProperty(exports, 'TipSpeedBump', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipSpeedBump).default;
  }
});

var _TipSpeedlimit = __webpack_require__(571);

Object.defineProperty(exports, 'TipSpeedlimit', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipSpeedlimit).default;
  }
});

var _TipStair = __webpack_require__(572);

Object.defineProperty(exports, 'TipStair', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipStair).default;
  }
});

var _TipTollGate = __webpack_require__(573);

Object.defineProperty(exports, 'TipTollGate', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipTollGate).default;
  }
});

var _TipTrafficSignal = __webpack_require__(574);

Object.defineProperty(exports, 'TipTrafficSignal', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipTrafficSignal).default;
  }
});

var _TipTrafficSignalDir = __webpack_require__(575);

Object.defineProperty(exports, 'TipTrafficSignalDir', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipTrafficSignalDir).default;
  }
});

var _TipTruckLimit = __webpack_require__(576);

Object.defineProperty(exports, 'TipTruckLimit', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipTruckLimit).default;
  }
});

var _TipTruckRestriction = __webpack_require__(577);

Object.defineProperty(exports, 'TipTruckRestriction', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipTruckRestriction).default;
  }
});

var _TipTruckSpeedLimit = __webpack_require__(578);

Object.defineProperty(exports, 'TipTruckSpeedLimit', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipTruckSpeedLimit).default;
  }
});

var _TipTunnel = __webpack_require__(579);

Object.defineProperty(exports, 'TipTunnel', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipTunnel).default;
  }
});

var _TipUnderpass = __webpack_require__(580);

Object.defineProperty(exports, 'TipUnderpass', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipUnderpass).default;
  }
});

var _TipUsageFeeRequired = __webpack_require__(581);

Object.defineProperty(exports, 'TipUsageFeeRequired', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipUsageFeeRequired).default;
  }
});

var _TipVariableDirectionLane = __webpack_require__(582);

Object.defineProperty(exports, 'TipVariableDirectionLane', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipVariableDirectionLane).default;
  }
});

var _TipVariableSpeed = __webpack_require__(583);

Object.defineProperty(exports, 'TipVariableSpeed', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipVariableSpeed).default;
  }
});

var _TipWarningInfo = __webpack_require__(584);

Object.defineProperty(exports, 'TipWarningInfo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_TipWarningInfo).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * FC 的前端数据模型
 */
var PreTipFC = function (_Tip) {
    _inherits(PreTipFC, _Tip);

    function PreTipFC() {
        _classCallCheck(this, PreTipFC);

        return _possibleConstructorReturn(this, (PreTipFC.__proto__ || Object.getPrototypeOf(PreTipFC)).apply(this, arguments));
    }

    _createClass(PreTipFC, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPFC';
            this.code = '8001'; // FC
            this.source.s_sourceType = '8001';
            if (data.deep) {
                this.deep = {
                    geo: data.deep.geo || '',
                    fc: data.deep.fc || ''
                };
            } else {
                this.deep = {
                    geo: '',
                    fc: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return PreTipFC;
}(_Tip3.default);

exports.default = PreTipFC;

/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 3d分歧 的前端数据模型
 */
var Tip3DBranch = function (_Tip) {
    _inherits(Tip3DBranch, _Tip);

    function Tip3DBranch() {
        _classCallCheck(this, Tip3DBranch);

        return _possibleConstructorReturn(this, (Tip3DBranch.__proto__ || Object.getPrototypeOf(Tip3DBranch)).apply(this, arguments));
    }

    _createClass(Tip3DBranch, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIP3DBRANCH';
            this.code = '1403'; // 3d分歧

            if (data.deep) {
                this.deep = {
                    brID: data.deep.brID || [],
                    in: data.deep.in || {},
                    agl: data.deep.agl || 0,
                    ptn: data.deep.ptn || '',
                    nId: data.deep.nId || 0,
                    o_array: data.deep.o_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
                for (var i = 0; i < this.deep.o_array.length; i++) {
                    if (this.deep.o_array[i].out.type === 1 && this.deep.o_array[i].out.id) {
                        this.deep.o_array[i].out.id = parseInt(this.deep.o_array[i].out.id, 10);
                    }
                }
            } else {
                this.deep = {
                    brID: [{
                        id: '',
                        sq: 0
                    }],
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    ptn: '',
                    nId: 0,
                    o_array: [{
                        sq: 0,
                        out: {
                            id: '',
                            type: 1
                        }
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return Tip3DBranch;
}(_Tip3.default);

exports.default = Tip3DBranch;

/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ADAS测线 的前端数据模型
 */
var TipADASLink = function (_Tip) {
    _inherits(TipADASLink, _Tip);

    function TipADASLink() {
        _classCallCheck(this, TipADASLink);

        return _possibleConstructorReturn(this, (TipADASLink.__proto__ || Object.getPrototypeOf(TipADASLink)).apply(this, arguments));
    }

    _createClass(TipADASLink, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPADASLINK';
            this.code = '2002'; // ADAS测线

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    geo: data.deep.geo || {},
                    prj: data.deep.prj || '',
                    sTime: data.deep.sTime || '',
                    eTime: data.deep.eTime || '',
                    time: data.deep.time || [],
                    link: data.deep.link || []
                };
            } else {
                this.deep = {
                    id: '',
                    geo: {},
                    prj: '',
                    sTime: '',
                    eTime: '',
                    time: [],
                    link: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipADASLink;
}(_Tip3.default);

exports.default = TipADASLink;

/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ADAS打点 的前端数据模型
 */
var TipADASNode = function (_Tip) {
    _inherits(TipADASNode, _Tip);

    function TipADASNode() {
        _classCallCheck(this, TipADASNode);

        return _possibleConstructorReturn(this, (TipADASNode.__proto__ || Object.getPrototypeOf(TipADASNode)).apply(this, arguments));
    }

    _createClass(TipADASNode, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPADASNODE';
            this.code = '1708'; // ADAS打点

            if (data.deep) {
                this.deep = {
                    prj: data.deep.prj || '',
                    time: data.deep.time || 0,
                    tp: data.deep.tp || 1
                };
            } else {
                this.deep = {
                    prj: '',
                    time: 0,
                    tp: 1
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipADASNode;
}(_Tip3.default);

exports.default = TipADASNode;

/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 机场功能面 的前端数据模型
 */
var TipAirPortFace = function (_Tip) {
    _inherits(TipAirPortFace, _Tip);

    function TipAirPortFace() {
        _classCallCheck(this, TipAirPortFace);

        return _possibleConstructorReturn(this, (TipAirPortFace.__proto__ || Object.getPrototypeOf(TipAirPortFace)).apply(this, arguments));
    }

    _createClass(TipAirPortFace, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPAIRPORTFACE';
            this.code = '8005'; // 机场功能面

            if (data.deep) {
                this.deep = {
                    geo: data.deep.geo || {},
                    kind: data.deep.kind || 1
                };
            } else {
                this.deep = {
                    geo: {},
                    kind: 1
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipAirPortFace;
}(_Tip3.default);

exports.default = TipAirPortFace;

/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * AOI面 的前端数据模型
 */
var TipAOIFace = function (_Tip) {
    _inherits(TipAOIFace, _Tip);

    function TipAOIFace() {
        _classCallCheck(this, TipAOIFace);

        return _possibleConstructorReturn(this, (TipAOIFace.__proto__ || Object.getPrototypeOf(TipAOIFace)).apply(this, arguments));
    }

    _createClass(TipAOIFace, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPAOIFACE';
            this.code = '8007'; // AOI面

            if (data.deep) {
                this.deep = {
                    geo: data.deep.geo || {}
                };
            } else {
                this.deep = {
                    geo: {}
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipAOIFace;
}(_Tip3.default);

exports.default = TipAOIFace;

/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * AOI代表点 的前端数据模型
 */
var TipAOINode = function (_Tip) {
    _inherits(TipAOINode, _Tip);

    function TipAOINode() {
        _classCallCheck(this, TipAOINode);

        return _possibleConstructorReturn(this, (TipAOINode.__proto__ || Object.getPrototypeOf(TipAOINode)).apply(this, arguments));
    }

    _createClass(TipAOINode, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPAOINODE';
            this.code = '8008'; // AOI代表点

            if (data.deep) {
                this.deep = {
                    name: data.deep.name || '',
                    eng: data.deep.eng || '',
                    extend: data.deep.extend || ''
                };
            } else {
                this.deep = {
                    name: '',
                    eng: '',
                    extend: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipAOINode;
}(_Tip3.default);

exports.default = TipAOINode;

/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 禁止卡车驶入 的前端数据模型
 */
var TipBanTrucksIn = function (_Tip) {
    _inherits(TipBanTrucksIn, _Tip);

    function TipBanTrucksIn() {
        _classCallCheck(this, TipBanTrucksIn);

        return _possibleConstructorReturn(this, (TipBanTrucksIn.__proto__ || Object.getPrototypeOf(TipBanTrucksIn)).apply(this, arguments));
    }

    _createClass(TipBanTrucksIn, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPBANTRUCKSIN';
            this.code = '1308'; // 禁止卡车驶入

            if (data.deep) {
                this.deep = {
                    f: data.deep.f || {},
                    agl: data.deep.agl || 0,
                    rdDir: data.deep.rdDir || 0,
                    c_array: data.deep.c_array || []
                };
                if (this.deep.f.type === 1 && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    f: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    rdDir: 0,
                    c_array: [{
                        time: '',
                        trl: 0,
                        wt: 0,
                        ax: 0,
                        ac: 0,
                        out: 0
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipBanTrucksIn;
}(_Tip3.default);

exports.default = TipBanTrucksIn;

/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 接边 的前端数据模型
 */
var TipBorder = function (_Tip) {
    _inherits(TipBorder, _Tip);

    function TipBorder() {
        _classCallCheck(this, TipBorder);

        return _possibleConstructorReturn(this, (TipBorder.__proto__ || Object.getPrototypeOf(TipBorder)).apply(this, arguments));
    }

    _createClass(TipBorder, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPBORDER';
            this.code = '8002'; // 接边
            this.rowkey = data.rowkey;
            this.g_guide = data.guide || null;
            this.g_location = data.g_location || null;
            this.g_line = {
                type: 'MultiLineString',
                coordinates: []
            };
            if (data.feedback.f_array && data.feedback.f_array.length > 0) {
                this.feedback = this.deepCopy(data.feedback);
                for (var j = 0; j < data.feedback.f_array.length; j++) {
                    if (data.feedback.f_array[j].content instanceof Array) {
                        for (var i = 0; i < data.feedback.f_array[j].content.length; i++) {
                            var line = data.feedback.f_array[j].content[i].geo.coordinates;
                            this.g_line.coordinates.push(line);
                        }
                    } else {
                        this.memo = data.feedback.f_array[j].content;
                    }
                }
            }
            if (data.t_trackInfo) {
                this.t_trackInfo = this.deepCopy(data.t_trackInfo);
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.g_guide = this.g_guide;
            data.g_location = this.g_location;
            data.feedback = this.feedback;
            data.t_trackInfo = this.t_trackInfo;
            data.rowkey = this.rowkey;
            data.memo = this.memo;
            // data.code = this.code;
            // data.geoLiveType = this.geoLiveType;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.g_guide = this.g_guide;
            data.g_location = this.g_location;
            data.feedback = this.feedback;
            data.t_trackInfo = this.t_trackInfo;
            data.rowkey = this.rowkey;
            data.code = this.code;
            data.memo = this.memo;
            data.geoLiveType = this.geoLiveType;
            return data;
        }
    }]);

    return TipBorder;
}(_Tip3.default);

exports.default = TipBorder;

/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 桥 的前端数据模型
 */
var TipBridge = function (_Tip) {
    _inherits(TipBridge, _Tip);

    function TipBridge() {
        _classCallCheck(this, TipBridge);

        return _possibleConstructorReturn(this, (TipBridge.__proto__ || Object.getPrototypeOf(TipBridge)).apply(this, arguments));
    }

    _createClass(TipBridge, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPBRIDGE';
            this.code = '1510'; // 桥
            this.source.s_sourceType = '1510';
            if (data.deep) {
                this.deep = {
                    name: data.deep.name || '',
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    name: '',
                    gSLoc: {},
                    gELoc: {},
                    f_array: []
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f_array) {
                for (var i = 0; i < data.deep.f_array.length; i++) {
                    data.deep.f_array[i].id = data.deep.f_array[i].id.toString();
                }
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipBridge;
}(_Tip3.default);

exports.default = TipBridge;

/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * BUA 的前端数据模型
 */
var TipBUAFace = function (_Tip) {
    _inherits(TipBUAFace, _Tip);

    function TipBUAFace() {
        _classCallCheck(this, TipBUAFace);

        return _possibleConstructorReturn(this, (TipBUAFace.__proto__ || Object.getPrototypeOf(TipBUAFace)).apply(this, arguments));
    }

    _createClass(TipBUAFace, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPBUAFACE';
            this.code = '8010'; // BUA

            if (data.deep) {
                this.deep = {
                    geo: data.deep.geo || {},
                    name: data.deep.name || ''
                };
            } else {
                this.deep = {
                    geo: {},
                    name: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipBUAFace;
}(_Tip3.default);

exports.default = TipBUAFace;

/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 在建时间变更 的前端数据模型
 */
var TipBuildTimeChange = function (_Tip) {
    _inherits(TipBuildTimeChange, _Tip);

    function TipBuildTimeChange() {
        _classCallCheck(this, TipBuildTimeChange);

        return _possibleConstructorReturn(this, (TipBuildTimeChange.__proto__ || Object.getPrototypeOf(TipBuildTimeChange)).apply(this, arguments));
    }

    _createClass(TipBuildTimeChange, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPBUILDTIMECHANGE';
            this.code = '1520'; // 在建时间变更
            this.source.s_sourceType = '1520';
            if (data.deep) {
                this.deep = {
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: [],
                    time: data.deep.time || ''
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    gSLoc: {},
                    gELoc: {},
                    f_array: [],
                    time: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f_array) {
                for (var i = 0; i < data.deep.f_array.length; i++) {
                    data.deep.f_array[i].id = data.deep.f_array[i].id.toString();
                }
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipBuildTimeChange;
}(_Tip3.default);

exports.default = TipBuildTimeChange;

/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 公交车道 的前端数据模型
 */
var TipBusDriveway = function (_Tip) {
    _inherits(TipBusDriveway, _Tip);

    function TipBusDriveway() {
        _classCallCheck(this, TipBusDriveway);

        return _possibleConstructorReturn(this, (TipBusDriveway.__proto__ || Object.getPrototypeOf(TipBusDriveway)).apply(this, arguments));
    }

    _createClass(TipBusDriveway, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPBUSDRIVEWAY';
            this.code = '1310'; // 公交车道

            if (data.deep) {
                this.deep = {
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    agl: data.deep.agl || 0,
                    ln: data.deep.ln || [],
                    f_array: data.deep.f_array || []
                };

                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }

                for (var m = 0; m < this.deep.ln.length; m++) {
                    for (var j = 0; j < this.deep.ln[m].o_array.length; j++) {
                        if (this.deep.ln[m].o_array[j].type === 1 && this.deep.ln[m].o_array[j].id) {
                            this.deep.ln[m].o_array[j].id = parseInt(this.deep.ln[m].o_array[j].id, 10);
                        }
                    }
                }
            } else {
                this.deep = {
                    gSLoc: {},
                    gELoc: {},
                    agl: 0,
                    ln: [{
                        bus: 0,
                        time: '',
                        o_array: [{
                            id: '',
                            type: 1,
                            num: 0,
                            geo: {}
                        }]
                    }],
                    f_array: [{
                        id: '',
                        type: 1,
                        flag: '0'
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipBusDriveway;
}(_Tip3.default);

exports.default = TipBusDriveway;

/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 公交专用车道 的前端数据模型
 */
var TipBusLane = function (_Tip) {
    _inherits(TipBusLane, _Tip);

    function TipBusLane() {
        _classCallCheck(this, TipBusLane);

        return _possibleConstructorReturn(this, (TipBusLane.__proto__ || Object.getPrototypeOf(TipBusLane)).apply(this, arguments));
    }

    _createClass(TipBusLane, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPBUSLANE';
            this.code = '1508'; // 公交专用车道
            this.source.s_sourceType = '1508';
            if (data.deep) {
                this.deep = {
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    gSLoc: {},
                    gELoc: {},
                    f_array: []
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f_array) {
                for (var i = 0; i < data.deep.f_array.length; i++) {
                    data.deep.f_array[i].id = data.deep.f_array[i].id.toString();
                }
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipBusLane;
}(_Tip3.default);

exports.default = TipBusLane;

/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 私道 的前端数据模型
 */
var TipBypath = function (_Tip) {
    _inherits(TipBypath, _Tip);

    function TipBypath() {
        _classCallCheck(this, TipBypath);

        return _possibleConstructorReturn(this, (TipBypath.__proto__ || Object.getPrototypeOf(TipBypath)).apply(this, arguments));
    }

    _createClass(TipBypath, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPBYPATH';
            this.code = '1506'; // 私道

            if (data.deep) {
                this.deep = {
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    gSLoc: {},
                    gELoc: {},
                    f_array: [{
                        id: '',
                        type: 1,
                        flag: '0'
                    }]
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipBypath;
}(_Tip3.default);

exports.default = TipBypath;

/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 收费开放道路 的前端数据模型
 */
var TipChargeOpenRoad = function (_Tip) {
    _inherits(TipChargeOpenRoad, _Tip);

    function TipChargeOpenRoad() {
        _classCallCheck(this, TipChargeOpenRoad);

        return _possibleConstructorReturn(this, (TipChargeOpenRoad.__proto__ || Object.getPrototypeOf(TipChargeOpenRoad)).apply(this, arguments));
    }

    _createClass(TipChargeOpenRoad, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPCHARGEOPENROAD';
            this.code = '1606'; // 收费开放道路

            if (data.deep) {
                this.deep = {
                    geo: data.deep.geo || {},
                    f_array: data.deep.f_array || []
                };

                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    geo: {},
                    f_array: [{
                        id: '',
                        type: 1,
                        geoF: {}
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipChargeOpenRoad;
}(_Tip3.default);

exports.default = TipChargeOpenRoad;

/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 挂接 的前端数据模型
 */
var TipConnect = function (_Tip) {
    _inherits(TipConnect, _Tip);

    function TipConnect() {
        _classCallCheck(this, TipConnect);

        return _possibleConstructorReturn(this, (TipConnect.__proto__ || Object.getPrototypeOf(TipConnect)).apply(this, arguments));
    }

    _createClass(TipConnect, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPCONNECT';
            this.code = '1803'; // 挂接
            this.source.s_sourceType = '1803';
            if (data.deep) {
                this.deep = {
                    agl: data.deep.agl || 0.0,
                    pcd: data.deep.pcd || '',
                    tp: data.deep.tp || 1
                };
            } else {
                this.deep = {
                    agl: 0.0,
                    pcd: '1803_2081_0',
                    tp: 1
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipConnect;
}(_Tip3.default);

exports.default = TipConnect;

/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 跨线立交桥 的前端数据模型
 */
var TipCrossLineOverpass = function (_Tip) {
    _inherits(TipCrossLineOverpass, _Tip);

    function TipCrossLineOverpass() {
        _classCallCheck(this, TipCrossLineOverpass);

        return _possibleConstructorReturn(this, (TipCrossLineOverpass.__proto__ || Object.getPrototypeOf(TipCrossLineOverpass)).apply(this, arguments));
    }

    _createClass(TipCrossLineOverpass, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPCROSSLINEOVERPASS';
            this.code = '1509'; // 跨线立交桥

            if (data.deep) {
                this.deep = {
                    name: data.deep.name || '',
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: data.deep.f_array || []
                };
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    name: '',
                    gSLoc: {},
                    gELoc: {},
                    f_array: [{
                        id: '',
                        type: 1,
                        flag: '0'
                    }]
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipCrossLineOverpass;
}(_Tip3.default);

exports.default = TipCrossLineOverpass;

/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 路口语音引导 的前端数据模型
 */
var TipCrossVoiceGuide = function (_Tip) {
    _inherits(TipCrossVoiceGuide, _Tip);

    function TipCrossVoiceGuide() {
        _classCallCheck(this, TipCrossVoiceGuide);

        return _possibleConstructorReturn(this, (TipCrossVoiceGuide.__proto__ || Object.getPrototypeOf(TipCrossVoiceGuide)).apply(this, arguments));
    }

    _createClass(TipCrossVoiceGuide, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPCROSSVOICEGUIDE';
            this.code = '1306'; // 路口语音引导

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    in: data.deep.in || {},
                    agl: data.deep.agl || 0,
                    info: data.deep.info || [],
                    nId: data.deep.nId || 0,
                    o_array: data.deep.o_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
                for (var i = 0; i < this.deep.o_array.length; i++) {
                    for (var j = 0; j < this.deep.o_array[i].out.length; j++) {
                        if (this.deep.o_array[i].out[j].type === 1 && this.deep.o_array[i].out[j].id) {
                            this.deep.o_array[i].out[j].id = parseInt(this.deep.o_array[i].out[j].id, 10);
                        }
                    }
                }
            } else {
                this.deep = {
                    id: '',
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    info: [{
                        info: 0,
                        sq: 0
                    }],
                    nId: 0,
                    o_array: [{
                        sq: 0,
                        out: [{
                            id: '',
                            type: 1,
                            num: 0,
                            geo: {}
                        }],
                        oInfo: 0
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipCrossVoiceGuide;
}(_Tip3.default);

exports.default = TipCrossVoiceGuide;

/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 删除在建属性 的前端数据模型
 */
var TipDeletePropertyInProgress = function (_Tip) {
    _inherits(TipDeletePropertyInProgress, _Tip);

    function TipDeletePropertyInProgress() {
        _classCallCheck(this, TipDeletePropertyInProgress);

        return _possibleConstructorReturn(this, (TipDeletePropertyInProgress.__proto__ || Object.getPrototypeOf(TipDeletePropertyInProgress)).apply(this, arguments));
    }

    _createClass(TipDeletePropertyInProgress, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPDELETEPROPERTYINPROGRESS';
            this.code = '1214'; // 删除在建属性

            if (data.deep) {
                this.deep = {
                    f: {}
                };
                if (data.deep.f) {
                    this.deep.f = data.deep.f;
                    if (this.deep.f.type === 1 && this.deep.f.id) {
                        this.deep.f.id = parseInt(this.deep.f.id, 10);
                    }
                }
            } else {
                this.deep = {
                    f: {}
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f.id) {
                data.deep.f.id = data.deep.f.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipDeletePropertyInProgress;
}(_Tip3.default);

exports.default = TipDeletePropertyInProgress;

/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 删除标记 的前端数据模型
 */
var TipDeleteTag = function (_Tip) {
    _inherits(TipDeleteTag, _Tip);

    function TipDeleteTag() {
        _classCallCheck(this, TipDeleteTag);

        return _possibleConstructorReturn(this, (TipDeleteTag.__proto__ || Object.getPrototypeOf(TipDeleteTag)).apply(this, arguments));
    }

    _createClass(TipDeleteTag, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPDELETETAG';
            this.code = '2101'; // 删除标记
            this.source.s_sourceType = '2101';
            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    f: {}
                };
                if (data.deep.f) {
                    this.deep.f = data.deep.f;
                    if (this.deep.f.type === 1 && this.deep.f.id) {
                        this.deep.f.id = parseInt(this.deep.f.id, 10);
                    }
                }
            } else {
                this.deep = {
                    id: '',
                    f: {}
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f.id) {
                data.deep.f.id = data.deep.f.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipDeleteTag;
}(_Tip3.default);

exports.default = TipDeleteTag;

/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 顺行 的前端数据模型
 */
var TipDirect = function (_Tip) {
    _inherits(TipDirect, _Tip);

    function TipDirect() {
        _classCallCheck(this, TipDirect);

        return _possibleConstructorReturn(this, (TipDirect.__proto__ || Object.getPrototypeOf(TipDirect)).apply(this, arguments));
    }

    _createClass(TipDirect, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPDIRECT';
            this.code = '1804'; // 顺行

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    in: data.deep.in || {},
                    nId: data.deep.nId || 0,
                    out: data.deep.out || {},
                    agl: data.deep.agl || 0
                };
            } else {
                this.deep = {
                    id: '',
                    in: {
                        id: '',
                        type: 1
                    },
                    nId: 0,
                    out: {
                        id: '',
                        type: 1
                    },
                    agl: 0
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipDirect;
}(_Tip3.default);

exports.default = TipDirect;

/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 车道限速 的前端数据模型
 */
var TipDrivewayLimit = function (_Tip) {
    _inherits(TipDrivewayLimit, _Tip);

    function TipDrivewayLimit() {
        _classCallCheck(this, TipDrivewayLimit);

        return _possibleConstructorReturn(this, (TipDrivewayLimit.__proto__ || Object.getPrototypeOf(TipDrivewayLimit)).apply(this, arguments));
    }

    _createClass(TipDrivewayLimit, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPDRIVEWAYLIMIT';
            this.code = '1113'; // 车道限速 *

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    f: data.deep.f || {},
                    agl: data.deep.agl || 0,
                    rdDir: data.deep.rdDir || 0,
                    value: data.deep.value || []
                };
                if (this.deep.f.type === 1 && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    id: '',
                    f: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    rdDir: 0,
                    value: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipDrivewayLimit;
}(_Tip3.default);

exports.default = TipDrivewayLimit;

/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 车道数 的前端数据模型
 */
var TipDrivewayMount = function (_Tip) {
    _inherits(TipDrivewayMount, _Tip);

    function TipDrivewayMount() {
        _classCallCheck(this, TipDrivewayMount);

        return _possibleConstructorReturn(this, (TipDrivewayMount.__proto__ || Object.getPrototypeOf(TipDrivewayMount)).apply(this, arguments));
    }

    _createClass(TipDrivewayMount, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPDRIVEWAYMOUNT';
            this.code = '1202'; // 车道数
            this.source.s_sourceType = '1202';
            if (data.deep) {
                this.deep = {
                    f: {},
                    num: data.deep.num || 1,
                    side: data.deep.side || 0
                };
                if (this.deep.f) {
                    this.deep.f = data.deep.f;
                    if (this.deep.f.type === 1 && this.deep.f.id) {
                        this.deep.f.id = parseInt(this.deep.f.id, 10);
                    }
                }
            } else {
                this.deep = {
                    f: {},
                    num: 1,
                    side: 0
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f.id) {
                data.deep.f.id = data.deep.f.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipDrivewayMount;
}(_Tip3.default);

exports.default = TipDrivewayMount;

/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 电子眼 的前端数据模型
 */
var TipElectroniceye = function (_Tip) {
    _inherits(TipElectroniceye, _Tip);

    function TipElectroniceye() {
        _classCallCheck(this, TipElectroniceye);

        return _possibleConstructorReturn(this, (TipElectroniceye.__proto__ || Object.getPrototypeOf(TipElectroniceye)).apply(this, arguments));
    }

    _createClass(TipElectroniceye, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPELECTRONICEYE';
            this.code = '1109'; // 电子眼

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    f: data.deep.f || {},
                    agl: data.deep.agl || 0,
                    rdDir: data.deep.rdDir || 0,
                    tp: data.deep.tp || 1,
                    loc: data.deep.loc || 0,
                    value: data.deep.value || 0,
                    pair: data.deep.pair || '',
                    thrd: data.deep.thrd || 0
                };
                if (this.deep.f.type === 1 && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    id: '',
                    f: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    rdDir: 0,
                    tp: 1,
                    loc: 0,
                    value: 0,
                    pair: '',
                    thrd: 0
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipElectroniceye;
}(_Tip3.default);

exports.default = TipElectroniceye;

/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 高架路 的前端数据模型
 */
var TipElevatedRoad = function (_Tip) {
    _inherits(TipElevatedRoad, _Tip);

    function TipElevatedRoad() {
        _classCallCheck(this, TipElevatedRoad);

        return _possibleConstructorReturn(this, (TipElevatedRoad.__proto__ || Object.getPrototypeOf(TipElevatedRoad)).apply(this, arguments));
    }

    _createClass(TipElevatedRoad, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPELEVATEDROAD';
            this.code = '1503'; // 高架路

            if (data.deep) {
                this.deep = {
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    gSLoc: {},
                    gELoc: {},
                    f_array: [{
                        id: '',
                        type: 1,
                        flag: '0'
                    }]
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipElevatedRoad;
}(_Tip3.default);

exports.default = TipElevatedRoad;

/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 大门 的前端数据模型
 */
var TipGate = function (_Tip) {
    _inherits(TipGate, _Tip);

    function TipGate() {
        _classCallCheck(this, TipGate);

        return _possibleConstructorReturn(this, (TipGate.__proto__ || Object.getPrototypeOf(TipGate)).apply(this, arguments));
    }

    _createClass(TipGate, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPGATE';
            this.code = '1104'; // 大门 *

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    in: data.deep.in || {},
                    nId: data.deep.nId || 0,
                    out: data.deep.out || {},
                    agl: data.deep.agl || 0,
                    tp: data.deep.tp || 0,
                    dir: data.deep.dir || 0,
                    c_array: data.deep.c_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
                if (this.deep.out.type === 1 && this.deep.out.id) {
                    this.deep.out.id = parseInt(this.deep.out.id, 10);
                }
            } else {
                this.deep = {
                    id: '',
                    in: {
                        id: '',
                        type: 1
                    },
                    nId: 0,
                    out: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    tp: 0,
                    dir: 0,
                    c_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipGate;
}(_Tip3.default);

exports.default = TipGate;

/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 万能标记 的前端数据模型
 */
var TipGeneral = function (_Tip) {
  _inherits(TipGeneral, _Tip);

  function TipGeneral() {
    _classCallCheck(this, TipGeneral);

    return _possibleConstructorReturn(this, (TipGeneral.__proto__ || Object.getPrototypeOf(TipGeneral)).apply(this, arguments));
  }

  _createClass(TipGeneral, [{
    key: 'setAttributes',

    /**
     * 模型转换主函数，将接口返回的数据转换为前端数据模型
     * @param  {object} data 接口返回的数据
     * @return {undefined}
     */
    value: function setAttributes(data) {
      this.geoLiveType = 'TIPGENERAL';
      this.code = '2102'; // 万能标记
      this.source.s_sourceType = '2102';
    }
    /**
     * 将前端数据模型还原为接口数据模型
     * @return {Object} 接口数据模型
     */

  }, {
    key: 'getIntegrate',
    value: function getIntegrate() {
      var data = this.deepCopy(this);
      return data;
    }
    /**
     * 获取对象概要属性信息
     * @return {Object} 概要属性对象
     */

  }, {
    key: 'getSnapShot',
    value: function getSnapShot() {
      var data = {};
      return data;
    }
  }]);

  return TipGeneral;
}(_Tip3.default);

exports.default = TipGeneral;

/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * GPS打点 的前端数据模型
 */
var TipGPSDot = function (_Tip) {
    _inherits(TipGPSDot, _Tip);

    function TipGPSDot() {
        _classCallCheck(this, TipGPSDot);

        return _possibleConstructorReturn(this, (TipGPSDot.__proto__ || Object.getPrototypeOf(TipGPSDot)).apply(this, arguments));
    }

    _createClass(TipGPSDot, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPGPSDOT';
            this.code = '1706'; // GPS打点
            this.source.s_sourceType = '1706';
            if (data.deep && data.deep.f) {
                this.deep = {
                    f: {
                        id: data.deep.f.id || '',
                        type: data.deep.f.type || 1
                    }
                };
                if ((this.deep.f.type === 1 || this.deep.f.type === 3) && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    f: {}
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f.id) {
                data.deep.f.id = data.deep.f.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipGPSDot;
}(_Tip3.default);

exports.default = TipGPSDot;

/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 高速分歧 的前端数据模型
 */
var TipGSBranch = function (_Tip) {
    _inherits(TipGSBranch, _Tip);

    function TipGSBranch() {
        _classCallCheck(this, TipGSBranch);

        return _possibleConstructorReturn(this, (TipGSBranch.__proto__ || Object.getPrototypeOf(TipGSBranch)).apply(this, arguments));
    }

    _createClass(TipGSBranch, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPGSBRANCH';
            this.code = '1407'; // 高速分歧

            if (data.deep) {
                this.deep = {
                    brID: data.deep.brID || [],
                    in: data.deep.in || {},
                    agl: data.deep.agl || 0,
                    ptn: data.deep.ptn || '',
                    info: data.deep.info || [],
                    nId: data.deep.nId || 0,
                    o_array: data.deep.o_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
                for (var i = 0; i < this.deep.o_array.length; i++) {
                    if (this.deep.o_array[i].out.type === 1 && this.deep.o_array[i].out.id) {
                        this.deep.o_array[i].out.id = parseInt(this.deep.o_array[i].out.id, 10);
                    }
                }
            } else {
                this.deep = {
                    brID: [{
                        id: '',
                        sq: 0
                    }],
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    ptn: '',
                    info: [{
                        sq: 0,
                        arw: '',
                        exit: '',
                        n_array: []
                    }],
                    nId: 0,
                    o_array: [{
                        sq: 0,
                        out: {
                            id: '',
                            type: 1,
                            num: 0,
                            geo: {}
                        },
                        arw: '',
                        exit: '',
                        n_array: []
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipGSBranch;
}(_Tip3.default);

exports.default = TipGSBranch;

/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 立交 的前端数据模型
 */
var TipGSC = function (_Tip) {
    _inherits(TipGSC, _Tip);

    function TipGSC() {
        _classCallCheck(this, TipGSC);

        return _possibleConstructorReturn(this, (TipGSC.__proto__ || Object.getPrototypeOf(TipGSC)).apply(this, arguments));
    }

    _createClass(TipGSC, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPGSC';
            this.code = '1116'; // 立交
            this.source.s_sourceType = '1116';
            if (data.deep) {
                this.deep = {
                    f_array: data.deep.f_array || []
                };
                for (var i = 0, len = this.deep.f_array.length; i < len; i++) {
                    if ((this.deep.f_array[i].type === 1 || this.deep.f_array[i].type === 3) && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    f_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f_array) {
                for (var i = 0; i < data.deep.f_array.length; i++) {
                    data.deep.f_array[i].id = data.deep.f_array[i].id.toString();
                }
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipGSC;
}(_Tip3.default);

exports.default = TipGSC;

/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 高速入口模式图 的前端数据模型
 */
var TipHighSpeedEntrance = function (_Tip) {
    _inherits(TipHighSpeedEntrance, _Tip);

    function TipHighSpeedEntrance() {
        _classCallCheck(this, TipHighSpeedEntrance);

        return _possibleConstructorReturn(this, (TipHighSpeedEntrance.__proto__ || Object.getPrototypeOf(TipHighSpeedEntrance)).apply(this, arguments));
    }

    _createClass(TipHighSpeedEntrance, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPHIGHSPEEDENTRANCE';
            this.code = '1410'; // 高速入口模式图

            if (data.deep) {
                this.deep = {
                    brID: data.deep.brID || [],
                    in: data.deep.in || {},
                    agl: data.deep.agl || 0,
                    ptn: data.deep.ptn || '',
                    nId: data.deep.nId || 0,
                    o_array: data.deep.o_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
                for (var i = 0; i < this.deep.o_array.length; i++) {
                    if (this.deep.o_array[i].out.type === 1 && this.deep.o_array[i].out.id) {
                        this.deep.o_array[i].out.id = parseInt(this.deep.o_array[i].out.id, 10);
                    }
                }
            } else {
                this.deep = {
                    brID: [{
                        id: '',
                        sq: 0
                    }],
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    ptn: '',
                    nId: 0,
                    o_array: [{
                        sq: 0,
                        out: {
                            id: '',
                            type: 1
                        }
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipHighSpeedEntrance;
}(_Tip3.default);

exports.default = TipHighSpeedEntrance;

/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Highway道路名 的前端数据模型
 */
var TipHighway = function (_Tip) {
    _inherits(TipHighway, _Tip);

    function TipHighway() {
        _classCallCheck(this, TipHighway);

        return _possibleConstructorReturn(this, (TipHighway.__proto__ || Object.getPrototypeOf(TipHighway)).apply(this, arguments));
    }

    _createClass(TipHighway, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPHIGHWAY';
            this.code = '8006'; // Highway道路名

            if (data.deep) {
                this.deep = {
                    geo: data.deep.geo || {},
                    name: data.deep.name || ''
                };
            } else {
                this.deep = {
                    geo: {},
                    name: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipHighway;
}(_Tip3.default);

exports.default = TipHighway;

/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 高速连接路 的前端数据模型
 */
var TipHighWayConnect = function (_Tip) {
    _inherits(TipHighWayConnect, _Tip);

    function TipHighWayConnect() {
        _classCallCheck(this, TipHighWayConnect);

        return _possibleConstructorReturn(this, (TipHighWayConnect.__proto__ || Object.getPrototypeOf(TipHighWayConnect)).apply(this, arguments));
    }

    _createClass(TipHighWayConnect, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPHIGHWAYCONNECT';
            this.code = '1211'; // 高速连接路
            this.source.s_sourceType = '1211';
            if (data.deep) {
                this.deep = {
                    f: data.deep.f || {},
                    tp: data.deep.tp || 1
                };
                if (data.deep.f) {
                    this.deep.f = data.deep.f;
                    if (this.deep.f.type === 1 && this.deep.f.id) {
                        this.deep.f.id = parseInt(this.deep.f.id, 10);
                    }
                }
            } else {
                this.deep = {
                    f: {},
                    tp: 1
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f.id) {
                data.deep.f.id = data.deep.f.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipHighWayConnect;
}(_Tip3.default);

exports.default = TipHighWayConnect;

/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ICJCT 的前端数据模型
 */
var TipICJCT = function (_Tip) {
    _inherits(TipICJCT, _Tip);

    function TipICJCT() {
        _classCallCheck(this, TipICJCT);

        return _possibleConstructorReturn(this, (TipICJCT.__proto__ || Object.getPrototypeOf(TipICJCT)).apply(this, arguments));
    }

    _createClass(TipICJCT, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'ICJCT';
            this.code = '1211'; // ICJCT
            this.source.s_sourceType = '1211';
            if (data.deep) {
                this.deep = {
                    f: {},
                    tp: data.deep.tp || 1
                };
                if (this.deep.f) {
                    this.deep.f = data.deep.f;
                }
            } else {
                this.deep = {
                    f: {
                        id: '',
                        type: 1
                    },
                    tp: 1
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipICJCT;
}(_Tip3.default);

exports.default = TipICJCT;

/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 实景图 的前端数据模型
 */
var TipJVCBranch = function (_Tip) {
    _inherits(TipJVCBranch, _Tip);

    function TipJVCBranch() {
        _classCallCheck(this, TipJVCBranch);

        return _possibleConstructorReturn(this, (TipJVCBranch.__proto__ || Object.getPrototypeOf(TipJVCBranch)).apply(this, arguments));
    }

    _createClass(TipJVCBranch, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPJVCBRANCH';
            this.code = '1406'; // 实景图

            if (data.deep) {
                this.deep = {
                    brID: data.deep.brID || [],
                    in: data.deep.in || {},
                    agl: data.deep.agl || 0,
                    ptn: data.deep.ptn || '',
                    tp: data.deep.tp || 2,
                    nId: data.deep.nId || 0,
                    o_array: data.deep.o_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
                for (var i = 0; i < this.deep.o_array.length; i++) {
                    if (this.deep.o_array[i].out.type === 1 && this.deep.o_array[i].out.id) {
                        this.deep.o_array[i].out.id = parseInt(this.deep.o_array[i].out.id, 10);
                    }
                }
            } else {
                this.deep = {
                    brID: [{
                        id: '',
                        sq: 0
                    }],
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    ptn: '',
                    tp: 2,
                    nId: 0,
                    o_array: [{
                        sq: 0,
                        out: {
                            id: '',
                            type: 1,
                            num: 0,
                            geo: {}
                        }
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipJVCBranch;
}(_Tip3.default);

exports.default = TipJVCBranch;

/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 车道变化点 的前端数据模型
 */
var TipLaneChangePoint = function (_Tip) {
    _inherits(TipLaneChangePoint, _Tip);

    function TipLaneChangePoint() {
        _classCallCheck(this, TipLaneChangePoint);

        return _possibleConstructorReturn(this, (TipLaneChangePoint.__proto__ || Object.getPrototypeOf(TipLaneChangePoint)).apply(this, arguments));
    }

    _createClass(TipLaneChangePoint, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPLANECHANGEPOINT';
            this.code = '1115'; // 车道变化点

            if (data.deep) {
                this.deep = {
                    f: data.deep.f || {},
                    agl: data.deep.agl || 0,
                    inNum: data.deep.inNum || 0,
                    outNum: data.deep.outNum || 0,
                    inLink: data.deep.inLink || 0,
                    outLink: data.deep.outLink || 0
                };
                if ((this.deep.f.type === 1 || this.deep.f.type === 3) && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    f: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    inNum: 0,
                    outNum: 0,
                    inLink: 0,
                    outLink: 0
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipLaneChangePoint;
}(_Tip3.default);

exports.default = TipLaneChangePoint;

/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 车信 的前端数据模型
 */
var TipLaneConnexity = function (_Tip) {
    _inherits(TipLaneConnexity, _Tip);

    function TipLaneConnexity() {
        _classCallCheck(this, TipLaneConnexity);

        return _possibleConstructorReturn(this, (TipLaneConnexity.__proto__ || Object.getPrototypeOf(TipLaneConnexity)).apply(this, arguments));
    }

    _createClass(TipLaneConnexity, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPLANECONNEXITY';
            this.code = '1301'; // 车信
            this.source.s_sourceType = '1301';
            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    in: {},
                    agl: data.deep.agl || 0.0,
                    info: [],
                    nId: data.deep.nId || 0,
                    o_array: []
                };
                if (data.deep.in) {
                    this.deep.in = data.deep.in;
                    if (this.deep.in.type === 1 && this.deep.in.id) {
                        this.deep.in.id = parseInt(this.deep.in.id, 10);
                    }
                }
                if (data.deep.info) {
                    this.deep.info = data.deep.info;
                }
                if (data.deep.o_array) {
                    this.deep.o_array = data.deep.o_array;
                    for (var i = 0; i < this.deep.o_array.length; i++) {
                        for (var j = 0; j < this.deep.o_array[i].d_array.length; j++) {
                            if (this.deep.o_array[i].d_array[j].out.type === 1 && this.deep.o_array[i].d_array[j].out.id) {
                                this.deep.o_array[i].d_array[j].out.id = parseInt(this.deep.o_array[i].d_array[j].out.id, 10);
                            }
                        }
                    }
                }
            } else {
                this.deep = {
                    id: '',
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0.0,
                    info: [],
                    nId: 0,
                    o_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.in.id) {
                data.deep.in.id = data.deep.in.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipLaneConnexity;
}(_Tip3.default);

exports.default = TipLaneConnexity;

/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 车道限宽限高 的前端数据模型
 */
var TipLaneLimitWidthHeight = function (_Tip) {
    _inherits(TipLaneLimitWidthHeight, _Tip);

    function TipLaneLimitWidthHeight() {
        _classCallCheck(this, TipLaneLimitWidthHeight);

        return _possibleConstructorReturn(this, (TipLaneLimitWidthHeight.__proto__ || Object.getPrototypeOf(TipLaneLimitWidthHeight)).apply(this, arguments));
    }

    _createClass(TipLaneLimitWidthHeight, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPLANELIMITWIDTHHEIGHT';
            this.code = '1117'; // 车道限宽限高

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    f: data.deep.f || {},
                    agl: data.deep.agl || 0,
                    rdDir: data.deep.rdDir || 0,
                    ht: data.deep.ht || [],
                    wd: data.deep.wd || []
                };
                if (this.deep.f.type === 1 && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    id: '',
                    f: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    rdDir: 0,
                    ht: [],
                    wd: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipLaneLimitWidthHeight;
}(_Tip3.default);

exports.default = TipLaneLimitWidthHeight;

/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 提左提右 的前端数据模型
 */
var TipLeftToRight = function (_Tip) {
    _inherits(TipLeftToRight, _Tip);

    function TipLeftToRight() {
        _classCallCheck(this, TipLeftToRight);

        return _possibleConstructorReturn(this, (TipLeftToRight.__proto__ || Object.getPrototypeOf(TipLeftToRight)).apply(this, arguments));
    }

    _createClass(TipLeftToRight, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPLEFTTORIGHT';
            this.code = '1404'; // 提左提右 *

            if (data.deep) {
                this.deep = {
                    brID: data.deep.brID || [],
                    in: data.deep.in || {},
                    agl: data.deep.agl || 0,
                    ptn: data.deep.ptn || '',
                    nId: data.deep.nId || 0,
                    o_array: data.deep.o_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
                for (var i = 0; i < this.deep.o_array.length; i++) {
                    if (this.deep.o_array[i].out.type === 1 && this.deep.o_array[i].out.id) {
                        this.deep.o_array[i].out.id = parseInt(this.deep.o_array[i].out.id, 10);
                    }
                }
            } else {
                this.deep = {
                    brID: [{
                        id: '',
                        sq: 0
                    }],
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    ptn: '',
                    nId: 0,
                    o_array: [{
                        sq: 0,
                        out: {
                            id: '',
                            type: 1
                        }
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipLeftToRight;
}(_Tip3.default);

exports.default = TipLeftToRight;

/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 侧线 的前端数据模型
 */
var TipLinks = function (_Tip) {
    _inherits(TipLinks, _Tip);

    function TipLinks() {
        _classCallCheck(this, TipLinks);

        return _possibleConstructorReturn(this, (TipLinks.__proto__ || Object.getPrototypeOf(TipLinks)).apply(this, arguments));
    }

    _createClass(TipLinks, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPLINKS';
            this.code = '2001'; // 侧线
            this.source.s_sourceType = '2001';
            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    geo: data.deep.geo || {},
                    src: data.deep.src || (data.deep.src === 0 ? 0 : 3),
                    ln: data.deep.ln || (data.deep.ln === 0 ? 0 : 1),
                    kind: data.deep.kind || (data.deep.kind === 0 ? 0 : 8),
                    len: data.deep.len || 0.0,
                    shp: data.deep.shp || 0,
                    prj: data.deep.prj || '',
                    sTime: data.deep.sTime || 0.0,
                    eTime: data.deep.eTime || 0.0,
                    cons: data.deep.cons || 0,
                    time: data.deep.time || '',
                    sGrip: data.deep.sGrip || 0,
                    eGrip: data.deep.eGrip || 0
                };
            } else {
                this.deep = {
                    id: '',
                    geo: {},
                    src: 3,
                    ln: 1,
                    kind: 8,
                    len: 0.0,
                    shp: 0,
                    prj: '',
                    sTime: 0.0,
                    eTime: 0.0,
                    cons: 0,
                    time: '',
                    sGrip: 0,
                    eGrip: 0
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipLinks;
}(_Tip3.default);

exports.default = TipLinks;

/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 施工 的前端数据模型
 */
var TipMaintenance = function (_Tip) {
    _inherits(TipMaintenance, _Tip);

    function TipMaintenance() {
        _classCallCheck(this, TipMaintenance);

        return _possibleConstructorReturn(this, (TipMaintenance.__proto__ || Object.getPrototypeOf(TipMaintenance)).apply(this, arguments));
    }

    _createClass(TipMaintenance, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPMAINTENANCE';
            this.code = '1514'; // 施工
            this.source.s_sourceType = '1514';
            if (data.deep) {
                this.deep = {
                    time: data.deep.time || '',
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    time: '',
                    gSLoc: {},
                    gELoc: {},
                    f_array: []
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f_array) {
                for (var i = 0; i < data.deep.f_array.length; i++) {
                    data.deep.f_array[i].id = data.deep.f_array[i].id.toString();
                }
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipMaintenance;
}(_Tip3.default);

exports.default = TipMaintenance;

/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 里程桩 的前端数据模型
 */
var TipMileagePeg = function (_Tip) {
    _inherits(TipMileagePeg, _Tip);

    function TipMileagePeg() {
        _classCallCheck(this, TipMileagePeg);

        return _possibleConstructorReturn(this, (TipMileagePeg.__proto__ || Object.getPrototypeOf(TipMileagePeg)).apply(this, arguments));
    }

    _createClass(TipMileagePeg, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPMILEAGEPEG';
            this.code = '1707'; // 里程桩

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    f: data.deep.f || {},
                    rdNm: data.deep.rdNm || '',
                    rdName: data.deep.rdName || '',
                    num: data.deep.num || 0,
                    src: data.deep.src || 1
                };
                if (this.deep.f.type === 1 && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    id: '',
                    f: {
                        id: '',
                        type: 1
                    },
                    rdNm: '',
                    rdName: '',
                    num: 0,
                    src: 1
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipMileagePeg;
}(_Tip3.default);

exports.default = TipMileagePeg;

/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 上下线分离 的前端数据模型
 */
var TipMultiDigitized = function (_Tip) {
    _inherits(TipMultiDigitized, _Tip);

    function TipMultiDigitized() {
        _classCallCheck(this, TipMultiDigitized);

        return _possibleConstructorReturn(this, (TipMultiDigitized.__proto__ || Object.getPrototypeOf(TipMultiDigitized)).apply(this, arguments));
    }

    _createClass(TipMultiDigitized, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPMULTIDIGITIZED';
            this.code = '1501'; // 上下线分离
            this.source.s_sourceType = '1501';
            if (data.deep) {
                this.deep = {
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    gSLoc: {},
                    gELoc: {},
                    f_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f_array) {
                for (var i = 0; i < data.deep.f_array.length; i++) {
                    data.deep.f_array[i].id = data.deep.f_array[i].id.toString();
                }
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipMultiDigitized;
}(_Tip3.default);

exports.default = TipMultiDigitized;

/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 窄道 的前端数据模型
 */
var TipNarrowChannel = function (_Tip) {
    _inherits(TipNarrowChannel, _Tip);

    function TipNarrowChannel() {
        _classCallCheck(this, TipNarrowChannel);

        return _possibleConstructorReturn(this, (TipNarrowChannel.__proto__ || Object.getPrototypeOf(TipNarrowChannel)).apply(this, arguments));
    }

    _createClass(TipNarrowChannel, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPNARROWCHANNEL';
            this.code = '1513'; // 窄道

            if (data.deep) {
                this.deep = {
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    gSLoc: {},
                    gELoc: {},
                    f_array: [{
                        id: '',
                        type: 1,
                        flag: '0'
                    }]
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipNarrowChannel;
}(_Tip3.default);

exports.default = TipNarrowChannel;

/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 禁止穿行 的前端数据模型
 */
var TipNoCrossing = function (_Tip) {
    _inherits(TipNoCrossing, _Tip);

    function TipNoCrossing() {
        _classCallCheck(this, TipNoCrossing);

        return _possibleConstructorReturn(this, (TipNoCrossing.__proto__ || Object.getPrototypeOf(TipNoCrossing)).apply(this, arguments));
    }

    _createClass(TipNoCrossing, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPNOCROSSING';
            this.code = '1304'; // 禁止穿行 *

            if (data.deep) {
                this.deep = {
                    f: data.deep.f || {},
                    agl: data.deep.agl || 0,
                    rdDir: data.deep.rdDir || 0,
                    time: data.deep.time || ''
                };
                if (this.deep.f.type === 1 && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    f: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    rdDir: 0,
                    time: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipNoCrossing;
}(_Tip3.default);

exports.default = TipNoCrossing;

/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 点位移 的前端数据模型
 */
var TipNodeShift = function (_Tip) {
    _inherits(TipNodeShift, _Tip);

    function TipNodeShift() {
        _classCallCheck(this, TipNodeShift);

        return _possibleConstructorReturn(this, (TipNodeShift.__proto__ || Object.getPrototypeOf(TipNodeShift)).apply(this, arguments));
    }

    _createClass(TipNodeShift, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPNODESHIFT';
            this.code = '1709'; // 点位移

            if (data.deep) {
                this.deep = {
                    geoO: data.deep.geoO || {},
                    geoN: data.deep.geoN || {}
                };
            } else {
                this.deep = {
                    geoO: {},
                    geoN: {}
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipNodeShift;
}(_Tip3.default);

exports.default = TipNodeShift;

/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 禁止驶入 的前端数据模型
 */
var TipNoEntry = function (_Tip) {
    _inherits(TipNoEntry, _Tip);

    function TipNoEntry() {
        _classCallCheck(this, TipNoEntry);

        return _possibleConstructorReturn(this, (TipNoEntry.__proto__ || Object.getPrototypeOf(TipNoEntry)).apply(this, arguments));
    }

    _createClass(TipNoEntry, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPNOENTRY';
            this.code = '1305'; // 禁止驶入 *

            if (data.deep) {
                this.deep = {
                    f: data.deep.f || {},
                    agl: data.deep.agl || 0,
                    rdDir: data.deep.rdDir || 0,
                    time: data.deep.time || '',
                    vt: data.deep.vt || []
                };
                if (this.deep.f.type === 1 && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    f: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    rdDir: 0,
                    time: '',
                    vt: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipNoEntry;
}(_Tip3.default);

exports.default = TipNoEntry;

/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 普通交限 的前端数据模型
 */
var TipNomalRestriction = function (_Tip) {
    _inherits(TipNomalRestriction, _Tip);

    function TipNomalRestriction() {
        _classCallCheck(this, TipNomalRestriction);

        return _possibleConstructorReturn(this, (TipNomalRestriction.__proto__ || Object.getPrototypeOf(TipNomalRestriction)).apply(this, arguments));
    }

    _createClass(TipNomalRestriction, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPNOMALRESTRICTION';
            this.code = '1302'; // 普通交限
            this.source.s_sourceType = '1302';
            this.selectedArray = [];

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    in: data.deep.in || {},
                    agl: data.deep.agl || 0.0,
                    info: data.deep.info || [],
                    nId: data.deep.nId || 0,
                    o_array: data.deep.o_array || []
                };
                if (data.deep.in) {
                    this.deep.in = data.deep.in;
                    if (this.deep.in.type === 1 && this.deep.in.id) {
                        this.deep.in.id = parseInt(this.deep.in.id, 10);
                    }
                }
                if (data.deep.info) {
                    this.deep.info = data.deep.info;
                    for (var m = 0; m < data.deep.info.length; m++) {
                        this.selectedArray.push({
                            type: data.deep.info[m].flag,
                            direct: data.deep.info[m].info,
                            time: data.deep.o_array[m].time || ''
                        });
                    }
                }
                if (data.deep.o_array) {
                    this.deep.o_array = data.deep.o_array;
                    for (var i = 0, len = this.deep.o_array.length; i < len; i++) {
                        for (var j = 0, len2 = this.deep.o_array[i].out.length; j < len2; j++) {
                            if (this.deep.o_array[i].out[j].type === 1 && this.deep.o_array[i].out[j].id) {
                                this.deep.o_array[i].out[j].id = parseInt(this.deep.o_array[i].out[j].id, 10);
                            }
                        }
                    }
                }
            } else {
                this.deep = {
                    id: '',
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0.0,
                    info: [],
                    nId: 0,
                    o_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.in.id) {
                data.deep.in.id = data.deep.in.id.toString();
            }

            data.deep.info = [];
            data.deep.o_array = [];
            for (var i = 0; i < data.selectedArray.length; i++) {
                data.deep.info.push({
                    sq: i + 1,
                    flag: data.selectedArray[i].type,
                    info: data.selectedArray[i].direct
                });
                data.deep.o_array.push({
                    sq: i + 1,
                    oInfo: data.selectedArray[i].direct,
                    out: [],
                    flag: data.selectedArray[i].type,
                    time: data.selectedArray[i].time || ''
                });
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipNomalRestriction;
}(_Tip3.default);

exports.default = TipNomalRestriction;

/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 普通路口模式图 的前端数据模型
 */
var TipNormalCross = function (_Tip) {
    _inherits(TipNormalCross, _Tip);

    function TipNormalCross() {
        _classCallCheck(this, TipNormalCross);

        return _possibleConstructorReturn(this, (TipNormalCross.__proto__ || Object.getPrototypeOf(TipNormalCross)).apply(this, arguments));
    }

    _createClass(TipNormalCross, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPNORMALCROSS';
            this.code = '1409'; // 普通路口模式图

            if (data.deep) {
                this.deep = {
                    brID: data.deep.brID || [],
                    in: data.deep.in || {},
                    agl: data.deep.agl || 0,
                    ptn: data.deep.ptn || '',
                    nId: data.deep.nId || 0,
                    o_array: data.deep.o_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
                for (var i = 0; i < this.deep.o_array.length; i++) {
                    if (this.deep.o_array[i].out.type === 1 && this.deep.o_array[i].out.id) {
                        this.deep.o_array[i].out.id = parseInt(this.deep.o_array[i].out.id, 10);
                    }
                }
            } else {
                this.deep = {
                    brID: [{
                        id: '',
                        sq: 0
                    }],
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    ptn: '',
                    nId: 0,
                    o_array: [{
                        sq: 0,
                        out: {
                            id: '',
                            type: 1
                        }
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipNormalCross;
}(_Tip3.default);

exports.default = TipNormalCross;

/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 一般道路方面 的前端数据模型
 */
var TipNormalRoadSide = function (_Tip) {
    _inherits(TipNormalRoadSide, _Tip);

    function TipNormalRoadSide() {
        _classCallCheck(this, TipNormalRoadSide);

        return _possibleConstructorReturn(this, (TipNormalRoadSide.__proto__ || Object.getPrototypeOf(TipNormalRoadSide)).apply(this, arguments));
    }

    _createClass(TipNormalRoadSide, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPNORMALROADSIDE';
            this.code = '1405'; // 一般道路方面

            if (data.deep) {
                this.deep = {
                    brID: data.deep.brID || [],
                    in: data.deep.in || {},
                    agl: data.deep.agl || 0,
                    nId: data.deep.nId || 0,
                    o_array: data.deep.o_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
                for (var i = 0; i < this.deep.o_array.length; i++) {
                    if (this.deep.o_array[i].out.type === 1 && this.deep.o_array[i].out.id) {
                        this.deep.o_array[i].out.id = parseInt(this.deep.o_array[i].out.id, 10);
                    }
                }
            } else {
                this.deep = {
                    brID: [{
                        id: '',
                        sq: 0
                    }],
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    nId: 0,
                    o_array: [{
                        sq: 0,
                        out: {
                            id: '',
                            type: 1
                        },
                        n_array: []
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipNormalRoadSide;
}(_Tip3.default);

exports.default = TipNormalRoadSide;

/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 障碍物 的前端数据模型
 */
var TipObstacle = function (_Tip) {
    _inherits(TipObstacle, _Tip);

    function TipObstacle() {
        _classCallCheck(this, TipObstacle);

        return _possibleConstructorReturn(this, (TipObstacle.__proto__ || Object.getPrototypeOf(TipObstacle)).apply(this, arguments));
    }

    _createClass(TipObstacle, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPOBSTACLE';
            this.code = '1701'; // 障碍物

            if (data.deep && data.deep.f) {
                this.deep = {
                    f: {
                        id: data.deep.f.id || '',
                        type: data.deep.f.type || 1
                    }
                };
                if ((this.deep.f.type === 1 || this.deep.f.type === 3) && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    f: {
                        id: '',
                        type: 1
                    }
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipObstacle;
}(_Tip3.default);

exports.default = TipObstacle;

/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 方向看板 的前端数据模型
 */
var TipOrientation = function (_Tip) {
    _inherits(TipOrientation, _Tip);

    function TipOrientation() {
        _classCallCheck(this, TipOrientation);

        return _possibleConstructorReturn(this, (TipOrientation.__proto__ || Object.getPrototypeOf(TipOrientation)).apply(this, arguments));
    }

    _createClass(TipOrientation, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPORIENTATION';
            this.code = '1401'; // 方向看板

            if (data.deep) {
                this.deep = {
                    brID: data.deep.brID || [],
                    in: data.deep.in || {},
                    agl: data.deep.agl || 0,
                    ptn: data.deep.ptn || '',
                    nId: data.deep.nId || 0,
                    o_array: data.deep.o_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
                for (var i = 0; i < this.deep.o_array.length; i++) {
                    if (this.deep.o_array[i].out.type === 1 && this.deep.o_array[i].out.id) {
                        this.deep.o_array[i].out.id = parseInt(this.deep.o_array[i].out.id, 10);
                    }
                }
            } else {
                this.deep = {
                    brID: [{
                        id: '',
                        sq: 0
                    }],
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    ptn: '',
                    nId: 0,
                    o_array: [{
                        sq: 0,
                        out: {
                            id: '',
                            type: 1
                        }
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipOrientation;
}(_Tip3.default);

exports.default = TipOrientation;

/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 地下通道/过街天桥 的前端数据模型
 */
var TipOverBridge = function (_Tip) {
    _inherits(TipOverBridge, _Tip);

    function TipOverBridge() {
        _classCallCheck(this, TipOverBridge);

        return _possibleConstructorReturn(this, (TipOverBridge.__proto__ || Object.getPrototypeOf(TipOverBridge)).apply(this, arguments));
    }

    _createClass(TipOverBridge, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPOVERBRIDGE';
            this.code = '2201'; // 地下通道/过街天桥

            if (data.deep) {
                this.deep = {
                    tp: data.deep.tp || 1,
                    geo: data.deep.geo || {},
                    p_array: data.deep.p_array || []
                };
            } else {
                this.deep = {
                    tp: 1,
                    geo: {},
                    p_array: [{
                        geoP: {},
                        access: ''
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipOverBridge;
}(_Tip3.default);

exports.default = TipOverBridge;

/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * overpass 的前端数据模型
 */
var TipOverpass = function (_Tip) {
    _inherits(TipOverpass, _Tip);

    function TipOverpass() {
        _classCallCheck(this, TipOverpass);

        return _possibleConstructorReturn(this, (TipOverpass.__proto__ || Object.getPrototypeOf(TipOverpass)).apply(this, arguments));
    }

    _createClass(TipOverpass, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPOVERPASS';
            this.code = '1504'; // overpass

            if (data.deep) {
                this.deep = {
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    gSLoc: {},
                    gELoc: {},
                    f_array: [{
                        id: '',
                        type: 1,
                        flag: '0'
                    }]
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipOverpass;
}(_Tip3.default);

exports.default = TipOverpass;

/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 立交桥名称 的前端数据模型
 */
var TipOverpassName = function (_Tip) {
    _inherits(TipOverpassName, _Tip);

    function TipOverpassName() {
        _classCallCheck(this, TipOverpassName);

        return _possibleConstructorReturn(this, (TipOverpassName.__proto__ || Object.getPrototypeOf(TipOverpassName)).apply(this, arguments));
    }

    _createClass(TipOverpassName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPOVERPASSNAME';
            this.code = '1705'; // 立交桥名称

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    name: data.deep.name || ''
                };
            } else {
                this.deep = {
                    id: '',
                    name: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipOverpassName;
}(_Tip3.default);

exports.default = TipOverpassName;

/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 停车场出入口 的前端数据模型
 */
var TipParkinglot = function (_Tip) {
    _inherits(TipParkinglot, _Tip);

    function TipParkinglot() {
        _classCallCheck(this, TipParkinglot);

        return _possibleConstructorReturn(this, (TipParkinglot.__proto__ || Object.getPrototypeOf(TipParkinglot)).apply(this, arguments));
    }

    _createClass(TipParkinglot, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPPARKINGLOT';
            this.code = '1208'; // 停车场出入口 *

            if (data.deep) {
                this.deep = {
                    f: data.deep.f || {},
                    under: data.deep.under || 0
                };
                if (this.deep.f.type === 1 && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    f: {
                        id: '',
                        type: 1
                    },
                    under: 0
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipParkinglot;
}(_Tip3.default);

exports.default = TipParkinglot;

/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 路面覆盖 的前端数据模型
 */
var TipPavementCover = function (_Tip) {
    _inherits(TipPavementCover, _Tip);

    function TipPavementCover() {
        _classCallCheck(this, TipPavementCover);

        return _possibleConstructorReturn(this, (TipPavementCover.__proto__ || Object.getPrototypeOf(TipPavementCover)).apply(this, arguments));
    }

    _createClass(TipPavementCover, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPPAVEMENTCOVER';
            this.code = '1502'; // 路面覆盖 *

            if (data.deep) {
                this.deep = {
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    gSLoc: {},
                    gELoc: {},
                    f_array: [{
                        id: '',
                        type: 1,
                        flag: '0'
                    }]
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipPavementCover;
}(_Tip3.default);

exports.default = TipPavementCover;

/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 步行街 的前端数据模型
 */
var TipPedestrianStreet = function (_Tip) {
    _inherits(TipPedestrianStreet, _Tip);

    function TipPedestrianStreet() {
        _classCallCheck(this, TipPedestrianStreet);

        return _possibleConstructorReturn(this, (TipPedestrianStreet.__proto__ || Object.getPrototypeOf(TipPedestrianStreet)).apply(this, arguments));
    }

    _createClass(TipPedestrianStreet, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPPEDESTRIANSTREET';
            this.code = '1507'; // 步行街
            this.source.s_sourceType = '1507';
            if (data.deep) {
                this.deep = {
                    name: data.deep.name || '',
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: [],
                    time: data.deep.time || ''
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    name: '',
                    gSLoc: {},
                    gELoc: {},
                    f_array: [],
                    time: ''
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f_array) {
                for (var i = 0; i < data.deep.f_array.length; i++) {
                    data.deep.f_array[i].id = data.deep.f_array[i].id.toString();
                }
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipPedestrianStreet;
}(_Tip3.default);

exports.default = TipPedestrianStreet;

/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * POI连接路 的前端数据模型
 */
var TipPOIRoad = function (_Tip) {
    _inherits(TipPOIRoad, _Tip);

    function TipPOIRoad() {
        _classCallCheck(this, TipPOIRoad);

        return _possibleConstructorReturn(this, (TipPOIRoad.__proto__ || Object.getPrototypeOf(TipPOIRoad)).apply(this, arguments));
    }

    _createClass(TipPOIRoad, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPPOIROAD';
            this.code = '1605'; // POI连接路

            if (data.deep) {
                this.deep = {
                    geo: data.deep.geo || {},
                    f_array: data.deep.f_array || []
                };

                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    geo: {},
                    f_array: [{
                        id: '',
                        type: 1,
                        geoF: {}
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipPOIRoad;
}(_Tip3.default);

exports.default = TipPOIRoad;

/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 地铁 的前端数据模型
 */
var TipRailWay = function (_Tip) {
    _inherits(TipRailWay, _Tip);

    function TipRailWay() {
        _classCallCheck(this, TipRailWay);

        return _possibleConstructorReturn(this, (TipRailWay.__proto__ || Object.getPrototypeOf(TipRailWay)).apply(this, arguments));
    }

    _createClass(TipRailWay, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPRAILWAY';
            this.code = '8009'; // 地铁

            if (data.deep) {
                this.deep = {
                    geo: data.deep.geo || {},
                    name: data.deep.name || ''
                };
            } else {
                this.deep = {
                    geo: {},
                    name: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRailWay;
}(_Tip3.default);

exports.default = TipRailWay;

/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 铁路道口 的前端数据模型
 */
var TipRailwayCrossing = function (_Tip) {
    _inherits(TipRailwayCrossing, _Tip);

    function TipRailwayCrossing() {
        _classCallCheck(this, TipRailwayCrossing);

        return _possibleConstructorReturn(this, (TipRailwayCrossing.__proto__ || Object.getPrototypeOf(TipRailwayCrossing)).apply(this, arguments));
    }

    _createClass(TipRailwayCrossing, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPRAILWAYCROSSING';
            this.code = '1702'; // 铁路道口
            this.source.s_sourceType = '1702';
            if (data.deep && data.deep.f) {
                this.deep = {
                    f: {
                        id: data.deep.f.id || '',
                        type: data.deep.f.type || 1
                    }
                };
                if ((this.deep.f.type === 1 || this.deep.f.type === 3) && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    f: {}
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f.id) {
                data.deep.f.id = data.deep.f.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRailwayCrossing;
}(_Tip3.default);

exports.default = TipRailwayCrossing;

/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 匝道 的前端数据模型
 */
var TipRamp = function (_Tip) {
    _inherits(TipRamp, _Tip);

    function TipRamp() {
        _classCallCheck(this, TipRamp);

        return _possibleConstructorReturn(this, (TipRamp.__proto__ || Object.getPrototypeOf(TipRamp)).apply(this, arguments));
    }

    _createClass(TipRamp, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPRAMP';
            this.code = '1207'; // 匝道
            this.source.s_sourceType = '1207';
            if (data.deep) {
                this.deep = {
                    f: {}
                };
                if (data.deep.f) {
                    this.deep.f = data.deep.f;
                    if (this.deep.f.type === 1 && this.deep.f.id) {
                        this.deep.f.id = parseInt(this.deep.f.id, 10);
                    }
                }
            } else {
                this.deep = {
                    f: {}
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f.id) {
                data.deep.f.id = data.deep.f.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRamp;
}(_Tip3.default);

exports.default = TipRamp;

/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Real sign 的前端数据模型
 */
var TipRealSign = function (_Tip) {
    _inherits(TipRealSign, _Tip);

    function TipRealSign() {
        _classCallCheck(this, TipRealSign);

        return _possibleConstructorReturn(this, (TipRealSign.__proto__ || Object.getPrototypeOf(TipRealSign)).apply(this, arguments));
    }

    _createClass(TipRealSign, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPREALSIGN';
            this.code = '1402'; // Real sign

            if (data.deep) {
                this.deep = {
                    brID: data.deep.brID || [],
                    in: data.deep.in || {},
                    agl: data.deep.agl || 0,
                    ptn: data.deep.ptn || '',
                    nId: data.deep.nId || 0,
                    o_array: data.deep.o_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
                for (var i = 0; i < this.deep.o_array.length; i++) {
                    if (this.deep.o_array[i].out.type === 1 && this.deep.o_array[i].out.id) {
                        this.deep.o_array[i].out.id = parseInt(this.deep.o_array[i].out.id, 10);
                    }
                }
            } else {
                this.deep = {
                    brID: [{
                        id: '',
                        sq: 0
                    }],
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    ptn: '',
                    nId: 0,
                    o_array: [{
                        sq: 0,
                        out: {
                            id: '',
                            type: 1
                        }
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRealSign;
}(_Tip3.default);

exports.default = TipRealSign;

/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 区域内道路 的前端数据模型
 */
var TipRegionRoad = function (_Tip) {
    _inherits(TipRegionRoad, _Tip);

    function TipRegionRoad() {
        _classCallCheck(this, TipRegionRoad);

        return _possibleConstructorReturn(this, (TipRegionRoad.__proto__ || Object.getPrototypeOf(TipRegionRoad)).apply(this, arguments));
    }

    _createClass(TipRegionRoad, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPREGIONROAD';
            this.code = '1604'; // 区域内道路
            this.source.s_sourceType = '1604';
            if (data.deep) {
                this.deep = {
                    geo: data.deep.geo || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                    for (var i = 0; i < this.deep.f_array.length; i++) {
                        if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                            this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                        }
                    }
                }
            } else {
                this.deep = {
                    geo: {},
                    f_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f_array) {
                for (var i = 0; i < data.deep.f_array.length; i++) {
                    data.deep.f_array[i].id = data.deep.f_array[i].id.toString();
                }
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRegionRoad;
}(_Tip3.default);

exports.default = TipRegionRoad;

/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 维修 的前端数据模型
 */
var TipRepair = function (_Tip) {
    _inherits(TipRepair, _Tip);

    function TipRepair() {
        _classCallCheck(this, TipRepair);

        return _possibleConstructorReturn(this, (TipRepair.__proto__ || Object.getPrototypeOf(TipRepair)).apply(this, arguments));
    }

    _createClass(TipRepair, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPREPAIR';
            this.code = '1515'; // 维修

            if (data.deep) {
                this.deep = {
                    time: data.deep.time || '',
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    time: '',
                    gSLoc: {},
                    gELoc: {},
                    f_array: [{
                        id: '',
                        type: 1,
                        flag: '0'
                    }]
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRepair;
}(_Tip3.default);

exports.default = TipRepair;

/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 点限速 的前端数据模型
 */
var TipRestriction = function (_Tip) {
    _inherits(TipRestriction, _Tip);

    function TipRestriction() {
        _classCallCheck(this, TipRestriction);

        return _possibleConstructorReturn(this, (TipRestriction.__proto__ || Object.getPrototypeOf(TipRestriction)).apply(this, arguments));
    }

    _createClass(TipRestriction, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPRESTRICTION';
            this.code = '1101'; // 点限速
            this.source.s_sourceType = '1101';
            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    f: {},
                    agl: data.deep.agl || 0.0,
                    toll: data.deep.toll || 0,
                    rdDir: data.deep.rdDir || 0,
                    value: data.deep.value || 5,
                    se: data.deep.se || 0,
                    flag: data.deep.flag || 0,
                    desc: data.deep.desc || ''
                };
                if (data.deep.f) {
                    this.deep.f = data.deep.f;
                    if (this.deep.f.type === 1 && this.deep.f.id) {
                        this.deep.f.id = parseInt(this.deep.f.id, 10);
                    }
                }
            } else {
                this.deep = {
                    id: '',
                    f: {},
                    agl: 0.0,
                    toll: 0,
                    rdDir: 0,
                    value: 5,
                    se: 0,
                    flag: 0,
                    desc: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f.id) {
                data.deep.f.id = data.deep.f.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRestriction;
}(_Tip3.default);

exports.default = TipRestriction;

/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 可逆车道 的前端数据模型
 */
var TipReversibleLane = function (_Tip) {
    _inherits(TipReversibleLane, _Tip);

    function TipReversibleLane() {
        _classCallCheck(this, TipReversibleLane);

        return _possibleConstructorReturn(this, (TipReversibleLane.__proto__ || Object.getPrototypeOf(TipReversibleLane)).apply(this, arguments));
    }

    _createClass(TipReversibleLane, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPREVERSIBLELANE';
            this.code = '1204'; // 可逆车道

            if (data.deep) {
                this.deep = {
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    agl: data.deep.agl || 0,
                    ln: data.deep.ln || [],
                    f_array: data.deep.f_array || []
                };
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    gSLoc: {},
                    gELoc: {},
                    agl: 0,
                    ln: [{
                        rev: 0,
                        time: ''
                    }],
                    f_array: [{
                        id: '',
                        type: 1,
                        flag: '0'
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipReversibleLane;
}(_Tip3.default);

exports.default = TipReversibleLane;

/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 交叉路口 的前端数据模型
 */
var TipRoadCross = function (_Tip) {
    _inherits(TipRoadCross, _Tip);

    function TipRoadCross() {
        _classCallCheck(this, TipRoadCross);

        return _possibleConstructorReturn(this, (TipRoadCross.__proto__ || Object.getPrototypeOf(TipRoadCross)).apply(this, arguments));
    }

    _createClass(TipRoadCross, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPROADCROSS';
            this.code = '1704'; // 交叉路口

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    f: data.deep.f || {},
                    name: data.deep.name || ''
                };
                if ((this.deep.f.type === 1 || this.deep.f.type === 3) && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    id: '',
                    f: {
                        id: '',
                        type: 1
                    },
                    name: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRoadCross;
}(_Tip3.default);

exports.default = TipRoadCross;

/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 分叉路口提示 的前端数据模型
 */
var TipRoadCrossProm = function (_Tip) {
    _inherits(TipRoadCrossProm, _Tip);

    function TipRoadCrossProm() {
        _classCallCheck(this, TipRoadCrossProm);

        return _possibleConstructorReturn(this, (TipRoadCrossProm.__proto__ || Object.getPrototypeOf(TipRoadCrossProm)).apply(this, arguments));
    }

    _createClass(TipRoadCrossProm, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPROADCROSSPROM';
            this.code = '1703'; // 分叉路口提示

            if (data.deep) {
                this.deep = {
                    sID: data.deep.sID || [],
                    in: data.deep.in || {},
                    nId: data.deep.nId || 0,
                    o_array: data.deep.o_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }

                for (var i = 0; i < this.deep.o_array.length; i++) {
                    if (this.deep.o_array[i].out.type === 1 && this.deep.o_array[i].out.id) {
                        this.deep.o_array[i].out.id = parseInt(this.deep.o_array[i].out.id, 10);
                    }
                }
            } else {
                this.deep = {
                    sID: [{
                        id: '',
                        sq: 0
                    }],
                    in: {
                        id: '',
                        type: 1
                    },
                    nId: 0,
                    o_array: [{
                        sq: 0,
                        out: {
                            id: '',
                            type: 1
                        }
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRoadCrossProm;
}(_Tip3.default);

exports.default = TipRoadCrossProm;

/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 道路方向 的前端数据模型
 */
var TipRoadDirection = function (_Tip) {
    _inherits(TipRoadDirection, _Tip);

    function TipRoadDirection() {
        _classCallCheck(this, TipRoadDirection);

        return _possibleConstructorReturn(this, (TipRoadDirection.__proto__ || Object.getPrototypeOf(TipRoadDirection)).apply(this, arguments));
    }

    _createClass(TipRoadDirection, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPROADDIRECTION';
            this.code = '1203'; // 道路方向
            this.source.s_sourceType = '1203';
            if (data.deep) {
                this.deep = {
                    f: {},
                    agl: data.deep.agl || 0.0,
                    dr: data.deep.dr || 1,
                    time: data.deep.time || ''
                };
                if (data.deep.f) {
                    this.deep.f = data.deep.f;
                    if (this.deep.f.type === 1 && this.deep.f.id) {
                        this.deep.f.id = parseInt(this.deep.f.id, 10);
                    }
                }
            } else {
                this.deep = {
                    f: {},
                    agl: 0.0,
                    dr: 1,
                    time: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f.id) {
                data.deep.f.id = data.deep.f.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRoadDirection;
}(_Tip3.default);

exports.default = TipRoadDirection;

/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 道路名 的前端数据模型
 */
var TipRoadName = function (_Tip) {
    _inherits(TipRoadName, _Tip);

    function TipRoadName() {
        _classCallCheck(this, TipRoadName);

        return _possibleConstructorReturn(this, (TipRoadName.__proto__ || Object.getPrototypeOf(TipRoadName)).apply(this, arguments));
    }

    _createClass(TipRoadName, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPROADNAME';
            this.code = '1901'; // 道路名
            this.source.s_sourceType = '1901';
            if (data.deep) {
                this.deep = {
                    n_array: [],
                    geo: data.deep.geo || {}
                };
                if (data.deep.n_array) {
                    this.deep.n_array = data.deep.n_array;
                }
            } else {
                this.deep = {
                    n_array: [],
                    geo: {}
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRoadName;
}(_Tip3.default);

exports.default = TipRoadName;

/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * PA(停车区) 的前端数据模型
 */
var TipRoadPA = function (_Tip) {
    _inherits(TipRoadPA, _Tip);

    function TipRoadPA() {
        _classCallCheck(this, TipRoadPA);

        return _possibleConstructorReturn(this, (TipRoadPA.__proto__ || Object.getPrototypeOf(TipRoadPA)).apply(this, arguments));
    }

    _createClass(TipRoadPA, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPROADPA';
            this.code = '1206'; // PA(停车区)
            this.source.s_sourceType = '1206';
            if (data.deep) {
                this.deep = {
                    f: {}
                };
                if (data.deep.f) {
                    this.deep.f = data.deep.f;
                    if (this.deep.f.type === 1 && this.deep.f.id) {
                        this.deep.f.id = parseInt(this.deep.f.id, 10);
                    }
                }
            } else {
                this.deep = {
                    f: {}
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f.id) {
                data.deep.f.id = data.deep.f.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRoadPA;
}(_Tip3.default);

exports.default = TipRoadPA;

/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * SA(服务区) 的前端数据模型
 */
var TipRoadSA = function (_Tip) {
    _inherits(TipRoadSA, _Tip);

    function TipRoadSA() {
        _classCallCheck(this, TipRoadSA);

        return _possibleConstructorReturn(this, (TipRoadSA.__proto__ || Object.getPrototypeOf(TipRoadSA)).apply(this, arguments));
    }

    _createClass(TipRoadSA, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPROADSA';
            this.code = '1205'; // SA(服务区)
            this.source.s_sourceType = '1205';
            if (data.deep) {
                this.deep = {
                    f: {}
                };
                if (data.deep.f) {
                    this.deep.f = data.deep.f;
                    if (this.deep.f.type === 1 && this.deep.f.id) {
                        this.deep.f.id = parseInt(this.deep.f.id, 10);
                    }
                }
            } else {
                this.deep = {
                    f: {}
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f.id) {
                data.deep.f.id = data.deep.f.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRoadSA;
}(_Tip3.default);

exports.default = TipRoadSA;

/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 道路种别 的前端数据模型
 */
var TipRoadType = function (_Tip) {
    _inherits(TipRoadType, _Tip);

    function TipRoadType() {
        _classCallCheck(this, TipRoadType);

        return _possibleConstructorReturn(this, (TipRoadType.__proto__ || Object.getPrototypeOf(TipRoadType)).apply(this, arguments));
    }

    _createClass(TipRoadType, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPROADTYPE';
            this.code = '1201'; // 道路种别
            this.source.s_sourceType = '1201';
            if (data.deep) {
                this.deep = {
                    f: {},
                    kind: data.deep.kind || (data.deep.kind === 0 ? 0 : 7)
                };
                if (this.deep.f) {
                    this.deep.f = data.deep.f;
                    if (this.deep.f.type === 1 && this.deep.f.id) {
                        this.deep.f.id = parseInt(this.deep.f.id, 10);
                    }
                }
            } else {
                this.deep = {
                    f: {},
                    kind: 7
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f.id) {
                data.deep.f.id = data.deep.f.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRoadType;
}(_Tip3.default);

exports.default = TipRoadType;

/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 环岛 的前端数据模型
 */
var TipRoundabout = function (_Tip) {
    _inherits(TipRoundabout, _Tip);

    function TipRoundabout() {
        _classCallCheck(this, TipRoundabout);

        return _possibleConstructorReturn(this, (TipRoundabout.__proto__ || Object.getPrototypeOf(TipRoundabout)).apply(this, arguments));
    }

    _createClass(TipRoundabout, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPROUNDABOUT';
            this.code = '1601'; // 环岛
            this.source.s_sourceType = '1601';
            if (data.deep) {
                this.deep = {
                    geo: data.deep.geo || {},
                    name: data.deep.name || '',
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                    for (var i = 0; i < this.deep.f_array.length; i++) {
                        if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                            this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                        }
                    }
                }
            } else {
                this.deep = {
                    geo: {},
                    name: '',
                    f_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f_array) {
                for (var i = 0; i < data.deep.f_array.length; i++) {
                    data.deep.f_array[i].id = data.deep.f_array[i].id.toString();
                }
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRoundabout;
}(_Tip3.default);

exports.default = TipRoundabout;

/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 航线 的前端数据模型
 */
var TipRoute = function (_Tip) {
    _inherits(TipRoute, _Tip);

    function TipRoute() {
        _classCallCheck(this, TipRoute);

        return _possibleConstructorReturn(this, (TipRoute.__proto__ || Object.getPrototypeOf(TipRoute)).apply(this, arguments));
    }

    _createClass(TipRoute, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPROUTE';
            this.code = '1209'; // 航线

            if (data.deep) {
                this.deep = {
                    f: data.deep.f || {},
                    name: data.deep.name || ''
                };
            } else {
                this.deep = {
                    f: {
                        id: '',
                        type: 1
                    },
                    name: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipRoute;
}(_Tip3.default);

exports.default = TipRoute;

/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 风景路线 的前端数据模型
 */
var TipScenicRoute = function (_Tip) {
    _inherits(TipScenicRoute, _Tip);

    function TipScenicRoute() {
        _classCallCheck(this, TipScenicRoute);

        return _possibleConstructorReturn(this, (TipScenicRoute.__proto__ || Object.getPrototypeOf(TipScenicRoute)).apply(this, arguments));
    }

    _createClass(TipScenicRoute, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPSCENICROUTE';
            this.code = '1607'; // 风景路线

            if (data.deep) {
                this.deep = {
                    geo: data.deep.geo || {},
                    name: data.deep.name || '',
                    f_array: data.deep.f_array || []
                };

                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    geo: {},
                    name: '',
                    f_array: [{
                        id: '',
                        type: 1,
                        geoF: {}
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipScenicRoute;
}(_Tip3.default);

exports.default = TipScenicRoute;

/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 季节性关闭道路 的前端数据模型
 */
var TipSeasonalRoad = function (_Tip) {
    _inherits(TipSeasonalRoad, _Tip);

    function TipSeasonalRoad() {
        _classCallCheck(this, TipSeasonalRoad);

        return _possibleConstructorReturn(this, (TipSeasonalRoad.__proto__ || Object.getPrototypeOf(TipSeasonalRoad)).apply(this, arguments));
    }

    _createClass(TipSeasonalRoad, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPSEASONALROAD';
            this.code = '1516'; // 季节性关闭道路

            if (data.deep) {
                this.deep = {
                    time: data.deep.time || '',
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    time: '',
                    gSLoc: {},
                    gELoc: {},
                    f_array: [{
                        id: '',
                        type: 1,
                        flag: '0'
                    }]
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipSeasonalRoad;
}(_Tip3.default);

exports.default = TipSeasonalRoad;

/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 辅路 的前端数据模型
 */
var TipSideRoad = function (_Tip) {
    _inherits(TipSideRoad, _Tip);

    function TipSideRoad() {
        _classCallCheck(this, TipSideRoad);

        return _possibleConstructorReturn(this, (TipSideRoad.__proto__ || Object.getPrototypeOf(TipSideRoad)).apply(this, arguments));
    }

    _createClass(TipSideRoad, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPSIDEROAD';
            this.code = '1512'; // 辅路

            if (data.deep) {
                this.deep = {
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: data.deep.f_array || [],
                    dis: data.deep.dis || 0
                };

                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    gSLoc: {},
                    gELoc: {},
                    f_array: [{
                        id: '',
                        type: 1,
                        flag: '0'
                    }],
                    dis: 0
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipSideRoad;
}(_Tip3.default);

exports.default = TipSideRoad;

/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 草图 的前端数据模型
 */
var TipSketch = function (_Tip) {
    _inherits(TipSketch, _Tip);

    function TipSketch() {
        _classCallCheck(this, TipSketch);

        return _possibleConstructorReturn(this, (TipSketch.__proto__ || Object.getPrototypeOf(TipSketch)).apply(this, arguments));
    }

    _createClass(TipSketch, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPSKETCH';
            this.code = '1806'; // 草图
            this.source.s_sourceType = '1806';
            this.deep = null;
            this.g_point = [];
            this.g_line = [];
            this.g_polygon = [];
            if (data.feedback && data.feedback.f_array && data.feedback.f_array.length > 0) {
                var fArray = data.feedback.f_array;
                var i = void 0,
                    j = void 0;
                var temp = void 0;
                for (i = 0; i < fArray.length; i++) {
                    for (j = 0; j < fArray[i].content.length; j++) {
                        temp = fArray[i].content[j];
                        if (temp.geo) {
                            if (temp.geo.type === 'Point') {
                                this.g_point.push(temp.geo);
                            } else if (temp.geo.type === 'LineString') {
                                this.g_line.push(temp.geo);
                            } else if (temp.geo.type === 'Polygon') {
                                this.g_polygon.push(temp.geo);
                            }
                        }
                    }
                }
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            return data;
        }
    }]);

    return TipSketch;
}(_Tip3.default);

exports.default = TipSketch;

/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 坡度 的前端数据模型
 */
var TipSlope = function (_Tip) {
    _inherits(TipSlope, _Tip);

    function TipSlope() {
        _classCallCheck(this, TipSlope);

        return _possibleConstructorReturn(this, (TipSlope.__proto__ || Object.getPrototypeOf(TipSlope)).apply(this, arguments));
    }

    _createClass(TipSlope, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPSLOPE';
            this.code = '1106'; // 坡度 *

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    nId: data.deep.nId || 0,
                    out: data.deep.out || {},
                    tp: data.deep.tp || 0,
                    end: data.deep.end || 0
                };
                if (this.deep.out.type === 1 && this.deep.out.id) {
                    this.deep.out.id = parseInt(this.deep.out.id, 10);
                }
            } else {
                this.deep = {
                    id: '',
                    nId: 0,
                    out: {
                        id: '',
                        type: 1
                    },
                    tp: 0,
                    end: 0
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipSlope;
}(_Tip3.default);

exports.default = TipSlope;

/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 自然语音引导 的前端数据模型
 */
var TipNatureVoiceGuide = function (_Tip) {
    _inherits(TipNatureVoiceGuide, _Tip);

    function TipNatureVoiceGuide() {
        _classCallCheck(this, TipNatureVoiceGuide);

        return _possibleConstructorReturn(this, (TipNatureVoiceGuide.__proto__ || Object.getPrototypeOf(TipNatureVoiceGuide)).apply(this, arguments));
    }

    _createClass(TipNatureVoiceGuide, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPNATUREVOICEGUIDE';
            this.code = '1307'; // 自然语音引导

            if (data.deep) {
                this.deep = {
                    exp: data.deep.exp || {},
                    agl: data.deep.agl || 0,
                    obj: data.deep.obj || {}
                };
            } else {
                this.deep = {
                    exp: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    obj: {
                        poiId: 0,
                        name: '',
                        geo: {},
                        desc: '',
                        src: '',
                        srcTp: ''
                    }
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipNatureVoiceGuide;
}(_Tip3.default);

exports.default = TipNatureVoiceGuide;

/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 特殊交通类型 的前端数据模型
 */
var TipSpecialTrafficType = function (_Tip) {
    _inherits(TipSpecialTrafficType, _Tip);

    function TipSpecialTrafficType() {
        _classCallCheck(this, TipSpecialTrafficType);

        return _possibleConstructorReturn(this, (TipSpecialTrafficType.__proto__ || Object.getPrototypeOf(TipSpecialTrafficType)).apply(this, arguments));
    }

    _createClass(TipSpecialTrafficType, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPSPECIALTRAFFICTYPE';
            this.code = '1602'; // 特殊交通类型

            if (data.deep) {
                this.deep = {
                    geo: data.deep.geo || {},
                    name: data.deep.name || '',
                    f_array: data.deep.f_array || []
                };

                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    geo: {},
                    name: '',
                    f_array: [{
                        id: '',
                        type: 1,
                        geoF: {}
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipSpecialTrafficType;
}(_Tip3.default);

exports.default = TipSpecialTrafficType;

/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 减速带 的前端数据模型
 */
var TipSpeedBump = function (_Tip) {
    _inherits(TipSpeedBump, _Tip);

    function TipSpeedBump() {
        _classCallCheck(this, TipSpeedBump);

        return _possibleConstructorReturn(this, (TipSpeedBump.__proto__ || Object.getPrototypeOf(TipSpeedBump)).apply(this, arguments));
    }

    _createClass(TipSpeedBump, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPSPEEDBUMP';
            this.code = '1108'; // 减速带

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    in: data.deep.in || {},
                    nId: data.deep.nId || 0,
                    agl: data.deep.agl || 0,
                    dir: data.deep.dir || 2
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
            } else {
                this.deep = {
                    id: '',
                    in: {
                        id: '',
                        type: 1
                    },
                    nId: 0,
                    agl: 0,
                    dir: 2
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipSpeedBump;
}(_Tip3.default);

exports.default = TipSpeedBump;

/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 条件限速 的前端数据模型
 */
var TipSpeedlimit = function (_Tip) {
    _inherits(TipSpeedlimit, _Tip);

    function TipSpeedlimit() {
        _classCallCheck(this, TipSpeedlimit);

        return _possibleConstructorReturn(this, (TipSpeedlimit.__proto__ || Object.getPrototypeOf(TipSpeedlimit)).apply(this, arguments));
    }

    _createClass(TipSpeedlimit, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPSPEEDLIMIT';
            this.code = '1111'; // 条件限速 *

            if (data.deep) {
                this.deep = {
                    sID: data.deep.sID || [],
                    f: data.deep.f || {},
                    agl: data.deep.agl || 0,
                    rdDir: data.deep.rdDir || 0,
                    value: data.deep.value || 0,
                    se: data.deep.se || 0,
                    d_array: data.deep.d_array || []
                };
                if (this.deep.f.type === 1 && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    sID: [{
                        id: '',
                        sq: 1
                    }],
                    f: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    rdDir: 0,
                    value: 0,
                    se: 0,
                    d_array: [{
                        sq: 1,
                        dpnd: 1,
                        time: ''
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipSpeedlimit;
}(_Tip3.default);

exports.default = TipSpeedlimit;

/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 阶梯 的前端数据模型
 */
var TipStair = function (_Tip) {
    _inherits(TipStair, _Tip);

    function TipStair() {
        _classCallCheck(this, TipStair);

        return _possibleConstructorReturn(this, (TipStair.__proto__ || Object.getPrototypeOf(TipStair)).apply(this, arguments));
    }

    _createClass(TipStair, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPSTAIR';
            this.code = '1518'; // 阶梯

            if (data.deep) {
                this.deep = {
                    grade: data.deep.grade || 1,
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: data.deep.f_array || []
                };
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    grade: 1,
                    gSLoc: {},
                    gELoc: {},
                    f_array: [{
                        id: '',
                        type: 0,
                        flag: '0'
                    }]
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipStair;
}(_Tip3.default);

exports.default = TipStair;

/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 收费站 的前端数据模型
 */
var TipTollGate = function (_Tip) {
    _inherits(TipTollGate, _Tip);

    function TipTollGate() {
        _classCallCheck(this, TipTollGate);

        return _possibleConstructorReturn(this, (TipTollGate.__proto__ || Object.getPrototypeOf(TipTollGate)).apply(this, arguments));
    }

    _createClass(TipTollGate, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPTOLLGATE';
            this.code = '1107'; // 收费站
            this.source.s_sourceType = '1107';
            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    in: {},
                    out: {},
                    nId: data.deep.nId || 0,
                    agl: data.deep.agl || 0.0,
                    tp: data.deep.tp || 0,
                    pNum: data.deep.pNum || 0,
                    etc: data.deep.etc || [],
                    wgt: data.deep.wgt || [],
                    loc: data.deep.loc || 0,
                    name: data.deep.name || '',
                    photo: data.deep.photo || 1
                };
                if (data.deep.in) {
                    this.deep.in = data.deep.in;
                    if (this.deep.in.type === 1 && this.deep.in.id) {
                        this.deep.in.id = parseInt(this.deep.in.id, 10);
                    }
                }
                if (data.deep.out) {
                    this.deep.out = data.deep.out;
                    if (this.deep.out.type === 1 && this.deep.out.id) {
                        this.deep.out.id = parseInt(this.deep.out.id, 10);
                    }
                }
            } else {
                this.deep = {
                    id: '',
                    in: {
                        id: '',
                        type: 1
                    },
                    out: {},
                    nId: 0,
                    agl: 0.0,
                    tp: 0,
                    pNum: 0,
                    etc: [],
                    wgt: [],
                    loc: 0,
                    photo: 1,
                    name: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.out.id) {
                data.deep.out.id = data.deep.out.id.toString();
            }
            if (data.deep.in.id) {
                data.deep.in.id = data.deep.in.id.toString();
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipTollGate;
}(_Tip3.default);

exports.default = TipTollGate;

/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 红绿灯 的前端数据模型
 */
var TipTrafficSignal = function (_Tip) {
    _inherits(TipTrafficSignal, _Tip);

    function TipTrafficSignal() {
        _classCallCheck(this, TipTrafficSignal);

        return _possibleConstructorReturn(this, (TipTrafficSignal.__proto__ || Object.getPrototypeOf(TipTrafficSignal)).apply(this, arguments));
    }

    _createClass(TipTrafficSignal, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPTRAFFICSIGNAL';
            this.code = '1102'; // 红绿灯
            this.source.s_sourceType = '1102';
            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    inCt: data.deep.inCt || (data.deep.inCt === 0 ? 0 : 1),
                    f_array: []
                };
                if (this.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].f.type === 1 && this.deep.f_array[i].f.id) {
                        this.deep.f_array[i].f.id = parseInt(this.deep.f_array[i].f.id, 10);
                    }
                }
            } else {
                this.deep = {
                    id: '',
                    inCt: 1,
                    f_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f_array) {
                for (var i = 0; i < data.deep.f_array.length; i++) {
                    data.deep.f_array[i].f.id = data.deep.f_array[i].f.id.toString();
                }
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipTrafficSignal;
}(_Tip3.default);

exports.default = TipTrafficSignal;

/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 红绿灯方位 的前端数据模型
 */
var TipTrafficSignalDir = function (_Tip) {
    _inherits(TipTrafficSignalDir, _Tip);

    function TipTrafficSignalDir() {
        _classCallCheck(this, TipTrafficSignalDir);

        return _possibleConstructorReturn(this, (TipTrafficSignalDir.__proto__ || Object.getPrototypeOf(TipTrafficSignalDir)).apply(this, arguments));
    }

    _createClass(TipTrafficSignalDir, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPTRAFFICSIGNALDIR';
            this.code = '1103'; // 红绿灯方位 *

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    in: data.deep.in || {},
                    nId: data.deep.nId || 0,
                    loc: data.deep.loc || 0
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
            } else {
                this.deep = {
                    id: '',
                    in: {
                        id: '',
                        type: 1
                    },
                    nId: 0,
                    loc: 0
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipTrafficSignalDir;
}(_Tip3.default);

exports.default = TipTrafficSignalDir;

/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 卡车限制 的前端数据模型
 */
var TipTruckLimit = function (_Tip) {
    _inherits(TipTruckLimit, _Tip);

    function TipTruckLimit() {
        _classCallCheck(this, TipTruckLimit);

        return _possibleConstructorReturn(this, (TipTruckLimit.__proto__ || Object.getPrototypeOf(TipTruckLimit)).apply(this, arguments));
    }

    _createClass(TipTruckLimit, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPTRUCKLIMIT';
            this.code = '1110'; // 卡车限制

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    f: data.deep.f || {},
                    agl: data.deep.agl || 0,
                    rdDir: data.deep.rdDir || 0,
                    ht: data.deep.ht || 0,
                    wt: data.deep.wt || 0,
                    ax: data.deep.ax || 0,
                    wd: data.deep.wd || 0
                };
                if (this.deep.f.type === 1 && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    id: '',
                    f: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    rdDir: 0,
                    ht: 0,
                    wt: 0,
                    ax: 0,
                    wd: 0
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipTruckLimit;
}(_Tip3.default);

exports.default = TipTruckLimit;

/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 卡车交限 的前端数据模型
 */
var TipTruckRestriction = function (_Tip) {
    _inherits(TipTruckRestriction, _Tip);

    function TipTruckRestriction() {
        _classCallCheck(this, TipTruckRestriction);

        return _possibleConstructorReturn(this, (TipTruckRestriction.__proto__ || Object.getPrototypeOf(TipTruckRestriction)).apply(this, arguments));
    }

    _createClass(TipTruckRestriction, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPTRUCKRESTRICTION';
            this.code = '1303'; // 卡车交限

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    in: data.deep.in || {},
                    agl: data.deep.agl || 0,
                    info: data.deep.info || [],
                    nId: data.deep.nId || 0,
                    o_array: data.deep.o_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
                for (var i = 0; i < this.deep.o_array.length; i++) {
                    for (var j = 0; j < this.deep.o_array[i].out.length; j++) {
                        if (this.deep.o_array[i].out[j].type === 1 && this.deep.o_array[i].out[j].id) {
                            this.deep.o_array[i].out[j].id = parseInt(this.deep.o_array[i].out[j].id, 10);
                        }
                    }
                }
            } else {
                this.deep = {
                    id: '',
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    info: [{
                        info: 0,
                        sq: 0
                    }],
                    nId: 0,
                    o_array: [{
                        sq: 0,
                        out: [{
                            id: '',
                            type: 1,
                            num: 0,
                            geo: {}
                        }],
                        oInfo: 0,
                        c_array: [{
                            time: '',
                            trl: 0,
                            wt: 0,
                            ax: 0,
                            ac: 0,
                            out: 0
                        }]
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipTruckRestriction;
}(_Tip3.default);

exports.default = TipTruckRestriction;

/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 卡车限速 的前端数据模型
 */
var TipTruckSpeedLimit = function (_Tip) {
    _inherits(TipTruckSpeedLimit, _Tip);

    function TipTruckSpeedLimit() {
        _classCallCheck(this, TipTruckSpeedLimit);

        return _possibleConstructorReturn(this, (TipTruckSpeedLimit.__proto__ || Object.getPrototypeOf(TipTruckSpeedLimit)).apply(this, arguments));
    }

    _createClass(TipTruckSpeedLimit, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPTRUCKSPEEDLIMIT';
            this.code = '1114'; // 卡车限速 *

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    f: data.deep.f || {},
                    agl: data.deep.agl || 0,
                    rdDir: data.deep.rdDir || 0,
                    value: data.deep.value || 0,
                    se: data.deep.se || '',
                    desc: data.deep.desc || ''
                };
                if (this.deep.f.type === 1 && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
            } else {
                this.deep = {
                    id: '',
                    f: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    rdDir: 0,
                    value: 0,
                    se: 0,
                    desc: ''
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipTruckSpeedLimit;
}(_Tip3.default);

exports.default = TipTruckSpeedLimit;

/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 隧道 的前端数据模型
 */
var TipTunnel = function (_Tip) {
    _inherits(TipTunnel, _Tip);

    function TipTunnel() {
        _classCallCheck(this, TipTunnel);

        return _possibleConstructorReturn(this, (TipTunnel.__proto__ || Object.getPrototypeOf(TipTunnel)).apply(this, arguments));
    }

    _createClass(TipTunnel, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPTUNNEL';
            this.code = '1511'; // 隧道
            this.source.s_sourceType = '1511';
            if (data.deep) {
                this.deep = {
                    name: data.deep.name || '',
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    name: '',
                    gSLoc: {},
                    gELoc: {},
                    f_array: []
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = this.deepCopy(this);
            if (data.deep.f_array) {
                for (var i = 0; i < data.deep.f_array.length; i++) {
                    data.deep.f_array[i].id = data.deep.f_array[i].id.toString();
                }
            }
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipTunnel;
}(_Tip3.default);

exports.default = TipTunnel;

/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * underpass 的前端数据模型
 */
var TipUnderpass = function (_Tip) {
    _inherits(TipUnderpass, _Tip);

    function TipUnderpass() {
        _classCallCheck(this, TipUnderpass);

        return _possibleConstructorReturn(this, (TipUnderpass.__proto__ || Object.getPrototypeOf(TipUnderpass)).apply(this, arguments));
    }

    _createClass(TipUnderpass, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPUNDERPASS';
            this.code = '1505'; // underpass

            if (data.deep) {
                this.deep = {
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: []
                };
                if (data.deep.f_array) {
                    this.deep.f_array = data.deep.f_array;
                }
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    gSLoc: {},
                    gELoc: {},
                    f_array: [{
                        id: '',
                        type: 1,
                        flag: '0'
                    }]
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipUnderpass;
}(_Tip3.default);

exports.default = TipUnderpass;

/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * usage fee 的前端数据模型
 */
var TipUsageFeeRequired = function (_Tip) {
    _inherits(TipUsageFeeRequired, _Tip);

    function TipUsageFeeRequired() {
        _classCallCheck(this, TipUsageFeeRequired);

        return _possibleConstructorReturn(this, (TipUsageFeeRequired.__proto__ || Object.getPrototypeOf(TipUsageFeeRequired)).apply(this, arguments));
    }

    _createClass(TipUsageFeeRequired, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPUSAGEFEEREQUIRED';
            this.code = '1517'; // usage fee

            if (data.deep) {
                this.deep = {
                    gSLoc: data.deep.gSLoc || {},
                    gELoc: data.deep.gELoc || {},
                    f_array: data.deep.f_array || [],
                    tp: data.deep.tp || 0,
                    vt: data.deep.vt || [],
                    time: data.deep.time || ''
                };
                for (var i = 0; i < this.deep.f_array.length; i++) {
                    if (this.deep.f_array[i].type === 1 && this.deep.f_array[i].id) {
                        this.deep.f_array[i].id = parseInt(this.deep.f_array[i].id, 10);
                    }
                }
            } else {
                this.deep = {
                    gSLoc: {},
                    gELoc: {},
                    f_array: [{
                        id: '',
                        type: 1,
                        flag: '0'
                    }],
                    tp: 0,
                    vt: [],
                    time: ''
                };
            }

            if (data.old) {
                this.old = {
                    old_array: data.old.old_array || []
                };
            } else {
                this.old = {
                    old_array: []
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipUsageFeeRequired;
}(_Tip3.default);

exports.default = TipUsageFeeRequired;

/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 可变导向车道 的前端数据模型
 */
var TipVariableDirectionLane = function (_Tip) {
    _inherits(TipVariableDirectionLane, _Tip);

    function TipVariableDirectionLane() {
        _classCallCheck(this, TipVariableDirectionLane);

        return _possibleConstructorReturn(this, (TipVariableDirectionLane.__proto__ || Object.getPrototypeOf(TipVariableDirectionLane)).apply(this, arguments));
    }

    _createClass(TipVariableDirectionLane, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPVARIABLEDIRECTIONLANE';
            this.code = '1311'; // 可变导向车道

            if (data.deep) {
                this.deep = {
                    f: data.deep.f || {},
                    agl: data.deep.agl || 0,
                    ln: data.deep.ln || []
                };

                if (this.deep.f.type === 1 && this.deep.f.id) {
                    this.deep.f.id = parseInt(this.deep.f.id, 10);
                }
                for (var i = 0; i < this.deep.ln.length; i++) {
                    for (var j = 0; j < this.deep.ln[i].o_array.length; j++) {
                        if (this.deep.ln[i].o_array[j].out.type === 1 && this.deep.ln[i].o_array[j].out.id) {
                            this.deep.ln[i].o_array[j].out.id = parseInt(this.deep.ln[i].o_array[j].out.id, 10);
                        }
                    }
                }
            } else {
                this.deep = {
                    f: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    ln: [{
                        var: 0,
                        o_array: [{
                            out: {
                                id: '',
                                type: 1,
                                num: 0,
                                geo: {}
                            },
                            time: ''
                        }]
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipVariableDirectionLane;
}(_Tip3.default);

exports.default = TipVariableDirectionLane;

/***/ }),
/* 583 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 可变限速 的前端数据模型
 */
var TipVariableSpeed = function (_Tip) {
    _inherits(TipVariableSpeed, _Tip);

    function TipVariableSpeed() {
        _classCallCheck(this, TipVariableSpeed);

        return _possibleConstructorReturn(this, (TipVariableSpeed.__proto__ || Object.getPrototypeOf(TipVariableSpeed)).apply(this, arguments));
    }

    _createClass(TipVariableSpeed, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPVARIABLESPEED';
            this.code = '1112'; // 可变限速

            if (data.deep) {
                this.deep = {
                    id: data.deep.id || '',
                    in: data.deep.in || {},
                    nId: data.deep.nId || 0,
                    out: data.deep.out || {},
                    agl: data.deep.agl || 0,
                    loc: data.deep.loc || 0
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
                if (this.deep.out.type === 1 && this.deep.out.id) {
                    this.deep.out.id = parseInt(this.deep.out.id, 10);
                }
            } else {
                this.deep = {
                    id: '',
                    in: {
                        id: '',
                        type: 1
                    },
                    nId: 0,
                    out: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    loc: 0
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipVariableSpeed;
}(_Tip3.default);

exports.default = TipVariableSpeed;

/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tip2 = __webpack_require__(2);

var _Tip3 = _interopRequireDefault(_Tip2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 危险信息 的前端数据模型
 */
var TipWarningInfo = function (_Tip) {
    _inherits(TipWarningInfo, _Tip);

    function TipWarningInfo() {
        _classCallCheck(this, TipWarningInfo);

        return _possibleConstructorReturn(this, (TipWarningInfo.__proto__ || Object.getPrototypeOf(TipWarningInfo)).apply(this, arguments));
    }

    _createClass(TipWarningInfo, [{
        key: 'setAttributes',

        /**
         * 模型转换主函数，将接口返回的数据转换为前端数据模型
         * @param  {object} data 接口返回的数据
         * @return {undefined}
         */
        value: function setAttributes(data) {
            this.geoLiveType = 'TIPWARNINGINFO';
            this.code = '1105'; // 危险信息

            if (data.deep) {
                this.deep = {
                    wID: data.deep.wID || [],
                    in: data.deep.in || {},
                    agl: data.deep.agl || 0,
                    rdDir: data.deep.rdDir || 0,
                    w_array: data.deep.w_array || []
                };
                if (this.deep.in.type === 1 && this.deep.in.id) {
                    this.deep.in.id = parseInt(this.deep.in.id, 10);
                }
            } else {
                this.deep = {
                    wID: [{
                        id: '',
                        sq: 0
                    }],
                    in: {
                        id: '',
                        type: 1
                    },
                    agl: 0,
                    rdDir: 0,
                    w_array: [{
                        sq: 0,
                        tp: '',
                        vDis: 0,
                        wDis: 0,
                        time: '',
                        desc: ''
                    }]
                };
            }
        }
        /**
         * 将前端数据模型还原为接口数据模型
         * @return {Object} 接口数据模型
         */

    }, {
        key: 'getIntegrate',
        value: function getIntegrate() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
        /**
         * 获取对象概要属性信息
         * @return {Object} 概要属性对象
         */

    }, {
        key: 'getSnapShot',
        value: function getSnapShot() {
            var data = {};
            data.deep = this.deep;
            return data;
        }
    }]);

    return TipWarningInfo;
}(_Tip3.default);

exports.default = TipWarningInfo;

/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _LineInfo = __webpack_require__(586);

Object.defineProperty(exports, 'LineInfo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LineInfo).default;
  }
});

var _PointInfo = __webpack_require__(587);

Object.defineProperty(exports, 'PointInfo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_PointInfo).default;
  }
});

var _PolygonInfo = __webpack_require__(588);

Object.defineProperty(exports, 'PolygonInfo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_PolygonInfo).default;
  }
});

var _QLineInfo = __webpack_require__(589);

Object.defineProperty(exports, 'QLineInfo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_QLineInfo).default;
  }
});

var _QPointInfo = __webpack_require__(590);

Object.defineProperty(exports, 'QPointInfo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_QPointInfo).default;
  }
});

var _QPolygonInfo = __webpack_require__(591);

Object.defineProperty(exports, 'QPolygonInfo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_QPolygonInfo).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Info2 = __webpack_require__(60);

var _Info3 = _interopRequireDefault(_Info2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 数据型线情报
 */

var LineInfo = function (_Info) {
  _inherits(LineInfo, _Info);

  function LineInfo() {
    _classCallCheck(this, LineInfo);

    return _possibleConstructorReturn(this, (LineInfo.__proto__ || Object.getPrototypeOf(LineInfo)).apply(this, arguments));
  }

  _createClass(LineInfo, [{
    key: 'setAttributes',

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @return {undefined}
     */
    value: function setAttributes() {
      this.geoLiveType = 'LineInfo';
      this.wktToGeoJson();
    }
    /**
     * wkt数据转GeoJson
     * @return {undefined}
     */

  }, {
    key: 'wktToGeoJson',
    value: function wktToGeoJson() {
      var geometryAlgorithm = new fastmap.mapApi.geometry.GeometryAlgorithm();
      this.g_location = geometryAlgorithm.wktToGeojson(this.g_location);
    }
  }]);

  return LineInfo;
}(_Info3.default);

exports.default = LineInfo;

/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Info2 = __webpack_require__(60);

var _Info3 = _interopRequireDefault(_Info2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 数据型点情报
 */

var PointInfo = function (_Info) {
  _inherits(PointInfo, _Info);

  function PointInfo() {
    _classCallCheck(this, PointInfo);

    return _possibleConstructorReturn(this, (PointInfo.__proto__ || Object.getPrototypeOf(PointInfo)).apply(this, arguments));
  }

  _createClass(PointInfo, [{
    key: 'setAttributes',

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @return {undefined}
     */
    value: function setAttributes() {
      this.geoLiveType = 'PointInfo';
      this.wktToGeoJson();
    }
    /**
     * wkt数据转GeoJson
     * @return {undefined}
     */

  }, {
    key: 'wktToGeoJson',
    value: function wktToGeoJson() {
      var geometryAlgorithm = new fastmap.mapApi.geometry.GeometryAlgorithm();
      this.g_location = geometryAlgorithm.wktToGeojson(this.g_location);
    }
  }]);

  return PointInfo;
}(_Info3.default);

exports.default = PointInfo;

/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Info2 = __webpack_require__(60);

var _Info3 = _interopRequireDefault(_Info2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 数据型面情报
 */
var PolygonInfo = function (_Info) {
  _inherits(PolygonInfo, _Info);

  function PolygonInfo() {
    _classCallCheck(this, PolygonInfo);

    return _possibleConstructorReturn(this, (PolygonInfo.__proto__ || Object.getPrototypeOf(PolygonInfo)).apply(this, arguments));
  }

  _createClass(PolygonInfo, [{
    key: 'setAttributes',

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @return {undefined}
     */
    value: function setAttributes() {
      this.geoLiveType = 'PolygonInfo';
      this.wktToGeoJson();
    }
    /**
     * wkt数据转GeoJson
     * @return {undefined}
     */

  }, {
    key: 'wktToGeoJson',
    value: function wktToGeoJson() {
      var geometryAlgorithm = new fastmap.mapApi.geometry.GeometryAlgorithm();
      this.g_location = geometryAlgorithm.wktToGeojson(this.g_location);
    }
  }]);

  return PolygonInfo;
}(_Info3.default);

exports.default = PolygonInfo;

/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Info2 = __webpack_require__(60);

var _Info3 = _interopRequireDefault(_Info2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 情报型线情报
 */
var QLineInfo = function (_Info) {
  _inherits(QLineInfo, _Info);

  function QLineInfo() {
    _classCallCheck(this, QLineInfo);

    return _possibleConstructorReturn(this, (QLineInfo.__proto__ || Object.getPrototypeOf(QLineInfo)).apply(this, arguments));
  }

  _createClass(QLineInfo, [{
    key: 'setAttributes',

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @return {undefined}
     */
    value: function setAttributes() {
      this.geoLiveType = 'QLineInfo';
      this.wktToGeoJson();
    }
    /**
     * wkt数据转GeoJson
     * @return {undefined}
     */

  }, {
    key: 'wktToGeoJson',
    value: function wktToGeoJson() {
      var geometryAlgorithm = new fastmap.mapApi.geometry.GeometryAlgorithm();
      this.g_location = geometryAlgorithm.wktToGeojson(this.g_location);
    }
  }]);

  return QLineInfo;
}(_Info3.default);

exports.default = QLineInfo;

/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Info2 = __webpack_require__(60);

var _Info3 = _interopRequireDefault(_Info2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 情报型点情报
 */
var QPointInfo = function (_Info) {
  _inherits(QPointInfo, _Info);

  function QPointInfo() {
    _classCallCheck(this, QPointInfo);

    return _possibleConstructorReturn(this, (QPointInfo.__proto__ || Object.getPrototypeOf(QPointInfo)).apply(this, arguments));
  }

  _createClass(QPointInfo, [{
    key: 'setAttributes',

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @return {undefined}
     */
    value: function setAttributes() {
      this.geoLiveType = 'QPointInfo';
      this.wktToGeoJson();
    }
    /**
     * wkt数据转GeoJson
     * @return {undefined}
     */

  }, {
    key: 'wktToGeoJson',
    value: function wktToGeoJson() {
      var geometryAlgorithm = new fastmap.mapApi.geometry.GeometryAlgorithm();
      this.g_location = geometryAlgorithm.wktToGeojson(this.g_location);
    }
  }]);

  return QPointInfo;
}(_Info3.default);

exports.default = QPointInfo;

/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Info2 = __webpack_require__(60);

var _Info3 = _interopRequireDefault(_Info2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 数据型面情报
 */
var QPolygonInfo = function (_Info) {
  _inherits(QPolygonInfo, _Info);

  function QPolygonInfo() {
    _classCallCheck(this, QPolygonInfo);

    return _possibleConstructorReturn(this, (QPolygonInfo.__proto__ || Object.getPrototypeOf(QPolygonInfo)).apply(this, arguments));
  }

  _createClass(QPolygonInfo, [{
    key: 'setAttributes',

    /**
     * 模型转换主函数，将接口返回的数据库模型转换为前端数据模型
     * @return {undefined}
     */
    value: function setAttributes() {
      this.geoLiveType = 'QPolygonInfo';
      this.wktToGeoJson();
    }
    /**
     * wkt数据转GeoJson
     * @return {undefined}
     */

  }, {
    key: 'wktToGeoJson',
    value: function wktToGeoJson() {
      var geometryAlgorithm = new fastmap.mapApi.geometry.GeometryAlgorithm();
      this.g_location = geometryAlgorithm.wktToGeojson(this.g_location);
    }
  }]);

  return QPolygonInfo;
}(_Info3.default);

exports.default = QPolygonInfo;

/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * IxPoi需要用到的常量配置
 */
var IxPoiConstant = Object.freeze({
    PARKING_TYPE: {
        // 0: '室内',
        1: '室外',
        2: '占道',
        3: '室内(地上)',
        4: '室内(地下)'
    },
    TOLLSTD: {
        0: '包年',
        1: '包月',
        2: '计次',
        3: '计时',
        4: '分段计价',
        5: '免费'
    },
    TOLLWAY: {
        0: '手工收费',
        1: '电子收费',
        2: '自助缴费'
    },
    remark_ml: {
        0: '无条件免费',
        1: '住宿免费',
        2: '就餐免费',
        3: '购物免费',
        4: '购物或消费满额免部分费用',
        5: '和停车场所在的主体 POI 产生消费、办事、访问、挂号、就医等关系时免费',
        6: '只对内或产生消费的群体开放',
        7: '汽车美容'
    },
    remark_hm: {
        11: '搭升降機',
        12: '祗限訪客',
        13: '祗停貨車',
        14: '30 分鐘免費',
        15: '電動車充電',
        16: '留匙',
        17: '洗車及打蠟'
    },
    REMARK: {
        0: '无条件免费',
        1: '住宿免费',
        2: '就餐免费',
        3: '购物免费',
        4: '购物或消费满额免部分费用',
        5: '和停车场所在的主体 POI 产生消费、办事、访问、挂号、就医等关系时免费',
        6: '只对内或产生消费的群体开放',
        7: '汽车美容',
        11: '搭升降机',
        12: '只限访客',
        14: '首时段免费',
        16: '留匙（钥匙代管）',
        17: '洗车及打蜡',
        18: '电动汽车可充电'
    },
    RETING: {
        1: '其他',
        3: '三星级',
        4: '四星级',
        5: '五星级',
        7: '一星级',
        8: '二星级',
        13: '准三星级',
        14: '准四星级',
        15: '准五星级',
        16: '准一星级',
        17: '准二星级'
    },
    CREDIT_CARD: {
        0: '不支持信用卡',
        1: '维士(visa)',
        2: '万事达(mastercard)',
        3: '大来(dinas)',
        4: '日本国际信用卡(jcb)',
        5: '美 国 运 通 (AmericaExpress)',
        6: '银联(unionpay)'
    },
    payment_ml: {
        0: '现金',
        1: '借记卡',
        2: '信用卡',
        3: '储值卡'
    },
    payment_hm: {
        10: '八達通',
        11: 'VISA',
        12: 'MasterCard',
        13: '現金',
        14: '其他'
    },
    service_ml: {
        1: '便利店',
        2: '洗车',
        3: '汽车维修',
        4: '卫生间',
        5: '餐饮',
        6: '住宿',
        7: '换油',
        8: '自助加油'
    },
    service_hm: {
        11: '換油服務Lube Service',
        12: '洗車服務Car Wash',
        13: '便利店Convenience Store',
        14: '廁所Toilet'
    },
    oilType: {
        0: '其他',
        89: '89号汽油',
        90: '90号汽油',
        92: '92号汽油',
        93: '93号汽油',
        95: '95号汽油',
        97: '97号汽油',
        98: '98号汽油'
    },
    mgType: {
        0: '其他',
        M5: 'M5号汽油',
        M10: 'M10号汽油',
        M15: 'M15号汽油',
        M30: 'M30号汽油',
        M50: 'M50号汽油',
        M85: 'M85号汽油',
        M100: 'M100号汽油'
    },
    egType: {
        0: '其他',
        E90: 'E90号汽油',
        E92: 'E92号汽油',
        E93: 'E93号汽油',
        E95: 'E95号汽油',
        E97: 'E97号汽油',
        E98: 'E98号汽油'
    },
    fuelType_ml: {
        0: '柴油',
        8: '生物柴油'
    },
    // fuelType_ml: {
    //     0: "柴油(Diesel)",
    //     1: "汽油(Gasoline)",
    //     2: "甲醇汽油(MG85)",
    //     3: "其它",
    //     4: "液化石油气(LPG)",
    //     5: "天然气(CNG)",
    //     6: "乙醇汽油(E10)",
    //     7: "氢燃料(Hydrogen)",
    //     8: "生物柴油(Biodiesel)",
    //     9: "液化天然气(LNG)"
    // },
    fuelType_hm: {
        11: 'SINO X Power',
        12: 'SINO Power',
        13: 'SINO Disel',
        21: '力勁柴油',
        22: '清新汽油',
        23: '超級汽油',
        31: 'Gold黄金',
        32: 'Platinum白金',
        33: 'Diesel特配柴油',
        34: '柴油现金咭',
        41: 'Disel超低硫柴油',
        42: '8000電油',
        43: 'F-1特級電油',
        51: 'Disesel柴油',
        52: 'FuelSave慳油配方汽油',
        53: 'Shell V-Power',
        61: '超勁慳油配方汽油',
        62: '清潔配方低硫柴油'
    },
    gasFuelType_ml: {
        3: '其他',
        4: '液化石油气',
        5: '天然气',
        7: '氢燃料',
        //         8: "生物柴油",
        9: '液化天然气'
    },
    gasFuelType_hm: {
        14: 'LPG',
        24: 'LPG',
        35: 'AutoGas石油氣',
        44: 'AutoGas石油氣',
        54: 'AutoGas石油氣'
    },
    sportsVenuesBuildingType: {
        0: '室内',
        1: '室外'
    },
    PAYMENT: { // 支付方式
        10: '八达通',
        11: 'VISA',
        12: 'MasterCard',
        13: '现金',
        15: '储值卡',
        14: '其他'
    },
    chargingType: { // 充电站类型
        1: '充电站',
        2: '充换电站',
        3: '充电桩组',
        4: '换电站'
    },
    chargingOpenType: { // 换电开放限制
        1: '无限制',
        2: '对环卫车开放',
        3: '对公交车开放',
        4: '对出租车开放',
        5: '对其他特种车辆开放',
        6: '对自有车辆开放'
    },
    serviceProv: { // 充电站类型
        0: '其他',
        1: '国家电网',
        2: '南方电网',
        3: '中石油',
        4: '中石化',
        5: '中海油',
        6: '中国普天',
        7: '特来电',
        8: '循道新能源',
        9: '富电科技',
        10: '华商三优',
        11: '中電',
        12: '港燈',
        13: '澳電',
        14: '绿狗',
        15: 'EVCARD',
        16: '星星充电',
        17: '电桩',
        18: '依威能源',
        99: '汽车品牌'
    },
    parkingFees: {
        0: '免费',
        1: '收费'
    },
    stationAvailableState: {
        0: '开放',
        1: '未开放',
        2: '维修中',
        3: '建设中',
        4: '规划中'
    },
    plugType: {
        0: '交流电3孔家用',
        1: '国标交流电7孔插槽',
        2: '国标直流电9孔插槽',
        8: '特斯拉专用插槽',
        9: '其他',
        10: '无法采集'
    },
    // 港澳插头类型
    plugTypeToCHT: {
        0: '交流电3孔家用',
        1: '国标交流电7孔插槽',
        2: '国标直流电9孔插槽',
        3: '美式交流5孔插槽',
        4: '美式直流Combo插槽',
        5: '欧式交流7孔插槽',
        6: '欧式直流Combo插槽',
        7: '日式直流CHAdeMO插槽',
        8: '特斯拉专用插槽',
        9: '其他',
        10: '无法采集'
    },
    openType: {
        1: '对所有车辆开放',
        2: '对环卫车开放',
        3: '对公交车开放',
        4: '对出租车开放',
        5: '对其他特种车辆开放',
        6: '对自有车辆开放',
        7: '个人充电桩'
    },
    plotAvailableState: {
        0: '可以使用（有电）',
        1: '不可使用（没电）',
        2: '维修中',
        3: '建设中',
        4: '规划中'
    },
    plotPayment: {
        0: '其他',
        1: '现金',
        2: '信用卡',
        3: '借记卡',
        4: '特制充值卡',
        5: 'APP'
    },
    truckType: {
        0: '非卡车',
        1: '仅卡车',
        2: '卡车+小汽车'
    }
});

exports.default = IxPoiConstant;

/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * POI精编常量
 */
var ColumnConstant = Object.freeze({
    /**
     * @type {object}
     */
    classifyRules_ml: {
        'FM-A04-04': '未名称统一POI作业',
        'FM-A04-05': '名称统一POI作业',
        'FM-A04-08': 'POI特殊名称统一',
        'FM-A04-10': 'POI分店名称统一',
        'FM-A04-21': '火车票代售点名称统一',
        'FM-A04-09': 'POI名称完整性作业',
        'FM-A07-01': '火车站、高铁、火车站出入口简称作业',
        'FM-A07-02': '银行类POI简称作业',
        'FM-A07-03': '大使馆简称作业',
        'FM-A07-11': '火车站停车场简称作业',
        'FM-A07-12': '机场及机场子设施简称作业',
        'FM-A04-18': '名称拼音作业',
        'FM-M01-01': '中文别名作业',
        'FM-YW-20-012': '官方英文名照片录入作业',
        'FM-YW-20-013': '中文即是英文作业',
        'FM-YW-20-014': '重要分类官方名称英文作业',
        'FM-YW-20-053': '官方标准英文名作业',
        'FM-YW-20-052': '非重要分类英文超长作业',
        'FM-YW-20-017': '非重要分类英文名作业',
        'FM-M01-02': '网络搜集英文作业',
        'FM-M01-04': '别名标准英文名作业',
        'FM-M01-03': '别名原始英文名作业',

        'FM-A09-01': '地址拆分作业',
        'FM-YW-20-026': '地址拼音作业',

        'FM-YW-20-018': '英文版地图作业',
        'FM-GLM60189': '非重要分类英文地址超长作业',
        'FM-YW-20-143': '重要分类地址英文作业'
    },
    // POI专项质检错误类型对应关系
    quaLevel: {
        'FM-A04-04': ['未名称统一POI作业错误', '作业遗漏', '其他'],
        'FM-A04-05': ['名称统一POI作业错误', '作业遗漏', '其他'],
        'FM-A04-08': ['POI特殊名称统一错误', '作业遗漏', '其他'],
        'FM-A04-10': ['POI分店名称统一错误', '作业遗漏', '其他'],
        'FM-A04-21': ['火车票代售点名称统一错误', '作业遗漏', '其他'],
        'FM-A04-09': ['POI名称完整性作业错误', '作业遗漏', '其他'],
        'FM-A07-01': ['火车站、高铁、火车站出入口简称作业错误', '作业遗漏', '其他'],
        'FM-A07-02': ['银行类POI简称作业错误', '作业遗漏', '其他'],
        'FM-A07-03': ['大使馆简称作业错误', '作业遗漏', '其他'],
        'FM-A07-11': ['火车站停车场简称作业错误', '作业遗漏', '其他'],
        'FM-A07-12': ['机场及机场子设施简称作业错误', '作业遗漏', '其他'],
        'FM-M01-01': ['别名错误'],
        'FM-A04-18': ['名称拼音作业错误', '作业遗漏', '其他'],
        'FM-A09-01': ['地址拆分作业错误', '作业遗漏', '其他'],
        'FM-YW-20-026': ['地址拼音作业错误', '作业遗漏', '其他'],
        'FM-YW-20-012': ['官方英文名照片录入作业', '作业遗漏', '其他'],
        'FM-YW-20-013': ['中文即是英文作业错误', '作业遗漏', '其他'],
        'FM-YW-20-014': ['人工确认英文名作业错误', '作业遗漏', '其他'],
        'FM-YW-20-053': ['官方标准英文名作业错误', '作业遗漏', '其他'],
        'FM-YW-20-052': ['非重要分类英文超长作业错误', '作业遗漏', '其他'],
        'FM-YW-20-018': ['重要分类地址英文作业错误', '作业遗漏', '其他'],
        'FM-GLM60189': ['非重要分类地址英文超长作业错误', '作业遗漏', '其他']
    },
    // poi质检问题分类、问题类型、问题现象、问题等级联动关系
    problemData: ['POI|点位|缺失|采集遗漏|B|脏乱差POI删除多余|C', 'POI|点位|点位偏差|采集错误|A|BUFFER内POI位移|B', 'POI|点位|点位偏差|采集错误|A|同侧POI（门牌）移整齐|B', 'POI|父子关系|父子关系|采集多余|A|小区开放区域父子关系多余|A', 'POI|地址|地址|采集遗漏|B|底商楼栋号采集遗漏|B', 'POI|电话|电话|采集遗漏|B|代理店电话不全|B', 'POI|分类|分类|采集错误|A|相同大分类的代码赋错|A', 'POI|分类|分类|采集错误|A|代理店未赋值具体分类|A', 'POI|分类|分类|采集错误|A|代理店分类赋错|A', 'POI|分类|分类|采集错误|A|不同大分类的代码赋错|A',
    // 'POI|分类|分类|采集遗漏|A|品牌选择遗漏|A',
    // 'POI|分类|分类|采集多余|A|品牌选择多余|A',
    // 'POI|分类|分类|采集错误|A|品牌选择错误|A',
    'POI|地址|地址|采集错误|A|参照地址标识错误|B', 'POI|地址|地址|采集错误|A|参照地址修改多余|B', 'POI|地址|地址|采集多余|B|子设施复制父设施地址|B', 'POI|标注|标注|采集遗漏|B|采集遗漏|B', 'POI|深度信息|加油加气站|采集错误|C|采集错误|B', 'POI|深度信息|停车场|采集错误|C|采集错误|C', 'POI|深度信息|租户信息|采集遗漏|C|可用楼层|C', 'POI|电话|电话|采集多余|B|出租转让电话多余|B', 'POI|POI等级|POI等级|采集错误|B|C类POI标注多余|B', 'POI|POI等级|POI等级|采集错误|B|C类POI标注遗漏|B', 'POI|POI等级|POI等级|采集错误|B|C类POI标注错误|B', 'POI|POI等级|POI等级|采集错误|B|B类POI标注多余|B', 'POI|POI等级|POI等级|采集错误|B|B类POI标注遗漏|B', 'POI|POI等级|POI等级|采集错误|B|B类POI标注错误|B', 'POI|标注|标注|采集多余|B|采集多余|B', 'POI|点位|逻辑关系|采集错误|A|同侧POI逻辑关系|A', 'POI|点位|逻辑关系|采集错误|A|异侧POI逻辑关系|A', 'POI|点位|逻辑关系|采集错误|A|POI与道路逻辑关系|A', 'POI|点位|逻辑关系|采集错误|A|POI与背景逻辑关系|A', 'POI|点位|点位偏差|采集错误|A|点位偏差50m以上|A', 'POI|点位|点位偏差|采集错误|A|点位偏差25-50m|B', 'POI|点位|点位偏差|采集错误|A|点位偏差25m以内|B', 'POI|点位|缺失|采集遗漏|B|沿街POI|B', 'POI|点位|缺失|采集遗漏|B|内部POI|B', 'POI|点位|多余|采集多余|B|沿街POI|B', 'POI|点位|多余|采集多余|B|不存在的内部POI|B', 'POI|点位|多余|采集多余|B|无固定门面/自身及周边环境脏乱差的|B', 'POI|点位|多余|采集多余|B|敏感POI|A', 'POI|点位|多余|采集多余|B|采集重复|C', 'POI|点位|多余|采集多余|B|删除遗漏|C', 'POI|点位|缺失|采集遗漏|B|非脏乱差POI删除多余|C', 'POI|深度信息|加油加气站|采集错误|C|燃料类型|B', 'POI|深度信息|加油加气站|采集错误|C|汽油型号|B', 'POI|深度信息|加油加气站|采集错误|C|乙醇汽油型号|B', 'POI|深度信息|加油加气站|采集遗漏|C|燃料类型|B', 'POI|深度信息|加油加气站|采集遗漏|C|汽油型号|B', 'POI|深度信息|加油加气站|采集遗漏|C|乙醇汽油型号|B', 'POI|深度信息|加油加气站|采集遗漏|C|采集遗漏|B', 'POI|深度信息|加油加气站|采集多余|C|采集多余|B', 'POI|深度信息|停车场|采集错误|C|收费标准|C', 'POI|深度信息|停车场|采集错误|C|收费描述|C', 'POI|深度信息|停车场|采集错误|C|支付方式|C', 'POI|深度信息|停车场|采集错误|C|营业时间|C', 'POI|深度信息|停车场|采集错误|C|车位数|C', 'POI|深度信息|停车场|采集遗漏|C|采集遗漏|C', 'POI|深度信息|停车场|采集遗漏|C|收费标准|C', 'POI|深度信息|停车场|采集遗漏|C|收费描述|C', 'POI|深度信息|停车场|采集遗漏|C|支付方式|C', 'POI|深度信息|停车场|采集遗漏|C|营业时间|C', 'POI|深度信息|停车场|采集遗漏|C|车位数|C', 'POI|深度信息|停车场|采集多余|C|采集多余|C', 'POI|深度信息|停车场|采集多余|C|收费标准|C', 'POI|深度信息|停车场|采集多余|C|收费描述|C', 'POI|深度信息|停车场|采集多余|C|支付方式|C', 'POI|深度信息|停车场|采集多余|C|营业时间|C', 'POI|深度信息|停车场|采集多余|C|车位数|C', 'POI|深度信息|租户信息|采集错误|C|可用楼层|C', 'POI|深度信息|租户信息|采集错误|C|空缺楼层|C', 'POI|深度信息|租户信息|采集错误|C|租户名称及所在楼层（水牌）|C', 'POI|深度信息|租户信息|采集遗漏|C|空缺楼层|C', 'POI|深度信息|租户信息|采集遗漏|C|租户信息标识|C', 'POI|深度信息|租户信息|采集多余|C|租户信息标识|C', 'POI|深度信息|租户信息|采集多余|C|空缺楼层|C', 'POI|深度信息|租户信息|采集多余|C|可用楼层|C', 'POI|深度信息|充电站|采集错误|C|采集错误|C', 'POI|深度信息|充电站|采集错误|C|充电站类型|B', 'POI|深度信息|充电站|采集错误|C|充电桩数量|C', 'POI|深度信息|充电站|采集错误|C|换电箱数量|C', 'POI|深度信息|充电站|采集错误|C|付费方式|C', 'POI|深度信息|充电站|采集错误|C|服务提供商|C', 'POI|深度信息|充电站|采集遗漏|C|充电站类型|C', 'POI|深度信息|充电站|采集遗漏|C|充电桩数量|C', 'POI|深度信息|充电站|采集遗漏|C|换电箱数量|C', 'POI|深度信息|充电站|采集遗漏|C|付费方式|C', 'POI|深度信息|充电站|采集遗漏|C|服务提供商|C', 'POI|深度信息|充电站|采集遗漏|C|采集遗漏|B', 'POI|深度信息|充电站|采集多余|C|可用楼层|B', 'POI|深度信息|充电桩|采集错误|C|采集错误|C', 'POI|深度信息|充电桩|采集错误|C|充电桩组号|C', 'POI|深度信息|充电桩|采集错误|C|充电桩数量|C', 'POI|深度信息|充电桩|采集错误|C|充电桩方式|C', 'POI|深度信息|充电桩|采集错误|C|充电桩插头类型|B', 'POI|深度信息|充电桩|采集错误|C|充电桩充电功率|B', 'POI|深度信息|充电桩|采集错误|C|充电桩充电电压|B', 'POI|深度信息|充电桩|采集错误|C|充电桩额定电压|B', 'POI|深度信息|充电桩|采集错误|C|充电模式|C', 'POI|深度信息|充电桩|采集遗漏|C|充电桩组遗漏|C', 'POI|深度信息|充电桩|采集遗漏|C|充电桩数量|C', 'POI|深度信息|充电桩|采集遗漏|C|充电桩方式|C', 'POI|深度信息|充电桩|采集遗漏|C|充电桩插头类型|B', 'POI|深度信息|充电桩|采集遗漏|C|充电桩充电功率|B', 'POI|深度信息|充电桩|采集遗漏|C|充电桩充电电压|B', 'POI|深度信息|充电桩|采集遗漏|C|充电桩额定电压|B', 'POI|深度信息|充电桩|采集遗漏|C|充电模式|C', 'POI|深度信息|充电桩|采集遗漏|C|采集遗漏|B', 'POI|深度信息|充电桩|采集多余|C|采集多余|B', 'POI|餐饮调查表|餐饮调查表|采集错误|C|形式|C', 'POI|餐饮调查表|餐饮调查表|采集错误|C|风味|C', 'POI|地址|地址|采集错误|A|地址完全错误|A', 'POI|地址|地址|采集错误|A|道路名错误|A', 'POI|地址|地址|采集错误|A|门牌号码错误|A', 'POI|地址|地址|采集错误|A|参照地址错误|A', 'POI|地址|地址|采集错误|A|符号错误|A', 'POI|地址|地址|采集遗漏|B|地址缺少|B', 'POI|电话|电话|采集错误|A|号码错误|A', 'POI|电话|电话|采集错误|A|区号错误|A', 'POI|电话|电话|采集错误|A|未优先采集固定电话|A', 'POI|电话|电话|采集遗漏|B|电话缺失|B', 'POI|电话|电话|采集多余|B|电话多余|B', 'POI|父子关系|父子关系|采集错误|A|父子关系错误|A', 'POI|父子关系|父子关系|采集遗漏|A|父子关系缺少|A', 'POI|父子关系|父子关系|采集多余|A|父子关系多余|A', 'POI|标注|标注|采集错误|B|室内|B', 'POI|标注|标注|采集错误|B|室外|B', 'POI|标注|标注|采集遗漏|B|24小时营业|B', 'POI|标注|标注|采集遗漏|B|英文名称|B', 'POI|标注|标注|采集遗漏|B|室内|B', 'POI|标注|标注|采集遗漏|B|室外|B', 'POI|标注|标注|采集遗漏|B|内部POI|B', 'POI|标注|标注|采集遗漏|B|参照地址|B', 'POI|标注|标注|采集遗漏|B|准星级|B', 'POI|标注|标注|采集遗漏|B|路|B', 'POI|标注|标注|采集遗漏|B|水|B', 'POI|标注|标注|采集遗漏|B|绿地|B', 'POI|标注|标注|采集遗漏|B|跨路|B', 'POI|标注|标注|采集遗漏|B|跨背景|B', 'POI|标注|标注|采集多余|B|24小时营业|B', 'POI|标注|标注|采集多余|B|英文名称|B', 'POI|标注|标注|采集多余|B|室内|B', 'POI|标注|标注|采集多余|B|室外|B', 'POI|标注|标注|采集多余|B|内部POI|B', 'POI|标注|标注|采集多余|B|参照地址|B', 'POI|标注|标注|采集多余|B|准星级|B', 'POI|标注|标注|采集多余|B|路|B', 'POI|标注|标注|采集多余|B|水|B', 'POI|标注|标注|采集多余|B|绿地|B', 'POI|标注|标注|采集多余|B|跨路|B', 'POI|标注|标注|采集多余|B|跨背景|B', 'POI|POI关联LINK|POI关联LINK|采集错误|A|与新测GPS关联错误|A', 'POI|POI关联LINK|POI关联LINK|采集错误|A|与POI画线关联错误|A', 'POI|POI关联LINK|POI关联LINK|采集错误|A|与原始数据（8级以上）关联错误|A', 'POI|名称|关键字|采集错误|A|错别字|A', 'POI|名称|关键字|采集错误|A|符号|A', 'POI|名称|关键字|采集错误|A|简繁体|A', 'POI|名称|关键字|采集错误|A|外文名称|A', 'POI|名称|关键字|采集错误|A|多字/少字|A', 'POI|名称|关键字|采集错误|A|标牌选取错误|A', 'POI|名称|分店名|采集错误|A|错别字|A', 'POI|名称|分店名|采集错误|A|符号|A', 'POI|名称|分店名|采集错误|A|简繁体|A', 'POI|名称|分店名|采集错误|A|外文名称|A', 'POI|名称|分店名|采集错误|A|多字/少字|A', 'POI|名称|分店名|采集错误|A|标牌选取错误|A', 'POI|名称|分店名|采集错误|A|遗漏采集|A', 'POI|名称|分店名|采集错误|A|多余采集|A', 'POI|名称|其他（名称中涉及的地域、类型、形式等）|采集错误|B|错别字|A', 'POI|名称|其他（名称中涉及的地域、类型、形式等）|采集错误|B|符号|A', 'POI|名称|其他（名称中涉及的地域、类型、形式等）|采集错误|B|简繁体|A', 'POI|名称|其他（名称中涉及的地域、类型、形式等）|采集错误|B|外文名称|A', 'POI|名称|其他（名称中涉及的地域、类型、形式等）|采集错误|B|多字/少字|A', 'POI|名称|其他（名称中涉及的地域、类型、形式等）|采集错误|B|标牌选取|A', 'POI|名称|其他（名称中涉及的地域、类型、形式等）|采集错误|B|遗漏采集|A', 'POI|名称|其他（名称中涉及的地域、类型、形式等）|采集错误|B|多余采集|A', 'POI|名称|完全错误|采集错误|A|完全错误|A', 'POI|备注|备注|采集遗漏|B|备注缺少|B', 'POI|POI ICON|POI ICON|采集错误|A|关联LINK|A', 'POI|POI ICON|POI ICON|采集错误|A|逻辑关系 |A', 'POI|POI ICON|POI ICON|采集错误|A|点位未放在中心区域内|A', 'POI|地址|地址|采集多余|B|采集多余|B', 'POI|餐饮调查表|餐饮调查表|采集多余|C|采集多余|C', 'POI|名称|关键字|采集错误|A|标准名称录入错误|A', 'POI|名称|分店名|采集错误|A|标准名称录入错误|A', 'POI|名称|其他（名称中涉及的地域、类型、形式等）|采集错误|A|标准名称录入错误|A', 'POI|名称|关键字|采集错误|A|广告冠名采集多余|A', 'POI|名称|分店名|采集错误|A|广告冠名采集多余|A', 'POI|名称|其他（名称中涉及的地域、类型、形式等）|采集错误|A|广告冠名采集多余|A', 'POI|地址|地址|采集错误|A|地址为设施本身或包含设施本身参照地址错误|A', 'POI|深度信息|停车场|采集错误|C|收费备注|C', 'POI|深度信息|停车场|采集错误|C|信息获取源|C', 'POI|深度信息|停车场|采集遗漏|C|收费备注|C', 'POI|深度信息|停车场|采集遗漏|C|信息获取源|C', 'POI|深度信息|停车场|采集多余|C|收费备注|C', 'POI|深度信息|停车场|采集多余|C|信息获取源|C', 'POI|深度信息|停车场|采集错误|C|照片不清晰|C', 'POI|深度信息|停车场|采集遗漏|C|照片遗漏|C', 'POI|深度信息|停车场|采集错误|C|照片涉及隐私|C', 'POI|深度信息|停车场|采集错误|C|照片有水印或日期|C', 'POI|POI关联LINK|POI关联LINK|采集错误|A|未关联在车辆可到达的最近的9级辅路上|A', 'POI|POI关联LINK|POI关联LINK|采集错误|A|偏差小于5米|A', 'POI|点位|点位偏差|采集错误|B|点位偏差5米不需移动|C', 'POI|点位|点位偏差|采集错误|A|区域性POI未放在区域中心|B', 'POI|点位|点位偏差|采集错误|A|区域性POI采集在内部道路上|B', 'POI|父子关系|父子关系|采集多余|A|社会道路到达的小区底商与小区父子关系多余|A', 'POI|父子关系|父子关系|采集遗漏|A|住宅楼底商父子关系遗漏|A', 'POI|邮政编码|邮政编码|采集遗漏|C|采集遗漏|C', 'POI|邮政编码|邮政编码|采集错误|C|采集错误|C', 'POI|邮政编码|邮政编码|采集多余|C|采集多余|C', 'POI|深度信息|星级酒店|采集错误|A|星级错误|A', 'POI|深度信息|星级酒店|采集错误|A|准星级错误|A', 'POI|深度信息|星级酒店|采集遗漏|A|星级遗漏|A', 'POI|深度信息|星级酒店|采集遗漏|A|准星级遗漏|A', 'POI|深度信息|星级酒店|采集多余|A|星级多余|A', 'POI|深度信息|星级酒店|采集多余|A|准星级多余|A', 'POI|深度信息|运动场馆|采集错误|A|形式错误|A', 'POI|深度信息|运动场馆|采集遗漏|A|形式遗漏|A', 'POI|深度信息|运动场馆|采集多余|A|形式多余|A', 'POI|点位|点位偏差|采集错误|A|大型商业综合体未采集在明显标识处|B', 'POI|名称|关键字|采集错误|A|名称未作统一|A', 'POI|名称|关键字|采集错误|A|方位门命名错误|A', 'POI|父子关系|父子关系|采集错误|A|同一对象采集多点时，父POI选择错误|A', 'POI|父子关系|父子关系|采集多余|A|同一对象采集多点时，多个点位间多余采集父子关系|A', 'POI|点位|多余|采集多余|B|非满足标准的内部POI采集多余|C', 'POI|点位|缺失|采集遗漏|B|标准要求的名称不同，未补充点位，如：地铁口|B', 'POI|点位|缺失|采集遗漏|B|对象存在多种类型时，未补充采集点位|B', 'POI|名称|关键字|采集错误|A|名称统一多余|A', 'POI|名称|分店名|采集错误|A|名称未作统一|A', 'POI|名称|分店名|采集错误|A|方位门命名错误|A', 'POI|名称|分店名|采集错误|A|名称统一多余|A', 'POI|名称|其他（名称中涉及的地域、类型、形式等）|采集错误|A|名称未作统一|A', 'POI|名称|其他（名称中涉及的地域、类型、形式等）|采集错误|A|方位门命名错误|A', 'POI|名称|其他（名称中涉及的地域、类型、形式等）|采集错误|A|名称统一多余|A', 'POI|CHAIN|CHAIN|采集错误|A|品牌选择错误|A', 'POI|CHAIN|CHAIN|采集遗漏|A|品牌选择遗漏|A', 'POI|CHAIN|CHAIN|采集多余|A|品牌选择多余|A', 'POI|POI_ICON|POI_ICON|采集错误|A|关联LINK|A', 'POI|POI_ICON|POI_ICON|采集错误|A|逻辑关系|A', 'POI|POI_ICON|POI_ICON|采集错误|A|点位未放在中心区域内|A', 'POI|邮政编码|邮政编码|采集遗漏|C|采集遗漏|C', 'POI|邮政编码|邮政编码|采集错误|C|采集错误|C', 'POI|邮政编码|邮政编码|采集多余|C|采集多余|C']
});

exports.default = ColumnConstant;

/***/ })
/******/ ]);
});
//# sourceMappingURL=dataApi.min.js.map